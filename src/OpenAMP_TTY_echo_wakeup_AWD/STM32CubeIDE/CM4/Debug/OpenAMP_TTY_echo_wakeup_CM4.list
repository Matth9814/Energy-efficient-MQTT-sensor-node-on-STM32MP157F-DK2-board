
OpenAMP_TTY_echo_wakeup_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0d0  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000a0d0  1000a0d0  0002a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c80  1000a120  1000a120  0002a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000ada0  1000ada0  00030518  2**0
                  CONTENTS
  5 .ARM          00000000  1000ada0  1000ada0  00030518  2**0
                  CONTENTS
  6 .preinit_array 00000000  1000ada0  1000ada0  00030518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000ada0  1000ada0  0002ada0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  1000ada4  1000ada4  0002ada4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000048c  10020000  1000ada8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 0000008c  1002048c  1000b234  0003048c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .bss          00000e6c  10020518  10020518  00030518  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  10021384  10021384  00030518  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030518  2**0
                  CONTENTS, READONLY
 14 .comment      00000050  00000000  00000000  00030548  2**0
                  CONTENTS, READONLY
 15 .debug_line   00038c8f  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0003e296  00000000  00000000  00069227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006dd2  00000000  00000000  000a74bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001b30  00000000  00000000  000ae290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001f9bd8  00000000  00000000  000afdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002328  00000000  00000000  002a9998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001e952  00000000  00000000  002abcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00053336  00000000  00000000  002ca612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00005468  00000000  00000000  0031d948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	10020518 	.word	0x10020518
1000001c:	00000000 	.word	0x00000000
10000020:	1000a0b8 	.word	0x1000a0b8

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	1002051c 	.word	0x1002051c
1000003c:	1000a0b8 	.word	0x1000a0b8

10000040 <strcmp>:
10000040:	f810 2b01 	ldrb.w	r2, [r0], #1
10000044:	f811 3b01 	ldrb.w	r3, [r1], #1
10000048:	2a01      	cmp	r2, #1
1000004a:	bf28      	it	cs
1000004c:	429a      	cmpcs	r2, r3
1000004e:	d0f7      	beq.n	10000040 <strcmp>
10000050:	1ad0      	subs	r0, r2, r3
10000052:	4770      	bx	lr

10000054 <strlen>:
10000054:	4603      	mov	r3, r0
10000056:	f813 2b01 	ldrb.w	r2, [r3], #1
1000005a:	2a00      	cmp	r2, #0
1000005c:	d1fb      	bne.n	10000056 <strlen+0x2>
1000005e:	1a18      	subs	r0, r3, r0
10000060:	3801      	subs	r0, #1
10000062:	4770      	bx	lr
	...

10000070 <memchr>:
10000070:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10000074:	2a10      	cmp	r2, #16
10000076:	db2b      	blt.n	100000d0 <memchr+0x60>
10000078:	f010 0f07 	tst.w	r0, #7
1000007c:	d008      	beq.n	10000090 <memchr+0x20>
1000007e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000082:	3a01      	subs	r2, #1
10000084:	428b      	cmp	r3, r1
10000086:	d02d      	beq.n	100000e4 <memchr+0x74>
10000088:	f010 0f07 	tst.w	r0, #7
1000008c:	b342      	cbz	r2, 100000e0 <memchr+0x70>
1000008e:	d1f6      	bne.n	1000007e <memchr+0xe>
10000090:	b4f0      	push	{r4, r5, r6, r7}
10000092:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000096:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000009a:	f022 0407 	bic.w	r4, r2, #7
1000009e:	f07f 0700 	mvns.w	r7, #0
100000a2:	2300      	movs	r3, #0
100000a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
100000a8:	3c08      	subs	r4, #8
100000aa:	ea85 0501 	eor.w	r5, r5, r1
100000ae:	ea86 0601 	eor.w	r6, r6, r1
100000b2:	fa85 f547 	uadd8	r5, r5, r7
100000b6:	faa3 f587 	sel	r5, r3, r7
100000ba:	fa86 f647 	uadd8	r6, r6, r7
100000be:	faa5 f687 	sel	r6, r5, r7
100000c2:	b98e      	cbnz	r6, 100000e8 <memchr+0x78>
100000c4:	d1ee      	bne.n	100000a4 <memchr+0x34>
100000c6:	bcf0      	pop	{r4, r5, r6, r7}
100000c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
100000cc:	f002 0207 	and.w	r2, r2, #7
100000d0:	b132      	cbz	r2, 100000e0 <memchr+0x70>
100000d2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000d6:	3a01      	subs	r2, #1
100000d8:	ea83 0301 	eor.w	r3, r3, r1
100000dc:	b113      	cbz	r3, 100000e4 <memchr+0x74>
100000de:	d1f8      	bne.n	100000d2 <memchr+0x62>
100000e0:	2000      	movs	r0, #0
100000e2:	4770      	bx	lr
100000e4:	3801      	subs	r0, #1
100000e6:	4770      	bx	lr
100000e8:	2d00      	cmp	r5, #0
100000ea:	bf06      	itte	eq
100000ec:	4635      	moveq	r5, r6
100000ee:	3803      	subeq	r0, #3
100000f0:	3807      	subne	r0, #7
100000f2:	f015 0f01 	tst.w	r5, #1
100000f6:	d107      	bne.n	10000108 <memchr+0x98>
100000f8:	3001      	adds	r0, #1
100000fa:	f415 7f80 	tst.w	r5, #256	; 0x100
100000fe:	bf02      	ittt	eq
10000100:	3001      	addeq	r0, #1
10000102:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
10000106:	3001      	addeq	r0, #1
10000108:	bcf0      	pop	{r4, r5, r6, r7}
1000010a:	3801      	subs	r0, #1
1000010c:	4770      	bx	lr
1000010e:	bf00      	nop

10000110 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000110:	e7fe      	b.n	10000110 <ADC1_IRQHandler>
	...

10000114 <_sbrk>:




caddr_t _sbrk(int incr)
{
10000114:	4603      	mov	r3, r0
	char *prev_heap_end;
#ifdef FreeRTOS
	char *min_stack_ptr;
#endif

	if (heap_end == 0)
10000116:	4a0b      	ldr	r2, [pc, #44]	; (10000144 <_sbrk+0x30>)
10000118:	6812      	ldr	r2, [r2, #0]
1000011a:	b142      	cbz	r2, 1000012e <_sbrk+0x1a>
		heap_end = &end;

	prev_heap_end = heap_end;
1000011c:	4a09      	ldr	r2, [pc, #36]	; (10000144 <_sbrk+0x30>)
1000011e:	6810      	ldr	r0, [r2, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
#else
	if (heap_end + incr > stack_ptr)
10000120:	4403      	add	r3, r0
10000122:	466a      	mov	r2, sp
10000124:	4293      	cmp	r3, r2
10000126:	d806      	bhi.n	10000136 <_sbrk+0x22>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
10000128:	4a06      	ldr	r2, [pc, #24]	; (10000144 <_sbrk+0x30>)
1000012a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
1000012c:	4770      	bx	lr
		heap_end = &end;
1000012e:	4a05      	ldr	r2, [pc, #20]	; (10000144 <_sbrk+0x30>)
10000130:	4905      	ldr	r1, [pc, #20]	; (10000148 <_sbrk+0x34>)
10000132:	6011      	str	r1, [r2, #0]
10000134:	e7f2      	b.n	1000011c <_sbrk+0x8>
		errno = ENOMEM;
10000136:	4b05      	ldr	r3, [pc, #20]	; (1000014c <_sbrk+0x38>)
10000138:	220c      	movs	r2, #12
1000013a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
1000013c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10000140:	4770      	bx	lr
10000142:	bf00      	nop
10000144:	10020534 	.word	0x10020534
10000148:	10021388 	.word	0x10021388
1000014c:	1002137c 	.word	0x1002137c

10000150 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
10000150:	2001      	movs	r0, #1
10000152:	4770      	bx	lr

10000154 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
10000154:	4b02      	ldr	r3, [pc, #8]	; (10000160 <_kill+0xc>)
10000156:	2216      	movs	r2, #22
10000158:	601a      	str	r2, [r3, #0]
	return -1;
}
1000015a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000015e:	4770      	bx	lr
10000160:	1002137c 	.word	0x1002137c

10000164 <_exit>:

void _exit (int status)
{
10000164:	b508      	push	{r3, lr}
	_kill(status, -1);
10000166:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1000016a:	f7ff fff3 	bl	10000154 <_kill>
	while (1) {}
1000016e:	e7fe      	b.n	1000016e <_exit+0xa>

10000170 <_write>:
}

int _write(int file, char *ptr, int len)
{
10000170:	b570      	push	{r4, r5, r6, lr}
10000172:	460c      	mov	r4, r1
10000174:	4616      	mov	r6, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
10000176:	2500      	movs	r5, #0
10000178:	e004      	b.n	10000184 <_write+0x14>
		{
		   __io_putchar( *ptr++ );
1000017a:	f814 0b01 	ldrb.w	r0, [r4], #1
1000017e:	f001 f82f 	bl	100011e0 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
10000182:	3501      	adds	r5, #1
10000184:	42b5      	cmp	r5, r6
10000186:	dbf8      	blt.n	1000017a <_write+0xa>
		}
	return len;
}
10000188:	4630      	mov	r0, r6
1000018a:	bd70      	pop	{r4, r5, r6, pc}

1000018c <_close>:

int _close(int file)
{
	return -1;
}
1000018c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10000190:	4770      	bx	lr

10000192 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10000192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
10000196:	604b      	str	r3, [r1, #4]
	return 0;
}
10000198:	2000      	movs	r0, #0
1000019a:	4770      	bx	lr

1000019c <_isatty>:

int _isatty(int file)
{
	return 1;
}
1000019c:	2001      	movs	r0, #1
1000019e:	4770      	bx	lr

100001a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
100001a0:	2000      	movs	r0, #0
100001a2:	4770      	bx	lr

100001a4 <_read>:

int _read(int file, char *ptr, int len)
{
100001a4:	b570      	push	{r4, r5, r6, lr}
100001a6:	460c      	mov	r4, r1
100001a8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
100001aa:	2500      	movs	r5, #0
100001ac:	e006      	b.n	100001bc <_read+0x18>
	{
	  *ptr++ = __io_getchar();
100001ae:	f3af 8000 	nop.w
100001b2:	4621      	mov	r1, r4
100001b4:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
100001b8:	3501      	adds	r5, #1
	  *ptr++ = __io_getchar();
100001ba:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
100001bc:	42b5      	cmp	r5, r6
100001be:	dbf6      	blt.n	100001ae <_read+0xa>
	}

   return len;
}
100001c0:	4630      	mov	r0, r6
100001c2:	bd70      	pop	{r4, r5, r6, pc}

100001c4 <CoproSync_RProcStateUpdateCb>:
  * @param  ChannelIndex Channel number
  * @param  ChannelDir Channel direction
  * @retval None
  */
__weak void CoproSync_RProcStateUpdateCb(IPCC_HandleTypeDef * hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
100001c4:	b508      	push	{r3, lr}
  RemoteProcState = (uint32_t)COPRO_SYNC_CORTEX_A_STATE;
100001c6:	4b04      	ldr	r3, [pc, #16]	; (100001d8 <CoproSync_RProcStateUpdateCb+0x14>)
100001c8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
100001cc:	4b03      	ldr	r3, [pc, #12]	; (100001dc <CoproSync_RProcStateUpdateCb+0x18>)
100001ce:	701a      	strb	r2, [r3, #0]
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
100001d0:	2201      	movs	r2, #1
100001d2:	f004 f807 	bl	100041e4 <HAL_IPCC_NotifyCPU>
}
100001d6:	bd08      	pop	{r3, pc}
100001d8:	5c00a000 	.word	0x5c00a000
100001dc:	10020538 	.word	0x10020538

100001e0 <CoproSync_Init>:
{
100001e0:	b508      	push	{r3, lr}
  if ((HAL_IPCC_ActivateNotification(&hipcc, COPRO_SYNC_SHUTDOWN_CHANNEL, IPCC_CHANNEL_DIR_RX,
100001e2:	4b09      	ldr	r3, [pc, #36]	; (10000208 <CoproSync_Init+0x28>)
100001e4:	2201      	movs	r2, #1
100001e6:	2102      	movs	r1, #2
100001e8:	4808      	ldr	r0, [pc, #32]	; (1000020c <CoproSync_Init+0x2c>)
100001ea:	f003 ffc7 	bl	1000417c <HAL_IPCC_ActivateNotification>
100001ee:	b108      	cbz	r0, 100001f4 <CoproSync_Init+0x14>
    ret = COPROSYNC_ERROR;
100001f0:	2001      	movs	r0, #1
}
100001f2:	bd08      	pop	{r3, pc}
      (HAL_IPCC_ActivateNotification(&hipcc, COPRO_SYNC_STATE_UPD_CHANNEL, IPCC_CHANNEL_DIR_RX,
100001f4:	4b06      	ldr	r3, [pc, #24]	; (10000210 <CoproSync_Init+0x30>)
100001f6:	2201      	movs	r2, #1
100001f8:	2103      	movs	r1, #3
100001fa:	4804      	ldr	r0, [pc, #16]	; (1000020c <CoproSync_Init+0x2c>)
100001fc:	f003 ffbe 	bl	1000417c <HAL_IPCC_ActivateNotification>
          CoproSync_ShutdownCb) != HAL_OK) ||
10000200:	2800      	cmp	r0, #0
10000202:	d0f6      	beq.n	100001f2 <CoproSync_Init+0x12>
    ret = COPROSYNC_ERROR;
10000204:	2001      	movs	r0, #1
10000206:	e7f4      	b.n	100001f2 <CoproSync_Init+0x12>
10000208:	10000579 	.word	0x10000579
1000020c:	10020950 	.word	0x10020950
10000210:	100001c5 	.word	0x100001c5

10000214 <Periph_Lock>:
  *                     Semaphore id deduced from this peripheral.
  *         Timeout: timeout value in msecs
  * @retval Return Status
  */
LockResource_Status_t Periph_Lock(void* Peripheral, uint32_t Timeout)
{
10000214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10000216:	4604      	mov	r4, r0
10000218:	460d      	mov	r5, r1
  uint32_t tickstart = 0U;
  LockResource_Status_t ret = LOCK_RESOURCE_STATUS_OK;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
1000021a:	f001 fc0d 	bl	10001a38 <HAL_GetTick>
1000021e:	4607      	mov	r7, r0
  LockResource_Status_t ret = LOCK_RESOURCE_STATUS_OK;
10000220:	2600      	movs	r6, #0

  /* Try to Take HSEM  assigned to the Peripheral */
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
10000222:	e00f      	b.n	10000244 <Periph_Lock+0x30>
10000224:	2001      	movs	r0, #1
10000226:	e000      	b.n	1000022a <Periph_Lock+0x16>
10000228:	2000      	movs	r0, #0
1000022a:	f003 fab3 	bl	10003794 <HAL_HSEM_FastTake>
1000022e:	2800      	cmp	r0, #0
10000230:	d050      	beq.n	100002d4 <Periph_Lock+0xc0>
  {

    if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
10000232:	b125      	cbz	r5, 1000023e <Periph_Lock+0x2a>
10000234:	f001 fc00 	bl	10001a38 <HAL_GetTick>
10000238:	1bc3      	subs	r3, r0, r7
1000023a:	42ab      	cmp	r3, r5
1000023c:	d902      	bls.n	10000244 <Periph_Lock+0x30>
    {
       ret = LOCK_RESOURCE_STATUS_TIMEOUT;
       Error_Handler();
1000023e:	f000 f9a3 	bl	10000588 <Error_Handler>
       ret = LOCK_RESOURCE_STATUS_TIMEOUT;
10000242:	2602      	movs	r6, #2
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
10000244:	4b24      	ldr	r3, [pc, #144]	; (100002d8 <Periph_Lock+0xc4>)
10000246:	429c      	cmp	r4, r3
10000248:	d0ee      	beq.n	10000228 <Periph_Lock+0x14>
1000024a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000024e:	429c      	cmp	r4, r3
10000250:	d02a      	beq.n	100002a8 <Periph_Lock+0x94>
10000252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10000256:	429c      	cmp	r4, r3
10000258:	d028      	beq.n	100002ac <Periph_Lock+0x98>
1000025a:	f1b4 2f50 	cmp.w	r4, #1342197760	; 0x50005000
1000025e:	d027      	beq.n	100002b0 <Periph_Lock+0x9c>
10000260:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
10000264:	429c      	cmp	r4, r3
10000266:	d025      	beq.n	100002b4 <Periph_Lock+0xa0>
10000268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000026c:	429c      	cmp	r4, r3
1000026e:	d023      	beq.n	100002b8 <Periph_Lock+0xa4>
10000270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10000274:	429c      	cmp	r4, r3
10000276:	d021      	beq.n	100002bc <Periph_Lock+0xa8>
10000278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000027c:	429c      	cmp	r4, r3
1000027e:	d01f      	beq.n	100002c0 <Periph_Lock+0xac>
10000280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10000284:	429c      	cmp	r4, r3
10000286:	d01d      	beq.n	100002c4 <Periph_Lock+0xb0>
10000288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000028c:	429c      	cmp	r4, r3
1000028e:	d01b      	beq.n	100002c8 <Periph_Lock+0xb4>
10000290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10000294:	429c      	cmp	r4, r3
10000296:	d019      	beq.n	100002cc <Periph_Lock+0xb8>
10000298:	4b10      	ldr	r3, [pc, #64]	; (100002dc <Periph_Lock+0xc8>)
1000029a:	429c      	cmp	r4, r3
1000029c:	d018      	beq.n	100002d0 <Periph_Lock+0xbc>
1000029e:	4b10      	ldr	r3, [pc, #64]	; (100002e0 <Periph_Lock+0xcc>)
100002a0:	429c      	cmp	r4, r3
100002a2:	d0bf      	beq.n	10000224 <Periph_Lock+0x10>
100002a4:	2020      	movs	r0, #32
100002a6:	e7c0      	b.n	1000022a <Periph_Lock+0x16>
100002a8:	2000      	movs	r0, #0
100002aa:	e7be      	b.n	1000022a <Periph_Lock+0x16>
100002ac:	2000      	movs	r0, #0
100002ae:	e7bc      	b.n	1000022a <Periph_Lock+0x16>
100002b0:	2000      	movs	r0, #0
100002b2:	e7ba      	b.n	1000022a <Periph_Lock+0x16>
100002b4:	2000      	movs	r0, #0
100002b6:	e7b8      	b.n	1000022a <Periph_Lock+0x16>
100002b8:	2000      	movs	r0, #0
100002ba:	e7b6      	b.n	1000022a <Periph_Lock+0x16>
100002bc:	2000      	movs	r0, #0
100002be:	e7b4      	b.n	1000022a <Periph_Lock+0x16>
100002c0:	2000      	movs	r0, #0
100002c2:	e7b2      	b.n	1000022a <Periph_Lock+0x16>
100002c4:	2000      	movs	r0, #0
100002c6:	e7b0      	b.n	1000022a <Periph_Lock+0x16>
100002c8:	2000      	movs	r0, #0
100002ca:	e7ae      	b.n	1000022a <Periph_Lock+0x16>
100002cc:	2000      	movs	r0, #0
100002ce:	e7ac      	b.n	1000022a <Periph_Lock+0x16>
100002d0:	2000      	movs	r0, #0
100002d2:	e7aa      	b.n	1000022a <Periph_Lock+0x16>
    }
  }

  return ret;
}
100002d4:	4630      	mov	r0, r6
100002d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100002d8:	50002000 	.word	0x50002000
100002dc:	54004000 	.word	0x54004000
100002e0:	5000d000 	.word	0x5000d000

100002e4 <Periph_Unlock>:
  * @brief  The Periph_Unlock released a previously-acquired semaphore which we want to unlock
  * @param  Peripheral: used to identify which peripheral and the related semaphore
  * @retval None
  */
void Periph_Unlock(void* Peripheral)
{
100002e4:	b508      	push	{r3, lr}
  /* Release HSEM  */
  HAL_HSEM_Release(GET_HSEM_SEM_INDEX(Peripheral), 0);
100002e6:	4b27      	ldr	r3, [pc, #156]	; (10000384 <Periph_Unlock+0xa0>)
100002e8:	4298      	cmp	r0, r3
100002ea:	d030      	beq.n	1000034e <Periph_Unlock+0x6a>
100002ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
100002f0:	4298      	cmp	r0, r3
100002f2:	d031      	beq.n	10000358 <Periph_Unlock+0x74>
100002f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
100002f8:	4298      	cmp	r0, r3
100002fa:	d02f      	beq.n	1000035c <Periph_Unlock+0x78>
100002fc:	f1b0 2f50 	cmp.w	r0, #1342197760	; 0x50005000
10000300:	d02e      	beq.n	10000360 <Periph_Unlock+0x7c>
10000302:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
10000306:	4298      	cmp	r0, r3
10000308:	d02c      	beq.n	10000364 <Periph_Unlock+0x80>
1000030a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000030e:	4298      	cmp	r0, r3
10000310:	d02a      	beq.n	10000368 <Periph_Unlock+0x84>
10000312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10000316:	4298      	cmp	r0, r3
10000318:	d028      	beq.n	1000036c <Periph_Unlock+0x88>
1000031a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000031e:	4298      	cmp	r0, r3
10000320:	d026      	beq.n	10000370 <Periph_Unlock+0x8c>
10000322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10000326:	4298      	cmp	r0, r3
10000328:	d024      	beq.n	10000374 <Periph_Unlock+0x90>
1000032a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1000032e:	4298      	cmp	r0, r3
10000330:	d022      	beq.n	10000378 <Periph_Unlock+0x94>
10000332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
10000336:	4298      	cmp	r0, r3
10000338:	d020      	beq.n	1000037c <Periph_Unlock+0x98>
1000033a:	4b13      	ldr	r3, [pc, #76]	; (10000388 <Periph_Unlock+0xa4>)
1000033c:	4298      	cmp	r0, r3
1000033e:	d01f      	beq.n	10000380 <Periph_Unlock+0x9c>
10000340:	4b12      	ldr	r3, [pc, #72]	; (1000038c <Periph_Unlock+0xa8>)
10000342:	4298      	cmp	r0, r3
10000344:	d001      	beq.n	1000034a <Periph_Unlock+0x66>
10000346:	2020      	movs	r0, #32
10000348:	e002      	b.n	10000350 <Periph_Unlock+0x6c>
1000034a:	2001      	movs	r0, #1
1000034c:	e000      	b.n	10000350 <Periph_Unlock+0x6c>
1000034e:	2000      	movs	r0, #0
10000350:	2100      	movs	r1, #0
10000352:	f003 fa2d 	bl	100037b0 <HAL_HSEM_Release>

}
10000356:	bd08      	pop	{r3, pc}
  HAL_HSEM_Release(GET_HSEM_SEM_INDEX(Peripheral), 0);
10000358:	2000      	movs	r0, #0
1000035a:	e7f9      	b.n	10000350 <Periph_Unlock+0x6c>
1000035c:	2000      	movs	r0, #0
1000035e:	e7f7      	b.n	10000350 <Periph_Unlock+0x6c>
10000360:	2000      	movs	r0, #0
10000362:	e7f5      	b.n	10000350 <Periph_Unlock+0x6c>
10000364:	2000      	movs	r0, #0
10000366:	e7f3      	b.n	10000350 <Periph_Unlock+0x6c>
10000368:	2000      	movs	r0, #0
1000036a:	e7f1      	b.n	10000350 <Periph_Unlock+0x6c>
1000036c:	2000      	movs	r0, #0
1000036e:	e7ef      	b.n	10000350 <Periph_Unlock+0x6c>
10000370:	2000      	movs	r0, #0
10000372:	e7ed      	b.n	10000350 <Periph_Unlock+0x6c>
10000374:	2000      	movs	r0, #0
10000376:	e7eb      	b.n	10000350 <Periph_Unlock+0x6c>
10000378:	2000      	movs	r0, #0
1000037a:	e7e9      	b.n	10000350 <Periph_Unlock+0x6c>
1000037c:	2000      	movs	r0, #0
1000037e:	e7e7      	b.n	10000350 <Periph_Unlock+0x6c>
10000380:	2000      	movs	r0, #0
10000382:	e7e5      	b.n	10000350 <Periph_Unlock+0x6c>
10000384:	50002000 	.word	0x50002000
10000388:	54004000 	.word	0x54004000
1000038c:	5000d000 	.word	0x5000d000

10000390 <Exti14FallingCb>:
  * @retval None
  */
static void Exti14FallingCb(void)
{
    /* Set variable to report push button event to main program */
    ubUserButtonClickEvent = SET;
10000390:	4b01      	ldr	r3, [pc, #4]	; (10000398 <Exti14FallingCb+0x8>)
10000392:	2201      	movs	r2, #1
10000394:	701a      	strb	r2, [r3, #0]
}
10000396:	4770      	bx	lr
10000398:	10020540 	.word	0x10020540

1000039c <EXTI14_IRQHandler_Config>:
{
1000039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100003a0:	b08a      	sub	sp, #40	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
100003a2:	2601      	movs	r6, #1
100003a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100003a8:	f8c3 6aa8 	str.w	r6, [r3, #2728]	; 0xaa8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
100003ac:	2400      	movs	r4, #0
100003ae:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
100003b0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = USER_BUTTON_PIN;
100003b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
100003b6:	9305      	str	r3, [sp, #20]
  PERIPH_LOCK(GPIOA);
100003b8:	4d18      	ldr	r5, [pc, #96]	; (1000041c <EXTI14_IRQHandler_Config+0x80>)
100003ba:	2164      	movs	r1, #100	; 0x64
100003bc:	4628      	mov	r0, r5
100003be:	f7ff ff29 	bl	10000214 <Periph_Lock>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100003c2:	a905      	add	r1, sp, #20
100003c4:	4628      	mov	r0, r5
100003c6:	f003 f833 	bl	10003430 <HAL_GPIO_Init>
  PERIPH_UNLOCK(GPIOA);
100003ca:	4628      	mov	r0, r5
100003cc:	f7ff ff8a 	bl	100002e4 <Periph_Unlock>
  EXTI_ConfigStructure.Line = EXTI_LINE_14;
100003d0:	4b13      	ldr	r3, [pc, #76]	; (10000420 <EXTI14_IRQHandler_Config+0x84>)
100003d2:	9301      	str	r3, [sp, #4]
  EXTI_ConfigStructure.Trigger = EXTI_TRIGGER_FALLING;
100003d4:	2702      	movs	r7, #2
100003d6:	9703      	str	r7, [sp, #12]
  EXTI_ConfigStructure.GPIOSel = EXTI_GPIOA;
100003d8:	9404      	str	r4, [sp, #16]
  EXTI_ConfigStructure.Mode = EXTI_MODE_C2_INTERRUPT;
100003da:	2321      	movs	r3, #33	; 0x21
100003dc:	9302      	str	r3, [sp, #8]
  PERIPH_LOCK(EXTI);
100003de:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1000042c <EXTI14_IRQHandler_Config+0x90>
100003e2:	2164      	movs	r1, #100	; 0x64
100003e4:	4640      	mov	r0, r8
100003e6:	f7ff ff15 	bl	10000214 <Periph_Lock>
  HAL_EXTI_SetConfigLine(&hexti14, &EXTI_ConfigStructure);
100003ea:	4d0e      	ldr	r5, [pc, #56]	; (10000424 <EXTI14_IRQHandler_Config+0x88>)
100003ec:	a901      	add	r1, sp, #4
100003ee:	4628      	mov	r0, r5
100003f0:	f002 ff10 	bl	10003214 <HAL_EXTI_SetConfigLine>
  PERIPH_UNLOCK(EXTI);
100003f4:	4640      	mov	r0, r8
100003f6:	f7ff ff75 	bl	100002e4 <Periph_Unlock>
  HAL_EXTI_RegisterCallback(&hexti14, HAL_EXTI_FALLING_CB_ID, Exti14FallingCb);
100003fa:	4a0b      	ldr	r2, [pc, #44]	; (10000428 <EXTI14_IRQHandler_Config+0x8c>)
100003fc:	4639      	mov	r1, r7
100003fe:	4628      	mov	r0, r5
10000400:	f002 ffe4 	bl	100033cc <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI14_IRQn, DEFAULT_IRQ_PRIO, 0);
10000404:	4622      	mov	r2, r4
10000406:	4631      	mov	r1, r6
10000408:	2079      	movs	r0, #121	; 0x79
1000040a:	f002 fd95 	bl	10002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI14_IRQn);
1000040e:	2079      	movs	r0, #121	; 0x79
10000410:	f002 fdca 	bl	10002fa8 <HAL_NVIC_EnableIRQ>
}
10000414:	b00a      	add	sp, #40	; 0x28
10000416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000041a:	bf00      	nop
1000041c:	50002000 	.word	0x50002000
10000420:	1600000e 	.word	0x1600000e
10000424:	10020544 	.word	0x10020544
10000428:	10000391 	.word	0x10000391
1000042c:	5000d000 	.word	0x5000d000

10000430 <VIRT_UART0_RxCpltCallback>:
{
10000430:	b510      	push	{r4, lr}
    VirtUart0ChannelRxSize = huart->RxXferSize < MAX_BUFFER_SIZE? huart->RxXferSize : MAX_BUFFER_SIZE-1;
10000432:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
10000436:	f240 13ff 	movw	r3, #511	; 0x1ff
1000043a:	429a      	cmp	r2, r3
1000043c:	bf28      	it	cs
1000043e:	461a      	movcs	r2, r3
10000440:	4c05      	ldr	r4, [pc, #20]	; (10000458 <VIRT_UART0_RxCpltCallback+0x28>)
10000442:	8222      	strh	r2, [r4, #16]
    memcpy(VirtUart0ChannelBuffRx, huart->pRxBuffPtr, VirtUart0ChannelRxSize);
10000444:	6c41      	ldr	r1, [r0, #68]	; 0x44
10000446:	f104 0014 	add.w	r0, r4, #20
1000044a:	f008 fd2f 	bl	10008eac <memcpy>
    VirtUart0RxMsg = SET;
1000044e:	2301      	movs	r3, #1
10000450:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
}
10000454:	bd10      	pop	{r4, pc}
10000456:	bf00      	nop
10000458:	10020540 	.word	0x10020540

1000045c <ParseMsg>:
Msg_t ParseMsg(uint8_t *msg){
1000045c:	b570      	push	{r4, r5, r6, lr}
1000045e:	4604      	mov	r4, r0
	if(!strncmp(trProc_ack,(char*)msg,strlen(trProc_ack))){ // A7 transmission processed ack
10000460:	4b27      	ldr	r3, [pc, #156]	; (10000500 <ParseMsg+0xa4>)
10000462:	681d      	ldr	r5, [r3, #0]
10000464:	4628      	mov	r0, r5
10000466:	f7ff fdf5 	bl	10000054 <strlen>
1000046a:	4602      	mov	r2, r0
1000046c:	4621      	mov	r1, r4
1000046e:	4628      	mov	r0, r5
10000470:	f009 f928 	bl	100096c4 <strncmp>
10000474:	2800      	cmp	r0, #0
10000476:	d03a      	beq.n	100004ee <ParseMsg+0x92>
	} else if(!strncmp(thrWait_msg,(char*)msg,strlen(thrWait_msg))){ // Wait for new thresholds
10000478:	4b21      	ldr	r3, [pc, #132]	; (10000500 <ParseMsg+0xa4>)
1000047a:	685d      	ldr	r5, [r3, #4]
1000047c:	4628      	mov	r0, r5
1000047e:	f7ff fde9 	bl	10000054 <strlen>
10000482:	4602      	mov	r2, r0
10000484:	4621      	mov	r1, r4
10000486:	4628      	mov	r0, r5
10000488:	f009 f91c 	bl	100096c4 <strncmp>
1000048c:	b388      	cbz	r0, 100004f2 <ParseMsg+0x96>
	} else if(!strncmp(waitSusp_msg,(char*)msg,strlen(waitSusp_msg))){ // Wait for A7 suspension
1000048e:	4b1c      	ldr	r3, [pc, #112]	; (10000500 <ParseMsg+0xa4>)
10000490:	689d      	ldr	r5, [r3, #8]
10000492:	4628      	mov	r0, r5
10000494:	f7ff fdde 	bl	10000054 <strlen>
10000498:	4602      	mov	r2, r0
1000049a:	4621      	mov	r1, r4
1000049c:	4628      	mov	r0, r5
1000049e:	f009 f911 	bl	100096c4 <strncmp>
100004a2:	b908      	cbnz	r0, 100004a8 <ParseMsg+0x4c>
		ret = WAIT_SUSP;
100004a4:	2003      	movs	r0, #3
100004a6:	e023      	b.n	100004f0 <ParseMsg+0x94>
		lowThr = __ADC_CALC_VOLTAGE_DATA(VDDA_APPLI, atoi(strtok((char*)msg, &delimThr)));
100004a8:	4e16      	ldr	r6, [pc, #88]	; (10000504 <ParseMsg+0xa8>)
100004aa:	4631      	mov	r1, r6
100004ac:	4620      	mov	r0, r4
100004ae:	f009 f931 	bl	10009714 <strtok>
100004b2:	f008 fcb1 	bl	10008e18 <atoi>
100004b6:	ebc0 3000 	rsb	r0, r0, r0, lsl #12
100004ba:	4d13      	ldr	r5, [pc, #76]	; (10000508 <ParseMsg+0xac>)
100004bc:	fba5 3000 	umull	r3, r0, r5, r0
100004c0:	0ac0      	lsrs	r0, r0, #11
100004c2:	4c12      	ldr	r4, [pc, #72]	; (1000050c <ParseMsg+0xb0>)
100004c4:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
		highThr = __ADC_CALC_VOLTAGE_DATA(VDDA_APPLI, atoi(strtok(NULL, &delimThr)));
100004c8:	4631      	mov	r1, r6
100004ca:	2000      	movs	r0, #0
100004cc:	f009 f922 	bl	10009714 <strtok>
100004d0:	f008 fca2 	bl	10008e18 <atoi>
100004d4:	ebc0 3000 	rsb	r0, r0, r0, lsl #12
100004d8:	fba5 3000 	umull	r3, r0, r5, r0
100004dc:	0ac0      	lsrs	r0, r0, #11
100004de:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
		ret = (!lowThr && !highThr)? ERR:THR;
100004e2:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
100004e6:	b933      	cbnz	r3, 100004f6 <ParseMsg+0x9a>
100004e8:	b138      	cbz	r0, 100004fa <ParseMsg+0x9e>
100004ea:	2000      	movs	r0, #0
100004ec:	e000      	b.n	100004f0 <ParseMsg+0x94>
		ret = DATA_ACK;
100004ee:	2001      	movs	r0, #1
}
100004f0:	bd70      	pop	{r4, r5, r6, pc}
		ret = WAIT_THR;
100004f2:	2002      	movs	r0, #2
100004f4:	e7fc      	b.n	100004f0 <ParseMsg+0x94>
		ret = (!lowThr && !highThr)? ERR:THR;
100004f6:	2000      	movs	r0, #0
100004f8:	e7fa      	b.n	100004f0 <ParseMsg+0x94>
100004fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100004fe:	e7f7      	b.n	100004f0 <ParseMsg+0x94>
10000500:	10020000 	.word	0x10020000
10000504:	1000a120 	.word	0x1000a120
10000508:	b4c9f9a5 	.word	0xb4c9f9a5
1000050c:	10020540 	.word	0x10020540

10000510 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
10000510:	b510      	push	{r4, lr}
	/* Retrieve converted ADC value */
	/* Check for FULL buffer to avoid overwriting existing data (data have not been transmitted yet)
	* Some out of window data can be lost if the buffer is not emptied */
	if(OutOfWindowData != MAX_ADC_BUFFER_SIZE){
10000512:	4b16      	ldr	r3, [pc, #88]	; (1000056c <HAL_ADC_LevelOutOfWindowCallback+0x5c>)
10000514:	f8b3 3380 	ldrh.w	r3, [r3, #896]	; 0x380
10000518:	b29b      	uxth	r3, r3
1000051a:	2b08      	cmp	r3, #8
1000051c:	d022      	beq.n	10000564 <HAL_ADC_LevelOutOfWindowCallback+0x54>
	  ADCxData = HAL_ADC_GetValue(&hadc2);
1000051e:	4c13      	ldr	r4, [pc, #76]	; (1000056c <HAL_ADC_LevelOutOfWindowCallback+0x5c>)
10000520:	f504 7061 	add.w	r0, r4, #900	; 0x384
10000524:	f001 fad8 	bl	10001ad8 <HAL_ADC_GetValue>
10000528:	f8c4 03e8 	str.w	r0, [r4, #1000]	; 0x3e8
	  // The values are converted in mV before being recorded
	  ADCxDataBuffer[OutOfWindowData] = __ADC_CALC_DATA_VOLTAGE(VDDA_APPLI, ADCxData);
1000052c:	f8d4 23e8 	ldr.w	r2, [r4, #1000]	; 0x3e8
10000530:	f640 3354 	movw	r3, #2900	; 0xb54
10000534:	fb03 f202 	mul.w	r2, r3, r2
10000538:	f8b4 1380 	ldrh.w	r1, [r4, #896]	; 0x380
1000053c:	b289      	uxth	r1, r1
1000053e:	4b0c      	ldr	r3, [pc, #48]	; (10000570 <HAL_ADC_LevelOutOfWindowCallback+0x60>)
10000540:	fba3 0302 	umull	r0, r3, r3, r2
10000544:	1ad2      	subs	r2, r2, r3
10000546:	eb03 0352 	add.w	r3, r3, r2, lsr #1
1000054a:	0adb      	lsrs	r3, r3, #11
1000054c:	eb04 0281 	add.w	r2, r4, r1, lsl #2
10000550:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
	  //log_dbg("ADC conversion result: %d\n", (int) ADCxData);
	  OutOfWindowData++;
10000554:	f8b4 3380 	ldrh.w	r3, [r4, #896]	; 0x380
10000558:	b29b      	uxth	r3, r3
1000055a:	3301      	adds	r3, #1
1000055c:	b29b      	uxth	r3, r3
1000055e:	f8a4 3380 	strh.w	r3, [r4, #896]	; 0x380
	   * is reached */
	  HAL_ADC_Stop(&hadc2);
	}
	/* The above operations need to be done in the ISR.
	 * The value conversion could be done before transferring the data but it is a simple computation */
}
10000562:	bd10      	pop	{r4, pc}
	  HAL_ADC_Stop(&hadc2);
10000564:	4803      	ldr	r0, [pc, #12]	; (10000574 <HAL_ADC_LevelOutOfWindowCallback+0x64>)
10000566:	f002 faeb 	bl	10002b40 <HAL_ADC_Stop>
}
1000056a:	e7fa      	b.n	10000562 <HAL_ADC_LevelOutOfWindowCallback+0x52>
1000056c:	10020540 	.word	0x10020540
10000570:	00100101 	.word	0x00100101
10000574:	100208c4 	.word	0x100208c4

10000578 <CoproSync_ShutdownCb>:

void CoproSync_ShutdownCb(IPCC_HandleTypeDef * hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
  Shutdown_Req = 1;
10000578:	4b02      	ldr	r3, [pc, #8]	; (10000584 <CoproSync_ShutdownCb+0xc>)
1000057a:	2201      	movs	r2, #1
1000057c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
}
10000580:	4770      	bx	lr
10000582:	bf00      	nop
10000584:	10020540 	.word	0x10020540

10000588 <Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void Error_Handler(void)
{
10000588:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  log_err("FATAL ERROR\r\n");
1000058a:	f001 fa55 	bl	10001a38 <HAL_GetTick>
1000058e:	4604      	mov	r4, r0
10000590:	f001 fa52 	bl	10001a38 <HAL_GetTick>
10000594:	4908      	ldr	r1, [pc, #32]	; (100005b8 <Error_Handler+0x30>)
10000596:	fba1 2300 	umull	r2, r3, r1, r0
1000059a:	099b      	lsrs	r3, r3, #6
1000059c:	fba1 2104 	umull	r2, r1, r1, r4
100005a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
100005a4:	fb02 0213 	mls	r2, r2, r3, r0
100005a8:	0989      	lsrs	r1, r1, #6
100005aa:	4804      	ldr	r0, [pc, #16]	; (100005bc <Error_Handler+0x34>)
100005ac:	f009 f862 	bl	10009674 <iprintf>
  BSP_LED_On(LED7);
100005b0:	2002      	movs	r0, #2
100005b2:	f000 fecf 	bl	10001354 <BSP_LED_On>
  while(1);
100005b6:	e7fe      	b.n	100005b6 <Error_Handler+0x2e>
100005b8:	10624dd3 	.word	0x10624dd3
100005bc:	1000a2cc 	.word	0x1000a2cc

100005c0 <MX_IPCC_Init>:
{
100005c0:	b508      	push	{r3, lr}
  hipcc.Instance = IPCC;
100005c2:	4806      	ldr	r0, [pc, #24]	; (100005dc <MX_IPCC_Init+0x1c>)
100005c4:	4b06      	ldr	r3, [pc, #24]	; (100005e0 <MX_IPCC_Init+0x20>)
100005c6:	f8c0 3410 	str.w	r3, [r0, #1040]	; 0x410
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
100005ca:	f500 6082 	add.w	r0, r0, #1040	; 0x410
100005ce:	f003 fe49 	bl	10004264 <HAL_IPCC_Init>
100005d2:	b900      	cbnz	r0, 100005d6 <MX_IPCC_Init+0x16>
}
100005d4:	bd08      	pop	{r3, pc}
     Error_Handler();
100005d6:	f7ff ffd7 	bl	10000588 <Error_Handler>
100005da:	bf00      	nop
100005dc:	10020540 	.word	0x10020540
100005e0:	4c001000 	.word	0x4c001000

100005e4 <MX_DAC1_Init>:
{
100005e4:	b500      	push	{lr}
100005e6:	b08b      	sub	sp, #44	; 0x2c
  hdac1.Instance = DAC1;
100005e8:	480e      	ldr	r0, [pc, #56]	; (10000624 <MX_DAC1_Init+0x40>)
100005ea:	4b0f      	ldr	r3, [pc, #60]	; (10000628 <MX_DAC1_Init+0x44>)
100005ec:	f8c0 344c 	str.w	r3, [r0, #1100]	; 0x44c
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
100005f0:	f200 404c 	addw	r0, r0, #1100	; 0x44c
100005f4:	f002 fd0c 	bl	10003010 <HAL_DAC_Init>
100005f8:	b980      	cbnz	r0, 1000061c <MX_DAC1_Init+0x38>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
100005fa:	2200      	movs	r2, #0
100005fc:	9200      	str	r2, [sp, #0]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
100005fe:	9201      	str	r2, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
10000600:	9202      	str	r2, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
10000602:	2302      	movs	r3, #2
10000604:	9303      	str	r3, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE; /* ENABLE/DISABLE connection to on-chip peripherals*/
10000606:	2301      	movs	r3, #1
10000608:	9304      	str	r3, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
1000060a:	9205      	str	r2, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
1000060c:	4669      	mov	r1, sp
1000060e:	4807      	ldr	r0, [pc, #28]	; (1000062c <MX_DAC1_Init+0x48>)
10000610:	f002 fd5e 	bl	100030d0 <HAL_DAC_ConfigChannel>
10000614:	b920      	cbnz	r0, 10000620 <MX_DAC1_Init+0x3c>
}
10000616:	b00b      	add	sp, #44	; 0x2c
10000618:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
1000061c:	f7ff ffb4 	bl	10000588 <Error_Handler>
    Error_Handler();
10000620:	f7ff ffb2 	bl	10000588 <Error_Handler>
10000624:	10020540 	.word	0x10020540
10000628:	40017000 	.word	0x40017000
1000062c:	1002098c 	.word	0x1002098c

10000630 <Generate_waveform_SW_update_Config>:
{
10000630:	b508      	push	{r3, lr}
  if (HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DIGITAL_SCALE_12BITS/2) != HAL_OK)
10000632:	f240 73ff 	movw	r3, #2047	; 0x7ff
10000636:	2200      	movs	r2, #0
10000638:	4611      	mov	r1, r2
1000063a:	4807      	ldr	r0, [pc, #28]	; (10000658 <Generate_waveform_SW_update_Config+0x28>)
1000063c:	f002 fd29 	bl	10003092 <HAL_DAC_SetValue>
10000640:	b928      	cbnz	r0, 1000064e <Generate_waveform_SW_update_Config+0x1e>
  if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK)
10000642:	2100      	movs	r1, #0
10000644:	4804      	ldr	r0, [pc, #16]	; (10000658 <Generate_waveform_SW_update_Config+0x28>)
10000646:	f002 fcf5 	bl	10003034 <HAL_DAC_Start>
1000064a:	b910      	cbnz	r0, 10000652 <Generate_waveform_SW_update_Config+0x22>
}
1000064c:	bd08      	pop	{r3, pc}
    Error_Handler();
1000064e:	f7ff ff9b 	bl	10000588 <Error_Handler>
    Error_Handler();
10000652:	f7ff ff99 	bl	10000588 <Error_Handler>
10000656:	bf00      	nop
10000658:	1002098c 	.word	0x1002098c

1000065c <Generate_waveform_SW_update>:
{
1000065c:	b508      	push	{r3, lr}
                       ((DIGITAL_SCALE_12BITS * ub_dac_steps_count) / 4)
1000065e:	4810      	ldr	r0, [pc, #64]	; (100006a0 <Generate_waveform_SW_update+0x44>)
10000660:	f890 3460 	ldrb.w	r3, [r0, #1120]	; 0x460
10000664:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
  if (HAL_DAC_SetValue(&hdac1,
10000668:	089b      	lsrs	r3, r3, #2
1000066a:	2200      	movs	r2, #0
1000066c:	4611      	mov	r1, r2
1000066e:	f200 404c 	addw	r0, r0, #1100	; 0x44c
10000672:	f002 fd0e 	bl	10003092 <HAL_DAC_SetValue>
10000676:	b960      	cbnz	r0, 10000692 <Generate_waveform_SW_update+0x36>
  HAL_Delay(1);
10000678:	2001      	movs	r0, #1
1000067a:	f001 f9e3 	bl	10001a44 <HAL_Delay>
  if (ub_dac_steps_count < 4)
1000067e:	4b08      	ldr	r3, [pc, #32]	; (100006a0 <Generate_waveform_SW_update+0x44>)
10000680:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
10000684:	2b03      	cmp	r3, #3
10000686:	d806      	bhi.n	10000696 <Generate_waveform_SW_update+0x3a>
    ub_dac_steps_count++;
10000688:	3301      	adds	r3, #1
1000068a:	4a05      	ldr	r2, [pc, #20]	; (100006a0 <Generate_waveform_SW_update+0x44>)
1000068c:	f882 3460 	strb.w	r3, [r2, #1120]	; 0x460
}
10000690:	bd08      	pop	{r3, pc}
    Error_Handler();
10000692:	f7ff ff79 	bl	10000588 <Error_Handler>
    ub_dac_steps_count = 0;
10000696:	4b02      	ldr	r3, [pc, #8]	; (100006a0 <Generate_waveform_SW_update+0x44>)
10000698:	2200      	movs	r2, #0
1000069a:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
}
1000069e:	e7f7      	b.n	10000690 <Generate_waveform_SW_update+0x34>
100006a0:	10020540 	.word	0x10020540

100006a4 <SystemClock_Config>:
{
100006a4:	b530      	push	{r4, r5, lr}
100006a6:	b0d3      	sub	sp, #332	; 0x14c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100006a8:	f44f 728a 	mov.w	r2, #276	; 0x114
100006ac:	2100      	movs	r1, #0
100006ae:	a80d      	add	r0, sp, #52	; 0x34
100006b0:	f008 fc0a 	bl	10008ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100006b4:	2230      	movs	r2, #48	; 0x30
100006b6:	2100      	movs	r1, #0
100006b8:	a801      	add	r0, sp, #4
100006ba:	f008 fc05 	bl	10008ec8 <memset>
  HAL_PWR_EnableBkUpAccess();
100006be:	f003 fdf1 	bl	100042a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
100006c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100006c6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
100006ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
100006ce:	f043 0320 	orr.w	r3, r3, #32
100006d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
100006d6:	2307      	movs	r3, #7
100006d8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
100006da:	f44f 63b0 	mov.w	r3, #1408	; 0x580
100006de:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
100006e0:	2301      	movs	r3, #1
100006e2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
100006e4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
100006e6:	2210      	movs	r2, #16
100006e8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
100006ea:	2400      	movs	r4, #0
100006ec:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
100006ee:	2202      	movs	r2, #2
100006f0:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL12SOURCE_HSE;
100006f2:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
100006f4:	2503      	movs	r5, #3
100006f6:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLN = 81;
100006f8:	2151      	movs	r1, #81	; 0x51
100006fa:	9119      	str	r1, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLP = 1;
100006fc:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 1;
100006fe:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLR = 1;
10000700:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACV = 0x800;
10000702:	f44f 6100 	mov.w	r1, #2048	; 0x800
10000706:	911e      	str	r1, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLMODE = RCC_PLL_FRACTIONAL;
10000708:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
1000070a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
1000070e:	9021      	str	r0, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
10000710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
10000714:	9122      	str	r1, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
10000716:	9225      	str	r2, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
10000718:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL2.PLLM = 3;
1000071a:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_OscInitStruct.PLL2.PLLN = 66;
1000071c:	2542      	movs	r5, #66	; 0x42
1000071e:	9528      	str	r5, [sp, #160]	; 0xa0
  RCC_OscInitStruct.PLL2.PLLP = 2;
10000720:	9229      	str	r2, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL2.PLLQ = 1;
10000722:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000724:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10000726:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
1000072a:	952d      	str	r5, [sp, #180]	; 0xb4
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
1000072c:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL2.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
1000072e:	9030      	str	r0, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL2.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
10000730:	9131      	str	r1, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000732:	9234      	str	r2, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
10000734:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000736:	9236      	str	r2, [sp, #216]	; 0xd8
  RCC_OscInitStruct.PLL3.PLLN = 34;
10000738:	2522      	movs	r5, #34	; 0x22
1000073a:	9537      	str	r5, [sp, #220]	; 0xdc
  RCC_OscInitStruct.PLL3.PLLP = 2;
1000073c:	9238      	str	r2, [sp, #224]	; 0xe0
  RCC_OscInitStruct.PLL3.PLLQ = 17;
1000073e:	2511      	movs	r5, #17
10000740:	9539      	str	r5, [sp, #228]	; 0xe4
  RCC_OscInitStruct.PLL3.PLLR = 37;
10000742:	2525      	movs	r5, #37	; 0x25
10000744:	953a      	str	r5, [sp, #232]	; 0xe8
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000746:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
1000074a:	953b      	str	r5, [sp, #236]	; 0xec
  RCC_OscInitStruct.PLL3.PLLFRACV = 0x1A04;
1000074c:	f641 2504 	movw	r5, #6660	; 0x1a04
10000750:	953c      	str	r5, [sp, #240]	; 0xf0
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000752:	933d      	str	r3, [sp, #244]	; 0xf4
  RCC_OscInitStruct.PLL3.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
10000754:	903f      	str	r0, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL3.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
10000756:	9140      	str	r1, [sp, #256]	; 0x100
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
10000758:	9243      	str	r2, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLL4SOURCE_HSE;
1000075a:	9344      	str	r3, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL4.PLLM = 4;
1000075c:	2304      	movs	r3, #4
1000075e:	9345      	str	r3, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL4.PLLN = 99;
10000760:	2363      	movs	r3, #99	; 0x63
10000762:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL4.PLLP = 6;
10000764:	2306      	movs	r3, #6
10000766:	9347      	str	r3, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL4.PLLQ = 8;
10000768:	2308      	movs	r3, #8
1000076a:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL4.PLLR = 8;
1000076c:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL4.PLLRGE = RCC_PLL4IFRANGE_0;
1000076e:	944a      	str	r4, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL4.PLLFRACV = 0;
10000770:	944b      	str	r4, [sp, #300]	; 0x12c
  RCC_OscInitStruct.PLL4.PLLMODE = RCC_PLL_INTEGER;
10000772:	944c      	str	r4, [sp, #304]	; 0x130
  RCC_OscInitStruct.PLL4.RPDFN_DIS = RCC_RPDFN_DIS_DISABLED;
10000774:	904e      	str	r0, [sp, #312]	; 0x138
  RCC_OscInitStruct.PLL4.TPDFN_DIS = RCC_TPDFN_DIS_DISABLED;
10000776:	914f      	str	r1, [sp, #316]	; 0x13c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000778:	a80d      	add	r0, sp, #52	; 0x34
1000077a:	f004 faeb 	bl	10004d54 <HAL_RCC_OscConfig>
1000077e:	b9f0      	cbnz	r0, 100007be <SystemClock_Config+0x11a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000780:	23ff      	movs	r3, #255	; 0xff
10000782:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.MPUInit.MPU_Clock = RCC_MPUSOURCE_PLL1;
10000784:	2202      	movs	r2, #2
10000786:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.MPUInit.MPU_Div = RCC_MPU_DIV2;
10000788:	2301      	movs	r3, #1
1000078a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
1000078c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
1000078e:	2100      	movs	r1, #0
10000790:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000792:	2003      	movs	r0, #3
10000794:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000796:	9107      	str	r1, [sp, #28]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
10000798:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
1000079a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
1000079c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
1000079e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
100007a0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
100007a2:	a801      	add	r0, sp, #4
100007a4:	f004 fdda 	bl	1000535c <HAL_RCC_ClockConfig>
100007a8:	b958      	cbnz	r0, 100007c2 <SystemClock_Config+0x11e>
  __HAL_RCC_RTC_HSEDIV(24);
100007aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100007ae:	6c53      	ldr	r3, [r2, #68]	; 0x44
100007b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
100007b4:	f043 0317 	orr.w	r3, r3, #23
100007b8:	6453      	str	r3, [r2, #68]	; 0x44
}
100007ba:	b053      	add	sp, #332	; 0x14c
100007bc:	bd30      	pop	{r4, r5, pc}
	Error_Handler();
100007be:	f7ff fee3 	bl	10000588 <Error_Handler>
	Error_Handler();
100007c2:	f7ff fee1 	bl	10000588 <Error_Handler>
	...

100007c8 <main>:
{
100007c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
100007cc:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
100007ce:	f001 f911 	bl	100019f4 <HAL_Init>
  if(IS_ENGINEERING_BOOT_MODE())
100007d2:	4bca      	ldr	r3, [pc, #808]	; (10000afc <main+0x334>)
100007d4:	681b      	ldr	r3, [r3, #0]
100007d6:	f003 0307 	and.w	r3, r3, #7
100007da:	2b04      	cmp	r3, #4
100007dc:	d050      	beq.n	10000880 <main+0xb8>
  log_info("Cortex-M4 boot successful with STM32Cube FW version: v%ld.%ld.%ld \r\n",
100007de:	f001 f92b 	bl	10001a38 <HAL_GetTick>
100007e2:	4604      	mov	r4, r0
100007e4:	f001 f928 	bl	10001a38 <HAL_GetTick>
100007e8:	4680      	mov	r8, r0
100007ea:	f001 f94d 	bl	10001a88 <HAL_GetHalVersion>
100007ee:	ea4f 6910 	mov.w	r9, r0, lsr #24
100007f2:	f001 f949 	bl	10001a88 <HAL_GetHalVersion>
100007f6:	0c07      	lsrs	r7, r0, #16
100007f8:	f001 f946 	bl	10001a88 <HAL_GetHalVersion>
100007fc:	4dc0      	ldr	r5, [pc, #768]	; (10000b00 <main+0x338>)
100007fe:	fba5 3208 	umull	r3, r2, r5, r8
10000802:	0992      	lsrs	r2, r2, #6
10000804:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
10000808:	fba5 3104 	umull	r3, r1, r5, r4
1000080c:	f3c0 2007 	ubfx	r0, r0, #8, #8
10000810:	9001      	str	r0, [sp, #4]
10000812:	b2ff      	uxtb	r7, r7
10000814:	9700      	str	r7, [sp, #0]
10000816:	464b      	mov	r3, r9
10000818:	fb06 8212 	mls	r2, r6, r2, r8
1000081c:	0989      	lsrs	r1, r1, #6
1000081e:	48b9      	ldr	r0, [pc, #740]	; (10000b04 <main+0x33c>)
10000820:	f008 ff28 	bl	10009674 <iprintf>
   MX_IPCC_Init();
10000824:	f7ff fecc 	bl	100005c0 <MX_IPCC_Init>
  MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
10000828:	2100      	movs	r1, #0
1000082a:	2001      	movs	r0, #1
1000082c:	f000 fc30 	bl	10001090 <MX_OPENAMP_Init>
  CoproSync_Init();
10000830:	f7ff fcd6 	bl	100001e0 <CoproSync_Init>
  MX_DAC1_Init();
10000834:	f7ff fed6 	bl	100005e4 <MX_DAC1_Init>
  log_info("Virtual UART0 OpenAMP-rpmsg channel creation\r\n");
10000838:	f001 f8fe 	bl	10001a38 <HAL_GetTick>
1000083c:	4604      	mov	r4, r0
1000083e:	f001 f8fb 	bl	10001a38 <HAL_GetTick>
10000842:	fba5 3200 	umull	r3, r2, r5, r0
10000846:	0992      	lsrs	r2, r2, #6
10000848:	fba5 3104 	umull	r3, r1, r5, r4
1000084c:	fb06 0212 	mls	r2, r6, r2, r0
10000850:	0989      	lsrs	r1, r1, #6
10000852:	48ad      	ldr	r0, [pc, #692]	; (10000b08 <main+0x340>)
10000854:	f008 ff0e 	bl	10009674 <iprintf>
  if (VIRT_UART_Init(&huart0) != VIRT_UART_OK) {
10000858:	48ac      	ldr	r0, [pc, #688]	; (10000b0c <main+0x344>)
1000085a:	f008 fa85 	bl	10008d68 <VIRT_UART_Init>
1000085e:	b308      	cbz	r0, 100008a4 <main+0xdc>
    log_err("VIRT_UART_Init UART0 failed.\r\n");
10000860:	f001 f8ea 	bl	10001a38 <HAL_GetTick>
10000864:	4604      	mov	r4, r0
10000866:	f001 f8e7 	bl	10001a38 <HAL_GetTick>
1000086a:	fbb0 f2f6 	udiv	r2, r0, r6
1000086e:	fb06 0212 	mls	r2, r6, r2, r0
10000872:	fbb4 f1f6 	udiv	r1, r4, r6
10000876:	48a6      	ldr	r0, [pc, #664]	; (10000b10 <main+0x348>)
10000878:	f008 fefc 	bl	10009674 <iprintf>
    Error_Handler();
1000087c:	f7ff fe84 	bl	10000588 <Error_Handler>
    SystemClock_Config();
10000880:	f7ff ff10 	bl	100006a4 <SystemClock_Config>
    BSP_PMIC_Init();
10000884:	f000 ffd4 	bl	10001830 <BSP_PMIC_Init>
    BSP_PMIC_InitRegulators();
10000888:	f000 fff6 	bl	10001878 <BSP_PMIC_InitRegulators>
    __HAL_RCC_VREF_CLK_ENABLE();
1000088c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
10000894:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
    HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
10000898:	2000      	movs	r0, #0
1000089a:	f001 f8f9 	bl	10001a90 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
    HAL_SYSCFG_EnableVREFBUF();
1000089e:	f001 f901 	bl	10001aa4 <HAL_SYSCFG_EnableVREFBUF>
100008a2:	e79c      	b.n	100007de <main+0x16>
  if(VIRT_UART_RegisterCallback(&huart0, VIRT_UART_RXCPLT_CB_ID, VIRT_UART0_RxCpltCallback) != VIRT_UART_OK)
100008a4:	4a9b      	ldr	r2, [pc, #620]	; (10000b14 <main+0x34c>)
100008a6:	2100      	movs	r1, #0
100008a8:	4898      	ldr	r0, [pc, #608]	; (10000b0c <main+0x344>)
100008aa:	f008 fa78 	bl	10008d9e <VIRT_UART_RegisterCallback>
100008ae:	b108      	cbz	r0, 100008b4 <main+0xec>
   Error_Handler();
100008b0:	f7ff fe6a 	bl	10000588 <Error_Handler>
  log_info("Waiting for ADC monitored window thresholds\n");
100008b4:	f001 f8c0 	bl	10001a38 <HAL_GetTick>
100008b8:	4605      	mov	r5, r0
100008ba:	f001 f8bd 	bl	10001a38 <HAL_GetTick>
100008be:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
100008c2:	fbb0 f2f4 	udiv	r2, r0, r4
100008c6:	fb04 0212 	mls	r2, r4, r2, r0
100008ca:	fbb5 f1f4 	udiv	r1, r5, r4
100008ce:	4892      	ldr	r0, [pc, #584]	; (10000b18 <main+0x350>)
100008d0:	f008 fed0 	bl	10009674 <iprintf>
  log_info("Format: <low_thr>;<high_thr> (unit: mVolts)\n");
100008d4:	f001 f8b0 	bl	10001a38 <HAL_GetTick>
100008d8:	4605      	mov	r5, r0
100008da:	f001 f8ad 	bl	10001a38 <HAL_GetTick>
100008de:	fbb0 f2f4 	udiv	r2, r0, r4
100008e2:	fb04 0212 	mls	r2, r4, r2, r0
100008e6:	fbb5 f1f4 	udiv	r1, r5, r4
100008ea:	488c      	ldr	r0, [pc, #560]	; (10000b1c <main+0x354>)
100008ec:	f008 fec2 	bl	10009674 <iprintf>
  log_info("ADC resolution: 12 bits\n");
100008f0:	f001 f8a2 	bl	10001a38 <HAL_GetTick>
100008f4:	4605      	mov	r5, r0
100008f6:	f001 f89f 	bl	10001a38 <HAL_GetTick>
100008fa:	fbb0 f2f4 	udiv	r2, r0, r4
100008fe:	fb04 0212 	mls	r2, r4, r2, r0
10000902:	fbb5 f1f4 	udiv	r1, r5, r4
10000906:	4886      	ldr	r0, [pc, #536]	; (10000b20 <main+0x358>)
10000908:	f008 feb4 	bl	10009674 <iprintf>
  log_info("ADC reference voltage: %lu\n",VDDA_APPLI);
1000090c:	f001 f894 	bl	10001a38 <HAL_GetTick>
10000910:	4605      	mov	r5, r0
10000912:	f001 f891 	bl	10001a38 <HAL_GetTick>
10000916:	fbb0 f2f4 	udiv	r2, r0, r4
1000091a:	f640 3354 	movw	r3, #2900	; 0xb54
1000091e:	fb04 0212 	mls	r2, r4, r2, r0
10000922:	fbb5 f1f4 	udiv	r1, r5, r4
10000926:	487f      	ldr	r0, [pc, #508]	; (10000b24 <main+0x35c>)
10000928:	f008 fea4 	bl	10009674 <iprintf>
  OPENAMP_Wait_EndPointready(&huart0.ept);
1000092c:	4c7e      	ldr	r4, [pc, #504]	; (10000b28 <main+0x360>)
1000092e:	f204 4064 	addw	r0, r4, #1124	; 0x464
10000932:	f000 fc2b 	bl	1000118c <OPENAMP_Wait_EndPointready>
  VirtUart0RxMsg = RESET;
10000936:	2300      	movs	r3, #0
10000938:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
  if(ParseMsg(VirtUart0ChannelBuffRx) != THR){Error_Handler();}
1000093c:	f104 0014 	add.w	r0, r4, #20
10000940:	f7ff fd8c 	bl	1000045c <ParseMsg>
10000944:	b108      	cbz	r0, 1000094a <main+0x182>
10000946:	f7ff fe1f 	bl	10000588 <Error_Handler>
  BSP_LED_Init(LED7);
1000094a:	2002      	movs	r0, #2
1000094c:	f000 fd46 	bl	100013dc <BSP_LED_Init>
  BSP_LED_Init(LED5);
10000950:	2001      	movs	r0, #1
10000952:	f000 fd43 	bl	100013dc <BSP_LED_Init>
  EXTI14_IRQHandler_Config();
10000956:	f7ff fd21 	bl	1000039c <EXTI14_IRQHandler_Config>
  EXTI_ConfigStructure.Line = EXTI_LINE_62;
1000095a:	4b74      	ldr	r3, [pc, #464]	; (10000b2c <main+0x364>)
1000095c:	930c      	str	r3, [sp, #48]	; 0x30
  EXTI_ConfigStructure.Mode = EXTI_MODE_C2_INTERRUPT;
1000095e:	2321      	movs	r3, #33	; 0x21
10000960:	930d      	str	r3, [sp, #52]	; 0x34
  PERIPH_LOCK(EXTI);
10000962:	4c73      	ldr	r4, [pc, #460]	; (10000b30 <main+0x368>)
10000964:	2164      	movs	r1, #100	; 0x64
10000966:	4620      	mov	r0, r4
10000968:	f7ff fc54 	bl	10000214 <Periph_Lock>
  HAL_EXTI_SetConfigLine(&hexti62, &EXTI_ConfigStructure);
1000096c:	a90c      	add	r1, sp, #48	; 0x30
1000096e:	a809      	add	r0, sp, #36	; 0x24
10000970:	f002 fc50 	bl	10003214 <HAL_EXTI_SetConfigLine>
  PERIPH_UNLOCK(EXTI);
10000974:	4620      	mov	r0, r4
10000976:	f7ff fcb5 	bl	100002e4 <Periph_Unlock>
  ADC_ChannelConfTypeDef sConfig = {0};
1000097a:	2300      	movs	r3, #0
1000097c:	9302      	str	r3, [sp, #8]
1000097e:	9303      	str	r3, [sp, #12]
10000980:	9304      	str	r3, [sp, #16]
10000982:	9305      	str	r3, [sp, #20]
10000984:	9306      	str	r3, [sp, #24]
10000986:	9307      	str	r3, [sp, #28]
10000988:	9308      	str	r3, [sp, #32]
  hadc2.Instance = ADCx;
1000098a:	4c67      	ldr	r4, [pc, #412]	; (10000b28 <main+0x360>)
1000098c:	4a69      	ldr	r2, [pc, #420]	; (10000b34 <main+0x36c>)
1000098e:	f8c4 2384 	str.w	r2, [r4, #900]	; 0x384
  hadc2.Init.ClockPrescaler        	= ADC_CLOCK_SYNC_PCLK_DIV2;
10000992:	f44f 3200 	mov.w	r2, #131072	; 0x20000
10000996:	f8c4 2388 	str.w	r2, [r4, #904]	; 0x388
  hadc2.Init.Resolution            	= ADC_RESOLUTION_12B;
1000099a:	2208      	movs	r2, #8
1000099c:	f8c4 238c 	str.w	r2, [r4, #908]	; 0x38c
  hadc2.Init.ScanConvMode          	= ADC_SCAN_DISABLE;             /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
100009a0:	f8c4 3390 	str.w	r3, [r4, #912]	; 0x390
  hadc2.Init.EOCSelection          	= ADC_EOC_SINGLE_CONV;
100009a4:	2204      	movs	r2, #4
100009a6:	f8c4 2394 	str.w	r2, [r4, #916]	; 0x394
  hadc2.Init.LowPowerAutoWait      	= DISABLE;
100009aa:	f884 3398 	strb.w	r3, [r4, #920]	; 0x398
  hadc2.Init.ContinuousConvMode    	= ENABLE;                      	/* Continuous mode should be disabled to have only 1 conversion at each conversion trig */
100009ae:	2201      	movs	r2, #1
100009b0:	f884 2399 	strb.w	r2, [r4, #921]	; 0x399
  hadc2.Init.NbrOfConversion       	= 1;                            /* Parameter discarded because sequencer is disabled */
100009b4:	f8c4 239c 	str.w	r2, [r4, #924]	; 0x39c
  hadc2.Init.DiscontinuousConvMode 	= DISABLE;                      /* Parameter discarded because sequencer is disabled */
100009b8:	f884 33a0 	strb.w	r3, [r4, #928]	; 0x3a0
  hadc2.Init.NbrOfDiscConversion   	= 1;                            /* Parameter discarded because sequencer is disabled */
100009bc:	f8c4 23a4 	str.w	r2, [r4, #932]	; 0x3a4
  hadc2.Init.ExternalTrigConv		= ADC_SOFTWARE_START;     		/* Trig of conversion start done by software */
100009c0:	f8c4 33a8 	str.w	r3, [r4, #936]	; 0x3a8
  hadc2.Init.ExternalTrigConvEdge  	= ADC_EXTERNALTRIGCONVEDGE_NONE;
100009c4:	f8c4 33ac 	str.w	r3, [r4, #940]	; 0x3ac
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
100009c8:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  hadc2.Init.Overrun               	= ADC_OVR_DATA_OVERWRITTEN;
100009cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
100009d0:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
  hadc2.Init.OversamplingMode      	= DISABLE;
100009d4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  HAL_ADC_DeInit(&hadc2);
100009d8:	f504 7461 	add.w	r4, r4, #900	; 0x384
100009dc:	4620      	mov	r0, r4
100009de:	f001 ffcd 	bl	1000297c <HAL_ADC_DeInit>
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
100009e2:	4620      	mov	r0, r4
100009e4:	f002 f93c 	bl	10002c60 <HAL_ADC_Init>
100009e8:	2800      	cmp	r0, #0
100009ea:	d150      	bne.n	10000a8e <main+0x2c6>
  sConfig.Channel      = ADCx_CHANNELa;               /* ADC channel selection */
100009ec:	4b52      	ldr	r3, [pc, #328]	; (10000b38 <main+0x370>)
100009ee:	9302      	str	r3, [sp, #8]
  sConfig.Rank         = ADC_REGULAR_RANK_1;          /* ADC group regular rank in which is mapped the selected ADC channel */
100009f0:	2306      	movs	r3, #6
100009f2:	9303      	str	r3, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;  /* ADC channel sampling time */
100009f4:	2307      	movs	r3, #7
100009f6:	9304      	str	r3, [sp, #16]
  sConfig.SingleDiff   = ADC_SINGLE_ENDED;            /* ADC channel differential mode */
100009f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
100009fc:	9305      	str	r3, [sp, #20]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;             /* ADC channel affected to offset number */
100009fe:	2304      	movs	r3, #4
10000a00:	9306      	str	r3, [sp, #24]
  sConfig.Offset       = 0;                           /* Parameter discarded because offset correction is disabled */
10000a02:	2300      	movs	r3, #0
10000a04:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
10000a06:	a902      	add	r1, sp, #8
10000a08:	484c      	ldr	r0, [pc, #304]	; (10000b3c <main+0x374>)
10000a0a:	f001 f9b3 	bl	10001d74 <HAL_ADC_ConfigChannel>
10000a0e:	2800      	cmp	r0, #0
10000a10:	d13f      	bne.n	10000a92 <main+0x2ca>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
10000a12:	4845      	ldr	r0, [pc, #276]	; (10000b28 <main+0x360>)
10000a14:	4b4a      	ldr	r3, [pc, #296]	; (10000b40 <main+0x378>)
10000a16:	f8c0 34b4 	str.w	r3, [r0, #1204]	; 0x4b4
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
10000a1a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
10000a1e:	f8c0 34b8 	str.w	r3, [r0, #1208]	; 0x4b8
  AnalogWDGConfig.Channel = ADCx_CHANNELa;
10000a22:	4b45      	ldr	r3, [pc, #276]	; (10000b38 <main+0x370>)
10000a24:	f8c0 34bc 	str.w	r3, [r0, #1212]	; 0x4bc
  AnalogWDGConfig.ITMode = ENABLE;
10000a28:	2301      	movs	r3, #1
10000a2a:	f880 34c0 	strb.w	r3, [r0, #1216]	; 0x4c0
  AnalogWDGConfig.HighThreshold = highThr;
10000a2e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
10000a32:	f8c0 34c4 	str.w	r3, [r0, #1220]	; 0x4c4
  AnalogWDGConfig.LowThreshold = lowThr;
10000a36:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
10000a3a:	f8c0 34c8 	str.w	r3, [r0, #1224]	; 0x4c8
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
10000a3e:	f200 41b4 	addw	r1, r0, #1204	; 0x4b4
10000a42:	f500 7061 	add.w	r0, r0, #900	; 0x384
10000a46:	f001 fbff 	bl	10002248 <HAL_ADC_AnalogWDGConfig>
10000a4a:	bb20      	cbnz	r0, 10000a96 <main+0x2ce>
  log_info("Initial ADC threshold values: [High] %u | [Low] %u\n", (unsigned int) AnalogWDGConfig.HighThreshold, (unsigned int) AnalogWDGConfig.LowThreshold );
10000a4c:	f000 fff4 	bl	10001a38 <HAL_GetTick>
10000a50:	4605      	mov	r5, r0
10000a52:	f000 fff1 	bl	10001a38 <HAL_GetTick>
10000a56:	4c34      	ldr	r4, [pc, #208]	; (10000b28 <main+0x360>)
10000a58:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
10000a5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000a60:	fbb0 f2f1 	udiv	r2, r0, r1
10000a64:	9300      	str	r3, [sp, #0]
10000a66:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
10000a6a:	fb01 0212 	mls	r2, r1, r2, r0
10000a6e:	fbb5 f1f1 	udiv	r1, r5, r1
10000a72:	4834      	ldr	r0, [pc, #208]	; (10000b44 <main+0x37c>)
10000a74:	f008 fdfe 	bl	10009674 <iprintf>
  if (HAL_ADCEx_Calibration_Start(&hadc2,ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
10000a78:	f240 72ff 	movw	r2, #2047	; 0x7ff
10000a7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
10000a80:	f504 7061 	add.w	r0, r4, #900	; 0x384
10000a84:	f002 f9ec 	bl	10002e60 <HAL_ADCEx_Calibration_Start>
10000a88:	b138      	cbz	r0, 10000a9a <main+0x2d2>
    Error_Handler();
10000a8a:	f7ff fd7d 	bl	10000588 <Error_Handler>
    Error_Handler();
10000a8e:	f7ff fd7b 	bl	10000588 <Error_Handler>
    Error_Handler();
10000a92:	f7ff fd79 	bl	10000588 <Error_Handler>
    Error_Handler();
10000a96:	f7ff fd77 	bl	10000588 <Error_Handler>
  Generate_waveform_SW_update_Config();
10000a9a:	f7ff fdc9 	bl	10000630 <Generate_waveform_SW_update_Config>
  log_info("Starting DAC value: %u\n",(unsigned int) HAL_DAC_GetValue(&hdac1,DAC_CHANNEL_1));
10000a9e:	f000 ffcb 	bl	10001a38 <HAL_GetTick>
10000aa2:	4605      	mov	r5, r0
10000aa4:	f000 ffc8 	bl	10001a38 <HAL_GetTick>
10000aa8:	4604      	mov	r4, r0
10000aaa:	4e1f      	ldr	r6, [pc, #124]	; (10000b28 <main+0x360>)
10000aac:	2100      	movs	r1, #0
10000aae:	f206 404c 	addw	r0, r6, #1100	; 0x44c
10000ab2:	f002 fb05 	bl	100030c0 <HAL_DAC_GetValue>
10000ab6:	4603      	mov	r3, r0
10000ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000abc:	fbb4 f2f1 	udiv	r2, r4, r1
10000ac0:	fb01 4212 	mls	r2, r1, r2, r4
10000ac4:	fbb5 f1f1 	udiv	r1, r5, r1
10000ac8:	481f      	ldr	r0, [pc, #124]	; (10000b48 <main+0x380>)
10000aca:	f008 fdd3 	bl	10009674 <iprintf>
  if (HAL_ADC_Start(&hadc2) != HAL_OK)
10000ace:	f506 7061 	add.w	r0, r6, #900	; 0x384
10000ad2:	f001 fe8f 	bl	100027f4 <HAL_ADC_Start>
10000ad6:	2800      	cmp	r0, #0
10000ad8:	f000 80d7 	beq.w	10000c8a <main+0x4c2>
    Error_Handler();
10000adc:	f7ff fd54 	bl	10000588 <Error_Handler>
	  VirtUart0RxMsg = RESET;
10000ae0:	4811      	ldr	r0, [pc, #68]	; (10000b28 <main+0x360>)
10000ae2:	2300      	movs	r3, #0
10000ae4:	f880 3214 	strb.w	r3, [r0, #532]	; 0x214
	  msgType = ParseMsg(VirtUart0ChannelBuffRx);
10000ae8:	3014      	adds	r0, #20
10000aea:	f7ff fcb7 	bl	1000045c <ParseMsg>
	  switch(msgType){
10000aee:	2803      	cmp	r0, #3
10000af0:	f200 80a1 	bhi.w	10000c36 <main+0x46e>
10000af4:	e8df f000 	tbb	[pc, r0]
10000af8:	836d692a 	.word	0x836d692a
10000afc:	50020000 	.word	0x50020000
10000b00:	10624dd3 	.word	0x10624dd3
10000b04:	1000a2f0 	.word	0x1000a2f0
10000b08:	1000a34c 	.word	0x1000a34c
10000b0c:	100209a4 	.word	0x100209a4
10000b10:	1000a390 	.word	0x1000a390
10000b14:	10000431 	.word	0x10000431
10000b18:	1000a3c4 	.word	0x1000a3c4
10000b1c:	1000a408 	.word	0x1000a408
10000b20:	1000a44c 	.word	0x1000a44c
10000b24:	1000a47c 	.word	0x1000a47c
10000b28:	10020540 	.word	0x10020540
10000b2c:	0101001e 	.word	0x0101001e
10000b30:	5000d000 	.word	0x5000d000
10000b34:	48003100 	.word	0x48003100
10000b38:	43210000 	.word	0x43210000
10000b3c:	100208c4 	.word	0x100208c4
10000b40:	7dc00000 	.word	0x7dc00000
10000b44:	1000a4ac 	.word	0x1000a4ac
10000b48:	1000a4f4 	.word	0x1000a4f4
			HAL_ADC_Stop(&hadc2);
10000b4c:	4cae      	ldr	r4, [pc, #696]	; (10000e08 <main+0x640>)
10000b4e:	f504 7661 	add.w	r6, r4, #900	; 0x384
10000b52:	4630      	mov	r0, r6
10000b54:	f001 fff4 	bl	10002b40 <HAL_ADC_Stop>
			AnalogWDGConfig.HighThreshold = highThr;
10000b58:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
10000b5c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
			AnalogWDGConfig.LowThreshold = lowThr;
10000b60:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
10000b64:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
			log_info("New ADC threshold values: [High] %u | [Low] %u\n", (unsigned int) AnalogWDGConfig.HighThreshold, (unsigned int) AnalogWDGConfig.LowThreshold );
10000b68:	f000 ff66 	bl	10001a38 <HAL_GetTick>
10000b6c:	4605      	mov	r5, r0
10000b6e:	f000 ff63 	bl	10001a38 <HAL_GetTick>
10000b72:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
10000b76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000b7a:	fbb0 f2f1 	udiv	r2, r0, r1
10000b7e:	9300      	str	r3, [sp, #0]
10000b80:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
10000b84:	fb01 0212 	mls	r2, r1, r2, r0
10000b88:	fbb5 f1f1 	udiv	r1, r5, r1
10000b8c:	489f      	ldr	r0, [pc, #636]	; (10000e0c <main+0x644>)
10000b8e:	f008 fd71 	bl	10009674 <iprintf>
			if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK) {Error_Handler();}
10000b92:	f204 41b4 	addw	r1, r4, #1204	; 0x4b4
10000b96:	4630      	mov	r0, r6
10000b98:	f001 fb56 	bl	10002248 <HAL_ADC_AnalogWDGConfig>
10000b9c:	b988      	cbnz	r0, 10000bc2 <main+0x3fa>
			if(VIRT_UART_Transmit(&huart0, thrSet_ack, strlen(thrSet_ack)) != VIRT_UART_OK)
10000b9e:	4b9c      	ldr	r3, [pc, #624]	; (10000e10 <main+0x648>)
10000ba0:	68dc      	ldr	r4, [r3, #12]
10000ba2:	4620      	mov	r0, r4
10000ba4:	f7ff fa56 	bl	10000054 <strlen>
10000ba8:	b282      	uxth	r2, r0
10000baa:	4621      	mov	r1, r4
10000bac:	4899      	ldr	r0, [pc, #612]	; (10000e14 <main+0x64c>)
10000bae:	f008 f8fd 	bl	10008dac <VIRT_UART_Transmit>
10000bb2:	b940      	cbnz	r0, 10000bc6 <main+0x3fe>
			if (HAL_ADC_Start(&hadc2) != HAL_OK) {Error_Handler();}
10000bb4:	4898      	ldr	r0, [pc, #608]	; (10000e18 <main+0x650>)
10000bb6:	f001 fe1d 	bl	100027f4 <HAL_ADC_Start>
10000bba:	2800      	cmp	r0, #0
10000bbc:	d073      	beq.n	10000ca6 <main+0x4de>
10000bbe:	f7ff fce3 	bl	10000588 <Error_Handler>
			if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK) {Error_Handler();}
10000bc2:	f7ff fce1 	bl	10000588 <Error_Handler>
			  {Error_Handler();}
10000bc6:	f7ff fcdf 	bl	10000588 <Error_Handler>
	  		prevTrProcessed = SET;
10000bca:	4b91      	ldr	r3, [pc, #580]	; (10000e10 <main+0x648>)
10000bcc:	2201      	movs	r2, #1
10000bce:	741a      	strb	r2, [r3, #16]
	  		break;
10000bd0:	e069      	b.n	10000ca6 <main+0x4de>
	  		if(prevTrProcessed == SET){ // There are no unprocessed data
10000bd2:	4b8f      	ldr	r3, [pc, #572]	; (10000e10 <main+0x648>)
10000bd4:	7c1b      	ldrb	r3, [r3, #16]
10000bd6:	b2db      	uxtb	r3, r3
10000bd8:	2b01      	cmp	r3, #1
10000bda:	d164      	bne.n	10000ca6 <main+0x4de>
	  		  if(VIRT_UART_Transmit(&huart0, rdy_msg, strlen(rdy_msg)) != VIRT_UART_OK)
10000bdc:	4b8c      	ldr	r3, [pc, #560]	; (10000e10 <main+0x648>)
10000bde:	695c      	ldr	r4, [r3, #20]
10000be0:	4620      	mov	r0, r4
10000be2:	f7ff fa37 	bl	10000054 <strlen>
10000be6:	b282      	uxth	r2, r0
10000be8:	4621      	mov	r1, r4
10000bea:	488a      	ldr	r0, [pc, #552]	; (10000e14 <main+0x64c>)
10000bec:	f008 f8de 	bl	10008dac <VIRT_UART_Transmit>
10000bf0:	b918      	cbnz	r0, 10000bfa <main+0x432>
	  		  prevTrProcessed = RESET; // Stop the M4 from sending new data
10000bf2:	4b87      	ldr	r3, [pc, #540]	; (10000e10 <main+0x648>)
10000bf4:	2200      	movs	r2, #0
10000bf6:	741a      	strb	r2, [r3, #16]
10000bf8:	e055      	b.n	10000ca6 <main+0x4de>
	  		  	  {Error_Handler();}
10000bfa:	f7ff fcc5 	bl	10000588 <Error_Handler>
	  		if(prevTrProcessed == SET){ // There are no unprocessed data
10000bfe:	4b84      	ldr	r3, [pc, #528]	; (10000e10 <main+0x648>)
10000c00:	7c1b      	ldrb	r3, [r3, #16]
10000c02:	b2db      	uxtb	r3, r3
10000c04:	2b01      	cmp	r3, #1
10000c06:	d14e      	bne.n	10000ca6 <main+0x4de>
	  		  if(VIRT_UART_Transmit(&huart0, rdy_msg, strlen(rdy_msg)) != VIRT_UART_OK)
10000c08:	4b81      	ldr	r3, [pc, #516]	; (10000e10 <main+0x648>)
10000c0a:	695c      	ldr	r4, [r3, #20]
10000c0c:	4620      	mov	r0, r4
10000c0e:	f7ff fa21 	bl	10000054 <strlen>
10000c12:	b282      	uxth	r2, r0
10000c14:	4621      	mov	r1, r4
10000c16:	487f      	ldr	r0, [pc, #508]	; (10000e14 <main+0x64c>)
10000c18:	f008 f8c8 	bl	10008dac <VIRT_UART_Transmit>
10000c1c:	b948      	cbnz	r0, 10000c32 <main+0x46a>
	  		  prevTrProcessed = RESET; // Stop the M4 from sending new data
10000c1e:	4c7c      	ldr	r4, [pc, #496]	; (10000e10 <main+0x648>)
10000c20:	2300      	movs	r3, #0
10000c22:	7423      	strb	r3, [r4, #16]
	  		HAL_Delay(waitSuspTime);
10000c24:	f241 3088 	movw	r0, #5000	; 0x1388
10000c28:	f000 ff0c 	bl	10001a44 <HAL_Delay>
	  		prevTrProcessed = SET;
10000c2c:	2301      	movs	r3, #1
10000c2e:	7423      	strb	r3, [r4, #16]
	  		break;
10000c30:	e039      	b.n	10000ca6 <main+0x4de>
	  			{Error_Handler();}
10000c32:	f7ff fca9 	bl	10000588 <Error_Handler>
	  		log_err("Invalid (%.*s) message received\n",MAX_BUFFER_SIZE,VirtUart0ChannelBuffRx);
10000c36:	f000 feff 	bl	10001a38 <HAL_GetTick>
10000c3a:	4604      	mov	r4, r0
10000c3c:	f000 fefc 	bl	10001a38 <HAL_GetTick>
10000c40:	4602      	mov	r2, r0
10000c42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000c46:	fbb0 f0f1 	udiv	r0, r0, r1
10000c4a:	4b74      	ldr	r3, [pc, #464]	; (10000e1c <main+0x654>)
10000c4c:	9300      	str	r3, [sp, #0]
10000c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
10000c52:	fb01 2210 	mls	r2, r1, r0, r2
10000c56:	fbb4 f1f1 	udiv	r1, r4, r1
10000c5a:	4871      	ldr	r0, [pc, #452]	; (10000e20 <main+0x658>)
10000c5c:	f008 fd0a 	bl	10009674 <iprintf>
10000c60:	e021      	b.n	10000ca6 <main+0x4de>
		OutOfWindowData = 0;
10000c62:	4869      	ldr	r0, [pc, #420]	; (10000e08 <main+0x640>)
10000c64:	2300      	movs	r3, #0
10000c66:	f8a0 3380 	strh.w	r3, [r0, #896]	; 0x380
		if (HAL_ADC_Start(&hadc2) != HAL_OK) {Error_Handler();}
10000c6a:	f500 7061 	add.w	r0, r0, #900	; 0x384
10000c6e:	f001 fdc1 	bl	100027f4 <HAL_ADC_Start>
10000c72:	2800      	cmp	r0, #0
10000c74:	d148      	bne.n	10000d08 <main+0x540>
    if ((ubUserButtonClickEvent) == SET)
10000c76:	4b64      	ldr	r3, [pc, #400]	; (10000e08 <main+0x640>)
10000c78:	781b      	ldrb	r3, [r3, #0]
10000c7a:	b2db      	uxtb	r3, r3
10000c7c:	2b01      	cmp	r3, #1
10000c7e:	d045      	beq.n	10000d0c <main+0x544>
    if(prevTrProcessed == SET && OutOfWindowData < MIN_TRANSM_ELEMS){
10000c80:	4b63      	ldr	r3, [pc, #396]	; (10000e10 <main+0x648>)
10000c82:	7c1b      	ldrb	r3, [r3, #16]
10000c84:	b2db      	uxtb	r3, r3
10000c86:	2b01      	cmp	r3, #1
10000c88:	d060      	beq.n	10000d4c <main+0x584>
  while (!Shutdown_Req)
10000c8a:	4b5f      	ldr	r3, [pc, #380]	; (10000e08 <main+0x640>)
10000c8c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
10000c90:	2b00      	cmp	r3, #0
10000c92:	f040 8088 	bne.w	10000da6 <main+0x5de>
	OPENAMP_check_for_message();
10000c96:	f000 fa6f 	bl	10001178 <OPENAMP_check_for_message>
	if (VirtUart0RxMsg) {
10000c9a:	4b5b      	ldr	r3, [pc, #364]	; (10000e08 <main+0x640>)
10000c9c:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
10000ca0:	2b00      	cmp	r3, #0
10000ca2:	f47f af1d 	bne.w	10000ae0 <main+0x318>
	if (OutOfWindowData > MIN_TRANSM_ELEMS-1 && prevTrProcessed == SET){
10000ca6:	4b58      	ldr	r3, [pc, #352]	; (10000e08 <main+0x640>)
10000ca8:	f8b3 3380 	ldrh.w	r3, [r3, #896]	; 0x380
10000cac:	b29b      	uxth	r3, r3
10000cae:	2b00      	cmp	r3, #0
10000cb0:	d0e1      	beq.n	10000c76 <main+0x4ae>
10000cb2:	4b57      	ldr	r3, [pc, #348]	; (10000e10 <main+0x648>)
10000cb4:	7c1b      	ldrb	r3, [r3, #16]
10000cb6:	b2db      	uxtb	r3, r3
10000cb8:	2b01      	cmp	r3, #1
10000cba:	d1dc      	bne.n	10000c76 <main+0x4ae>
		HAL_ADC_Stop(&hadc2);
10000cbc:	4c52      	ldr	r4, [pc, #328]	; (10000e08 <main+0x640>)
10000cbe:	f504 7061 	add.w	r0, r4, #900	; 0x384
10000cc2:	f001 ff3d 	bl	10002b40 <HAL_ADC_Stop>
		prevTrProcessed = RESET;
10000cc6:	4b52      	ldr	r3, [pc, #328]	; (10000e10 <main+0x648>)
10000cc8:	2200      	movs	r2, #0
10000cca:	741a      	strb	r2, [r3, #16]
		res = VIRT_UART_Transmit(&huart0, ADCxDataBuffer, OutOfWindowData*sizeof(sensorData_t));
10000ccc:	f8b4 2380 	ldrh.w	r2, [r4, #896]	; 0x380
10000cd0:	b292      	uxth	r2, r2
10000cd2:	0092      	lsls	r2, r2, #2
10000cd4:	b292      	uxth	r2, r2
10000cd6:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
10000cda:	f204 4064 	addw	r0, r4, #1124	; 0x464
10000cde:	f008 f865 	bl	10008dac <VIRT_UART_Transmit>
		if(res != VIRT_UART_OK){
10000ce2:	2800      	cmp	r0, #0
10000ce4:	d0bd      	beq.n	10000c62 <main+0x49a>
			log_err("Error during out of window values transmission\n");
10000ce6:	f000 fea7 	bl	10001a38 <HAL_GetTick>
10000cea:	4604      	mov	r4, r0
10000cec:	f000 fea4 	bl	10001a38 <HAL_GetTick>
10000cf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000cf4:	fbb0 f2f1 	udiv	r2, r0, r1
10000cf8:	fb01 0212 	mls	r2, r1, r2, r0
10000cfc:	fbb4 f1f1 	udiv	r1, r4, r1
10000d00:	4848      	ldr	r0, [pc, #288]	; (10000e24 <main+0x65c>)
10000d02:	f008 fcb7 	bl	10009674 <iprintf>
10000d06:	e7ac      	b.n	10000c62 <main+0x49a>
		if (HAL_ADC_Start(&hadc2) != HAL_OK) {Error_Handler();}
10000d08:	f7ff fc3e 	bl	10000588 <Error_Handler>
      Generate_waveform_SW_update();
10000d0c:	f7ff fca6 	bl	1000065c <Generate_waveform_SW_update>
      HAL_Delay(200);
10000d10:	20c8      	movs	r0, #200	; 0xc8
10000d12:	f000 fe97 	bl	10001a44 <HAL_Delay>
      log_info("New DAC value: %u\n",(unsigned int) HAL_DAC_GetValue(&hdac1,DAC_CHANNEL_1));
10000d16:	f000 fe8f 	bl	10001a38 <HAL_GetTick>
10000d1a:	4605      	mov	r5, r0
10000d1c:	f000 fe8c 	bl	10001a38 <HAL_GetTick>
10000d20:	4604      	mov	r4, r0
10000d22:	4e39      	ldr	r6, [pc, #228]	; (10000e08 <main+0x640>)
10000d24:	2100      	movs	r1, #0
10000d26:	f206 404c 	addw	r0, r6, #1100	; 0x44c
10000d2a:	f002 f9c9 	bl	100030c0 <HAL_DAC_GetValue>
10000d2e:	4603      	mov	r3, r0
10000d30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000d34:	fbb4 f2f1 	udiv	r2, r4, r1
10000d38:	fb01 4212 	mls	r2, r1, r2, r4
10000d3c:	fbb5 f1f1 	udiv	r1, r5, r1
10000d40:	4839      	ldr	r0, [pc, #228]	; (10000e28 <main+0x660>)
10000d42:	f008 fc97 	bl	10009674 <iprintf>
      ubUserButtonClickEvent = RESET;
10000d46:	2300      	movs	r3, #0
10000d48:	7033      	strb	r3, [r6, #0]
10000d4a:	e799      	b.n	10000c80 <main+0x4b8>
    if(prevTrProcessed == SET && OutOfWindowData < MIN_TRANSM_ELEMS){
10000d4c:	4b2e      	ldr	r3, [pc, #184]	; (10000e08 <main+0x640>)
10000d4e:	f8b3 3380 	ldrh.w	r3, [r3, #896]	; 0x380
10000d52:	b29b      	uxth	r3, r3
10000d54:	2b00      	cmp	r3, #0
10000d56:	d198      	bne.n	10000c8a <main+0x4c2>
		log_info("Going to sleep...\n");
10000d58:	f000 fe6e 	bl	10001a38 <HAL_GetTick>
10000d5c:	4605      	mov	r5, r0
10000d5e:	f000 fe6b 	bl	10001a38 <HAL_GetTick>
10000d62:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
10000d66:	fbb0 f2f4 	udiv	r2, r0, r4
10000d6a:	fb04 0212 	mls	r2, r4, r2, r0
10000d6e:	fbb5 f1f4 	udiv	r1, r5, r4
10000d72:	482e      	ldr	r0, [pc, #184]	; (10000e2c <main+0x664>)
10000d74:	f008 fc7e 	bl	10009674 <iprintf>
		HAL_SuspendTick();
10000d78:	f000 fe78 	bl	10001a6c <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
10000d7c:	2101      	movs	r1, #1
10000d7e:	2000      	movs	r0, #0
10000d80:	f003 fa98 	bl	100042b4 <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
10000d84:	f000 fe79 	bl	10001a7a <HAL_ResumeTick>
		log_info("Woke up from sleep!!!\n");
10000d88:	f000 fe56 	bl	10001a38 <HAL_GetTick>
10000d8c:	4605      	mov	r5, r0
10000d8e:	f000 fe53 	bl	10001a38 <HAL_GetTick>
10000d92:	fbb0 f2f4 	udiv	r2, r0, r4
10000d96:	fb04 0212 	mls	r2, r4, r2, r0
10000d9a:	fbb5 f1f4 	udiv	r1, r5, r4
10000d9e:	4824      	ldr	r0, [pc, #144]	; (10000e30 <main+0x668>)
10000da0:	f008 fc68 	bl	10009674 <iprintf>
10000da4:	e771      	b.n	10000c8a <main+0x4c2>
  HAL_ADC_Stop(&hadc2);
10000da6:	4c18      	ldr	r4, [pc, #96]	; (10000e08 <main+0x640>)
10000da8:	f504 7061 	add.w	r0, r4, #900	; 0x384
10000dac:	f001 fec8 	bl	10002b40 <HAL_ADC_Stop>
  BSP_LED_DeInit(LED7);
10000db0:	2002      	movs	r0, #2
10000db2:	f000 fb53 	bl	1000145c <BSP_LED_DeInit>
  BSP_LED_DeInit(LED5);
10000db6:	2001      	movs	r0, #1
10000db8:	f000 fb50 	bl	1000145c <BSP_LED_DeInit>
  PERIPH_LOCK(EXTI);
10000dbc:	4d1d      	ldr	r5, [pc, #116]	; (10000e34 <main+0x66c>)
10000dbe:	2164      	movs	r1, #100	; 0x64
10000dc0:	4628      	mov	r0, r5
10000dc2:	f7ff fa27 	bl	10000214 <Periph_Lock>
  HAL_EXTI_ClearConfigLine(&hexti62);
10000dc6:	a809      	add	r0, sp, #36	; 0x24
10000dc8:	f002 faac 	bl	10003324 <HAL_EXTI_ClearConfigLine>
  PERIPH_UNLOCK(EXTI);
10000dcc:	4628      	mov	r0, r5
10000dce:	f7ff fa89 	bl	100002e4 <Periph_Unlock>
  VIRT_UART_DeInit(&huart0);
10000dd2:	f204 4064 	addw	r0, r4, #1124	; 0x464
10000dd6:	f007 ffdd 	bl	10008d94 <VIRT_UART_DeInit>
  HAL_IPCC_NotifyCPU(&hipcc, COPRO_SYNC_SHUTDOWN_CHANNEL, IPCC_CHANNEL_DIR_RX);
10000dda:	2201      	movs	r2, #1
10000ddc:	2102      	movs	r1, #2
10000dde:	f504 6082 	add.w	r0, r4, #1040	; 0x410
10000de2:	f003 f9ff 	bl	100041e4 <HAL_IPCC_NotifyCPU>
  log_info("Cortex-M4 boot successful shutdown\n");
10000de6:	f000 fe27 	bl	10001a38 <HAL_GetTick>
10000dea:	4604      	mov	r4, r0
10000dec:	f000 fe24 	bl	10001a38 <HAL_GetTick>
10000df0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
10000df4:	fbb0 f2f1 	udiv	r2, r0, r1
10000df8:	fb01 0212 	mls	r2, r1, r2, r0
10000dfc:	fbb4 f1f1 	udiv	r1, r4, r1
10000e00:	480d      	ldr	r0, [pc, #52]	; (10000e38 <main+0x670>)
10000e02:	f008 fc37 	bl	10009674 <iprintf>
  while(1);
10000e06:	e7fe      	b.n	10000e06 <main+0x63e>
10000e08:	10020540 	.word	0x10020540
10000e0c:	1000a520 	.word	0x1000a520
10000e10:	10020000 	.word	0x10020000
10000e14:	100209a4 	.word	0x100209a4
10000e18:	100208c4 	.word	0x100208c4
10000e1c:	10020554 	.word	0x10020554
10000e20:	1000a564 	.word	0x1000a564
10000e24:	1000a59c 	.word	0x1000a59c
10000e28:	1000a5e0 	.word	0x1000a5e0
10000e2c:	1000a608 	.word	0x1000a608
10000e30:	1000a630 	.word	0x1000a630
10000e34:	5000d000 	.word	0x5000d000
10000e38:	1000a65c 	.word	0x1000a65c

10000e3c <HAL_ADC_ErrorCallback>:
{
10000e3c:	b508      	push	{r3, lr}
  Error_Handler();
10000e3e:	f7ff fba3 	bl	10000588 <Error_Handler>
	...

10000e44 <IPCC_channel1_callback>:

/* USER CODE END 0 */
/* Callback from IPCC Interrupt Handler: Master Processor informs that there are some free buffers */
void IPCC_channel1_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000e44:	b508      	push	{r3, lr}
  /* USER CODE END  PRE_MAILBOX_CHANNEL1_CALLBACK */

  if (msg_received_ch1 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel1_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch1);

  msg_received_ch1 = MBOX_BUF_FREE;
10000e46:	4b03      	ldr	r3, [pc, #12]	; (10000e54 <IPCC_channel1_callback+0x10>)
10000e48:	2202      	movs	r2, #2
10000e4a:	601a      	str	r2, [r3, #0]

  /* Inform A7 that we have received the 'buff free' msg */
  OPENAMP_log_dbg("Ack 'buff free' message on ch1\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10000e4c:	2201      	movs	r2, #1
10000e4e:	f003 f9c9 	bl	100041e4 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL1_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL1_CALLBACK */
}
10000e52:	bd08      	pop	{r3, pc}
10000e54:	10020a4c 	.word	0x10020a4c

10000e58 <IPCC_channel2_callback>:

/* Callback from IPCC Interrupt Handler: new message received from Master Processor */
void IPCC_channel2_callback(IPCC_HandleTypeDef * hipcc,
         uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
10000e58:	b508      	push	{r3, lr}
  /* USER CODE END  PRE_MAILBOX_CHANNEL2_CALLBACK */

  if (msg_received_ch2 != MBOX_NO_MSG)
    OPENAMP_log_dbg("IPCC_channel2_callback: previous IRQ not treated (status = %d)\r\n", msg_received_ch2);

  msg_received_ch2 = MBOX_NEW_MSG;
10000e5a:	2201      	movs	r2, #1
10000e5c:	4b02      	ldr	r3, [pc, #8]	; (10000e68 <IPCC_channel2_callback+0x10>)
10000e5e:	605a      	str	r2, [r3, #4]

  /* Inform A7 that we have received the new msg */
  OPENAMP_log_dbg("Ack new message on ch2\r\n");
  HAL_IPCC_NotifyCPU(hipcc, ChannelIndex, IPCC_CHANNEL_DIR_RX);
10000e60:	f003 f9c0 	bl	100041e4 <HAL_IPCC_NotifyCPU>

  /* USER CODE BEGIN POST_MAILBOX_CHANNEL2_CALLBACK */

  /* USER CODE END  POST_MAILBOX_CHANNEL2_CALLBACK */
}
10000e64:	bd08      	pop	{r3, pc}
10000e66:	bf00      	nop
10000e68:	10020a4c 	.word	0x10020a4c

10000e6c <MAILBOX_Init>:
{
10000e6c:	b510      	push	{r4, lr}
  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_1, IPCC_CHANNEL_DIR_RX,
10000e6e:	4b1f      	ldr	r3, [pc, #124]	; (10000eec <MAILBOX_Init+0x80>)
10000e70:	2201      	movs	r2, #1
10000e72:	2100      	movs	r1, #0
10000e74:	481e      	ldr	r0, [pc, #120]	; (10000ef0 <MAILBOX_Init+0x84>)
10000e76:	f003 f981 	bl	1000417c <HAL_IPCC_ActivateNotification>
10000e7a:	b940      	cbnz	r0, 10000e8e <MAILBOX_Init+0x22>
  if (HAL_IPCC_ActivateNotification(&hipcc, IPCC_CHANNEL_2, IPCC_CHANNEL_DIR_RX,
10000e7c:	4b1d      	ldr	r3, [pc, #116]	; (10000ef4 <MAILBOX_Init+0x88>)
10000e7e:	2201      	movs	r2, #1
10000e80:	4611      	mov	r1, r2
10000e82:	481b      	ldr	r0, [pc, #108]	; (10000ef0 <MAILBOX_Init+0x84>)
10000e84:	f003 f97a 	bl	1000417c <HAL_IPCC_ActivateNotification>
10000e88:	b9c0      	cbnz	r0, 10000ebc <MAILBOX_Init+0x50>
  return 0;
10000e8a:	2000      	movs	r0, #0
}
10000e8c:	bd10      	pop	{r4, pc}
	  OPENAMP_log_err("%s: ch_1 RX fail\n", __func__);
10000e8e:	f000 fdd3 	bl	10001a38 <HAL_GetTick>
10000e92:	4604      	mov	r4, r0
10000e94:	f000 fdd0 	bl	10001a38 <HAL_GetTick>
10000e98:	4917      	ldr	r1, [pc, #92]	; (10000ef8 <MAILBOX_Init+0x8c>)
10000e9a:	fba1 3200 	umull	r3, r2, r1, r0
10000e9e:	0992      	lsrs	r2, r2, #6
10000ea0:	fba1 3104 	umull	r3, r1, r1, r4
10000ea4:	4b15      	ldr	r3, [pc, #84]	; (10000efc <MAILBOX_Init+0x90>)
10000ea6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
10000eaa:	fb04 0212 	mls	r2, r4, r2, r0
10000eae:	0989      	lsrs	r1, r1, #6
10000eb0:	4813      	ldr	r0, [pc, #76]	; (10000f00 <MAILBOX_Init+0x94>)
10000eb2:	f008 fbdf 	bl	10009674 <iprintf>
    return -1;
10000eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10000eba:	e7e7      	b.n	10000e8c <MAILBOX_Init+0x20>
	  OPENAMP_log_err("%s: ch_2 RX fail\n", __func__);
10000ebc:	f000 fdbc 	bl	10001a38 <HAL_GetTick>
10000ec0:	4604      	mov	r4, r0
10000ec2:	f000 fdb9 	bl	10001a38 <HAL_GetTick>
10000ec6:	490c      	ldr	r1, [pc, #48]	; (10000ef8 <MAILBOX_Init+0x8c>)
10000ec8:	fba1 3200 	umull	r3, r2, r1, r0
10000ecc:	0992      	lsrs	r2, r2, #6
10000ece:	fba1 3104 	umull	r3, r1, r1, r4
10000ed2:	4b0a      	ldr	r3, [pc, #40]	; (10000efc <MAILBOX_Init+0x90>)
10000ed4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
10000ed8:	fb04 0212 	mls	r2, r4, r2, r0
10000edc:	0989      	lsrs	r1, r1, #6
10000ede:	4809      	ldr	r0, [pc, #36]	; (10000f04 <MAILBOX_Init+0x98>)
10000ee0:	f008 fbc8 	bl	10009674 <iprintf>
    return -1;
10000ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10000ee8:	e7d0      	b.n	10000e8c <MAILBOX_Init+0x20>
10000eea:	bf00      	nop
10000eec:	10000e45 	.word	0x10000e45
10000ef0:	10020950 	.word	0x10020950
10000ef4:	10000e59 	.word	0x10000e59
10000ef8:	10624dd3 	.word	0x10624dd3
10000efc:	1000a124 	.word	0x1000a124
10000f00:	1000a7b4 	.word	0x1000a7b4
10000f04:	1000a7dc 	.word	0x1000a7dc

10000f08 <MAILBOX_Poll>:
{
10000f08:	b510      	push	{r4, lr}
10000f0a:	4604      	mov	r4, r0
   if (msg_received_ch1 == MBOX_BUF_FREE) {
10000f0c:	4b0c      	ldr	r3, [pc, #48]	; (10000f40 <MAILBOX_Poll+0x38>)
10000f0e:	681b      	ldr	r3, [r3, #0]
10000f10:	2b02      	cmp	r3, #2
10000f12:	d006      	beq.n	10000f22 <MAILBOX_Poll+0x1a>
  int ret = -1;
10000f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (msg_received_ch2 == MBOX_NEW_MSG) {
10000f18:	4b09      	ldr	r3, [pc, #36]	; (10000f40 <MAILBOX_Poll+0x38>)
10000f1a:	685b      	ldr	r3, [r3, #4]
10000f1c:	2b01      	cmp	r3, #1
10000f1e:	d007      	beq.n	10000f30 <MAILBOX_Poll+0x28>
}
10000f20:	bd10      	pop	{r4, pc}
    rproc_virtio_notified(vdev, VRING0_ID);
10000f22:	2100      	movs	r1, #0
10000f24:	f007 f908 	bl	10008138 <rproc_virtio_notified>
    msg_received_ch1 = MBOX_NO_MSG;
10000f28:	2000      	movs	r0, #0
10000f2a:	4a05      	ldr	r2, [pc, #20]	; (10000f40 <MAILBOX_Poll+0x38>)
10000f2c:	6010      	str	r0, [r2, #0]
10000f2e:	e7f3      	b.n	10000f18 <MAILBOX_Poll+0x10>
    rproc_virtio_notified(vdev, VRING1_ID);
10000f30:	2101      	movs	r1, #1
10000f32:	4620      	mov	r0, r4
10000f34:	f007 f900 	bl	10008138 <rproc_virtio_notified>
    msg_received_ch2 = MBOX_NO_MSG;
10000f38:	2000      	movs	r0, #0
10000f3a:	4b01      	ldr	r3, [pc, #4]	; (10000f40 <MAILBOX_Poll+0x38>)
10000f3c:	6058      	str	r0, [r3, #4]
  return ret;
10000f3e:	e7ef      	b.n	10000f20 <MAILBOX_Poll+0x18>
10000f40:	10020a4c 	.word	0x10020a4c

10000f44 <MAILBOX_Notify>:
{
10000f44:	b538      	push	{r3, r4, r5, lr}
  if (id == VRING0_ID) {
10000f46:	460c      	mov	r4, r1
10000f48:	b109      	cbz	r1, 10000f4e <MAILBOX_Notify+0xa>
  else if (id == VRING1_ID) {
10000f4a:	2901      	cmp	r1, #1
10000f4c:	d10d      	bne.n	10000f6a <MAILBOX_Notify+0x26>
  if (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED) {
10000f4e:	2200      	movs	r2, #0
10000f50:	4621      	mov	r1, r4
10000f52:	4815      	ldr	r0, [pc, #84]	; (10000fa8 <MAILBOX_Notify+0x64>)
10000f54:	f003 f8ba 	bl	100040cc <HAL_IPCC_GetChannelStatus>
10000f58:	2801      	cmp	r0, #1
10000f5a:	d01d      	beq.n	10000f98 <MAILBOX_Notify+0x54>
  HAL_IPCC_NotifyCPU(&hipcc, channel, IPCC_CHANNEL_DIR_TX);
10000f5c:	2200      	movs	r2, #0
10000f5e:	4621      	mov	r1, r4
10000f60:	4811      	ldr	r0, [pc, #68]	; (10000fa8 <MAILBOX_Notify+0x64>)
10000f62:	f003 f93f 	bl	100041e4 <HAL_IPCC_NotifyCPU>
  return 0;
10000f66:	2000      	movs	r0, #0
}
10000f68:	bd38      	pop	{r3, r4, r5, pc}
    OPENAMP_log_err("invalid vring (%d)\r\n", (int)id);
10000f6a:	f000 fd65 	bl	10001a38 <HAL_GetTick>
10000f6e:	4605      	mov	r5, r0
10000f70:	f000 fd62 	bl	10001a38 <HAL_GetTick>
10000f74:	490d      	ldr	r1, [pc, #52]	; (10000fac <MAILBOX_Notify+0x68>)
10000f76:	fba1 3200 	umull	r3, r2, r1, r0
10000f7a:	0992      	lsrs	r2, r2, #6
10000f7c:	fba1 3105 	umull	r3, r1, r1, r5
10000f80:	4623      	mov	r3, r4
10000f82:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
10000f86:	fb04 0212 	mls	r2, r4, r2, r0
10000f8a:	0989      	lsrs	r1, r1, #6
10000f8c:	4808      	ldr	r0, [pc, #32]	; (10000fb0 <MAILBOX_Notify+0x6c>)
10000f8e:	f008 fb71 	bl	10009674 <iprintf>
    return -1;
10000f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10000f96:	e7e7      	b.n	10000f68 <MAILBOX_Notify+0x24>
    while (HAL_IPCC_GetChannelStatus(&hipcc, channel, IPCC_CHANNEL_DIR_TX) == IPCC_CHANNEL_STATUS_OCCUPIED)
10000f98:	2200      	movs	r2, #0
10000f9a:	4621      	mov	r1, r4
10000f9c:	4802      	ldr	r0, [pc, #8]	; (10000fa8 <MAILBOX_Notify+0x64>)
10000f9e:	f003 f895 	bl	100040cc <HAL_IPCC_GetChannelStatus>
10000fa2:	2801      	cmp	r0, #1
10000fa4:	d0f8      	beq.n	10000f98 <MAILBOX_Notify+0x54>
10000fa6:	e7d9      	b.n	10000f5c <MAILBOX_Notify+0x18>
10000fa8:	10020950 	.word	0x10020950
10000fac:	10624dd3 	.word	0x10624dd3
10000fb0:	1000a804 	.word	0x1000a804

10000fb4 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
10000fb4:	b530      	push	{r4, r5, lr}
10000fb6:	b08b      	sub	sp, #44	; 0x2c
10000fb8:	4605      	mov	r5, r0
  int status = 0;
  struct metal_device *device = NULL;
10000fba:	2200      	movs	r2, #0
10000fbc:	9209      	str	r2, [sp, #36]	; 0x24
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
10000fbe:	492d      	ldr	r1, [pc, #180]	; (10001074 <OPENAMP_shmem_init+0xc0>)
10000fc0:	ab07      	add	r3, sp, #28
10000fc2:	c903      	ldmia	r1, {r0, r1}
10000fc4:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
10000fc8:	9206      	str	r2, [sp, #24]
  int rsc_size = 0;
10000fca:	9205      	str	r2, [sp, #20]


  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
10000fcc:	4618      	mov	r0, r3
10000fce:	f006 fe09 	bl	10007be4 <metal_init>

  status = metal_register_generic_device(&shm_device);
10000fd2:	4829      	ldr	r0, [pc, #164]	; (10001078 <OPENAMP_shmem_init+0xc4>)
10000fd4:	f006 fde0 	bl	10007b98 <metal_register_generic_device>
  if (status != 0) {
10000fd8:	4604      	mov	r4, r0
10000fda:	b110      	cbz	r0, 10000fe2 <OPENAMP_shmem_init+0x2e>

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
}
10000fdc:	4620      	mov	r0, r4
10000fde:	b00b      	add	sp, #44	; 0x2c
10000fe0:	bd30      	pop	{r4, r5, pc}
  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
10000fe2:	aa09      	add	r2, sp, #36	; 0x24
10000fe4:	4925      	ldr	r1, [pc, #148]	; (1000107c <OPENAMP_shmem_init+0xc8>)
10000fe6:	4826      	ldr	r0, [pc, #152]	; (10001080 <OPENAMP_shmem_init+0xcc>)
10000fe8:	f006 fdac 	bl	10007b44 <metal_device_open>
  if (status != 0) {
10000fec:	4604      	mov	r4, r0
10000fee:	2800      	cmp	r0, #0
10000ff0:	d1f4      	bne.n	10000fdc <OPENAMP_shmem_init+0x28>
  shm_physmap = SHM_START_ADDRESS;
10000ff2:	4924      	ldr	r1, [pc, #144]	; (10001084 <OPENAMP_shmem_init+0xd0>)
10000ff4:	4a24      	ldr	r2, [pc, #144]	; (10001088 <OPENAMP_shmem_init+0xd4>)
10000ff6:	6011      	str	r1, [r2, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
10000ff8:	2300      	movs	r3, #0
10000ffa:	9302      	str	r3, [sp, #8]
10000ffc:	9301      	str	r3, [sp, #4]
10000ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10001002:	9300      	str	r3, [sp, #0]
10001004:	4b21      	ldr	r3, [pc, #132]	; (1000108c <OPENAMP_shmem_init+0xd8>)
10001006:	1a5b      	subs	r3, r3, r1
10001008:	9809      	ldr	r0, [sp, #36]	; 0x24
1000100a:	300c      	adds	r0, #12
1000100c:	f006 fe08 	bl	10007c20 <metal_io_init>
  shm_io = metal_device_io_region(device, 0);
10001010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
10001012:	689a      	ldr	r2, [r3, #8]
		? &device->regions[index]
		: NULL);
10001014:	b322      	cbz	r2, 10001060 <OPENAMP_shmem_init+0xac>
10001016:	330c      	adds	r3, #12
10001018:	4a1b      	ldr	r2, [pc, #108]	; (10001088 <OPENAMP_shmem_init+0xd4>)
1000101a:	6053      	str	r3, [r2, #4]
  if (shm_io == NULL) {
1000101c:	b323      	cbz	r3, 10001068 <OPENAMP_shmem_init+0xb4>
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
1000101e:	aa05      	add	r2, sp, #20
10001020:	a906      	add	r1, sp, #24
10001022:	4628      	mov	r0, r5
10001024:	f000 f8e2 	bl	100011ec <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
10001028:	9906      	ldr	r1, [sp, #24]
1000102a:	4b17      	ldr	r3, [pc, #92]	; (10001088 <OPENAMP_shmem_init+0xd4>)
1000102c:	6099      	str	r1, [r3, #8]
  if (!rsc_table)
1000102e:	b1f1      	cbz	r1, 1000106e <OPENAMP_shmem_init+0xba>
  metal_io_init(&device->regions[1], rsc_table,
10001030:	2300      	movs	r3, #0
10001032:	9302      	str	r3, [sp, #8]
10001034:	9301      	str	r3, [sp, #4]
10001036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1000103a:	9300      	str	r3, [sp, #0]
1000103c:	9b05      	ldr	r3, [sp, #20]
1000103e:	460a      	mov	r2, r1
10001040:	9809      	ldr	r0, [sp, #36]	; 0x24
10001042:	3044      	adds	r0, #68	; 0x44
10001044:	f006 fdec 	bl	10007c20 <metal_io_init>
  rsc_io = metal_device_io_region(device, 1);
10001048:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (index < device->num_regions
1000104a:	689a      	ldr	r2, [r3, #8]
		: NULL);
1000104c:	2a01      	cmp	r2, #1
1000104e:	d909      	bls.n	10001064 <OPENAMP_shmem_init+0xb0>
10001050:	3344      	adds	r3, #68	; 0x44
10001052:	4a0d      	ldr	r2, [pc, #52]	; (10001088 <OPENAMP_shmem_init+0xd4>)
10001054:	60d3      	str	r3, [r2, #12]
  if (rsc_io == NULL) {
10001056:	2b00      	cmp	r3, #0
10001058:	d1c0      	bne.n	10000fdc <OPENAMP_shmem_init+0x28>
    return -1;
1000105a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1000105e:	e7bd      	b.n	10000fdc <OPENAMP_shmem_init+0x28>
10001060:	2300      	movs	r3, #0
10001062:	e7d9      	b.n	10001018 <OPENAMP_shmem_init+0x64>
10001064:	2300      	movs	r3, #0
10001066:	e7f4      	b.n	10001052 <OPENAMP_shmem_init+0x9e>
    return -1;
10001068:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1000106c:	e7b6      	b.n	10000fdc <OPENAMP_shmem_init+0x28>
    return -1;
1000106e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
10001072:	e7b3      	b.n	10000fdc <OPENAMP_shmem_init+0x28>
10001074:	1000a134 	.word	0x1000a134
10001078:	10020018 	.word	0x10020018
1000107c:	1000a830 	.word	0x1000a830
10001080:	1000a83c 	.word	0x1000a83c
10001084:	10040000 	.word	0x10040000
10001088:	10020a58 	.word	0x10020a58
1000108c:	10048000 	.word	0x10048000

10001090 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
10001090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10001094:	b084      	sub	sp, #16
10001096:	4604      	mov	r4, r0
10001098:	460e      	mov	r6, r1

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
1000109a:	f7ff fee7 	bl	10000e6c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
1000109e:	4620      	mov	r0, r4
100010a0:	f7ff ff88 	bl	10000fb4 <OPENAMP_shmem_init>
  if(status)
100010a4:	4605      	mov	r5, r0
100010a6:	b118      	cbz	r0, 100010b0 <MX_OPENAMP_Init+0x20>
  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
}
100010a8:	4628      	mov	r0, r5
100010aa:	b004      	add	sp, #16
100010ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
100010b0:	4b25      	ldr	r3, [pc, #148]	; (10001148 <MX_OPENAMP_Init+0xb8>)
100010b2:	689a      	ldr	r2, [r3, #8]
100010b4:	2100      	movs	r1, #0
100010b6:	9102      	str	r1, [sp, #8]
100010b8:	4824      	ldr	r0, [pc, #144]	; (1000114c <MX_OPENAMP_Init+0xbc>)
100010ba:	9001      	str	r0, [sp, #4]
100010bc:	9100      	str	r1, [sp, #0]
100010be:	68db      	ldr	r3, [r3, #12]
100010c0:	3218      	adds	r2, #24
100010c2:	21ff      	movs	r1, #255	; 0xff
100010c4:	4620      	mov	r0, r4
100010c6:	f006 ff9f 	bl	10008008 <rproc_virtio_create_vdev>
  if (vdev == NULL)
100010ca:	4604      	mov	r4, r0
100010cc:	2800      	cmp	r0, #0
100010ce:	d038      	beq.n	10001142 <MX_OPENAMP_Init+0xb2>
  rproc_virtio_wait_remote_ready(vdev);
100010d0:	f007 f856 	bl	10008180 <rproc_virtio_wait_remote_ready>
  vring_rsc = &rsc_table->vring0;
100010d4:	491c      	ldr	r1, [pc, #112]	; (10001148 <MX_OPENAMP_Init+0xb8>)
100010d6:	6888      	ldr	r0, [r1, #8]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
100010d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
                                   (void *)vring_rsc->da, shm_io,
100010da:	6b43      	ldr	r3, [r0, #52]	; 0x34
                                   vring_rsc->num, vring_rsc->align);
100010dc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
100010de:	6b80      	ldr	r0, [r0, #56]	; 0x38
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
100010e0:	9002      	str	r0, [sp, #8]
100010e2:	9501      	str	r5, [sp, #4]
100010e4:	6849      	ldr	r1, [r1, #4]
100010e6:	9100      	str	r1, [sp, #0]
100010e8:	2100      	movs	r1, #0
100010ea:	4620      	mov	r0, r4
100010ec:	f007 f80c 	bl	10008108 <rproc_virtio_init_vring>
  if (status != 0)
100010f0:	4605      	mov	r5, r0
100010f2:	2800      	cmp	r0, #0
100010f4:	d1d8      	bne.n	100010a8 <MX_OPENAMP_Init+0x18>
  vring_rsc = &rsc_table->vring1;
100010f6:	4814      	ldr	r0, [pc, #80]	; (10001148 <MX_OPENAMP_Init+0xb8>)
100010f8:	6881      	ldr	r1, [r0, #8]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
100010fa:	6d4a      	ldr	r2, [r1, #84]	; 0x54
                                   (void *)vring_rsc->da, shm_io,
100010fc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
                                   vring_rsc->num, vring_rsc->align);
100010fe:	6d0d      	ldr	r5, [r1, #80]	; 0x50
10001100:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
10001102:	9102      	str	r1, [sp, #8]
10001104:	9501      	str	r5, [sp, #4]
10001106:	6841      	ldr	r1, [r0, #4]
10001108:	9100      	str	r1, [sp, #0]
1000110a:	2101      	movs	r1, #1
1000110c:	4620      	mov	r0, r4
1000110e:	f006 fffb 	bl	10008108 <rproc_virtio_init_vring>
  if (status != 0)
10001112:	4605      	mov	r5, r0
10001114:	2800      	cmp	r0, #0
10001116:	d1c7      	bne.n	100010a8 <MX_OPENAMP_Init+0x18>
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
10001118:	4f0b      	ldr	r7, [pc, #44]	; (10001148 <MX_OPENAMP_Init+0xb8>)
1000111a:	f107 0810 	add.w	r8, r7, #16
1000111e:	4a0c      	ldr	r2, [pc, #48]	; (10001150 <MX_OPENAMP_Init+0xc0>)
10001120:	4b0c      	ldr	r3, [pc, #48]	; (10001154 <MX_OPENAMP_Init+0xc4>)
10001122:	1ad2      	subs	r2, r2, r3
10001124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
10001128:	4640      	mov	r0, r8
1000112a:	f007 fc34 	bl	10008996 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
1000112e:	f8cd 8000 	str.w	r8, [sp]
10001132:	687b      	ldr	r3, [r7, #4]
10001134:	4632      	mov	r2, r6
10001136:	4621      	mov	r1, r4
10001138:	f107 001c 	add.w	r0, r7, #28
1000113c:	f007 fc30 	bl	100089a0 <rpmsg_init_vdev>
  return 0;
10001140:	e7b2      	b.n	100010a8 <MX_OPENAMP_Init+0x18>
    return -1;
10001142:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
10001146:	e7af      	b.n	100010a8 <MX_OPENAMP_Init+0x18>
10001148:	10020a58 	.word	0x10020a58
1000114c:	10000f45 	.word	0x10000f45
10001150:	10048000 	.word	0x10048000
10001154:	10040000 	.word	0x10040000

10001158 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
10001158:	b510      	push	{r4, lr}
1000115a:	b084      	sub	sp, #16
  int ret = 0;
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
1000115c:	9c06      	ldr	r4, [sp, #24]
1000115e:	9402      	str	r4, [sp, #8]
10001160:	9301      	str	r3, [sp, #4]
10001162:	9200      	str	r2, [sp, #0]
10001164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10001168:	460a      	mov	r2, r1
1000116a:	4902      	ldr	r1, [pc, #8]	; (10001174 <OPENAMP_create_endpoint+0x1c>)
1000116c:	f007 f928 	bl	100083c0 <rpmsg_create_ept>

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
}
10001170:	b004      	add	sp, #16
10001172:	bd10      	pop	{r4, pc}
10001174:	10020a74 	.word	0x10020a74

10001178 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
10001178:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
1000117a:	4b03      	ldr	r3, [pc, #12]	; (10001188 <OPENAMP_check_for_message+0x10>)
1000117c:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
10001180:	f7ff fec2 	bl	10000f08 <MAILBOX_Poll>
}
10001184:	bd08      	pop	{r3, pc}
10001186:	bf00      	nop
10001188:	10020a58 	.word	0x10020a58

1000118c <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
1000118c:	b510      	push	{r4, lr}
1000118e:	4604      	mov	r4, r0
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
10001190:	e004      	b.n	1000119c <OPENAMP_Wait_EndPointready+0x10>
  {
    /* USER CODE BEGIN 0 */
	  //log_dbg("Waiting for endpoint %s to be ready\n", rp_ept->name);
    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
10001192:	4b07      	ldr	r3, [pc, #28]	; (100011b0 <OPENAMP_Wait_EndPointready+0x24>)
10001194:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
10001198:	f7ff feb6 	bl	10000f08 <MAILBOX_Poll>
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
	return ept && ept->rdev && ept->dest_addr != RPMSG_ADDR_ANY;
1000119c:	2c00      	cmp	r4, #0
1000119e:	d0f8      	beq.n	10001192 <OPENAMP_Wait_EndPointready+0x6>
100011a0:	6a23      	ldr	r3, [r4, #32]
100011a2:	2b00      	cmp	r3, #0
100011a4:	d0f5      	beq.n	10001192 <OPENAMP_Wait_EndPointready+0x6>
100011a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
100011a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
100011ac:	d0f1      	beq.n	10001192 <OPENAMP_Wait_EndPointready+0x6>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
100011ae:	bd10      	pop	{r4, pc}
100011b0:	10020a58 	.word	0x10020a58

100011b4 <log_buff>:
{
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
 static int offset = 0;

	if (offset + 1 >= SYSTEM_TRACE_BUF_SZ)
100011b4:	4b09      	ldr	r3, [pc, #36]	; (100011dc <log_buff+0x28>)
100011b6:	681a      	ldr	r2, [r3, #0]
100011b8:	f240 73fe 	movw	r3, #2046	; 0x7fe
100011bc:	429a      	cmp	r2, r3
100011be:	dd02      	ble.n	100011c6 <log_buff+0x12>
		offset = 0;
100011c0:	4b06      	ldr	r3, [pc, #24]	; (100011dc <log_buff+0x28>)
100011c2:	2200      	movs	r2, #0
100011c4:	601a      	str	r2, [r3, #0]

	system_log_buf[offset] = ch;
100011c6:	4b05      	ldr	r3, [pc, #20]	; (100011dc <log_buff+0x28>)
100011c8:	681a      	ldr	r2, [r3, #0]
100011ca:	1899      	adds	r1, r3, r2
100011cc:	7108      	strb	r0, [r1, #4]
	system_log_buf[offset++ + 1] = '\0';
100011ce:	3201      	adds	r2, #1
100011d0:	601a      	str	r2, [r3, #0]
100011d2:	4413      	add	r3, r2
100011d4:	2200      	movs	r2, #0
100011d6:	711a      	strb	r2, [r3, #4]
}
100011d8:	4770      	bx	lr
100011da:	bf00      	nop
100011dc:	10020b00 	.word	0x10020b00

100011e0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __attribute__(( weak )) fputc(int ch, FILE *f)
#endif /* __GNUC__ */

#if defined (__LOG_UART_IO_) || defined (__LOG_TRACE_IO_)
PUTCHAR_PROTOTYPE
{
100011e0:	b510      	push	{r4, lr}
100011e2:	4604      	mov	r4, r0
#if defined (__LOG_UART_IO_)
extern UART_HandleTypeDef huart;
  HAL_UART_Transmit(&huart, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
#endif
#if defined (__LOG_TRACE_IO_)
	log_buff(ch);
100011e4:	f7ff ffe6 	bl	100011b4 <log_buff>
#endif
	return ch;
}
100011e8:	4620      	mov	r0, r4
100011ea:	bd10      	pop	{r4, pc}

100011ec <resource_table_init>:
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
100011ec:	238c      	movs	r3, #140	; 0x8c
100011ee:	6013      	str	r3, [r2, #0]
  *table_ptr = (void *)&resource_table;
100011f0:	4b01      	ldr	r3, [pc, #4]	; (100011f8 <resource_table_init+0xc>)
100011f2:	600b      	str	r3, [r1, #0]
}
100011f4:	4770      	bx	lr
100011f6:	bf00      	nop
100011f8:	1002048c 	.word	0x1002048c

100011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100011fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
100011fe:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
10001202:	f44f 6300 	mov.w	r3, #2048	; 0x800
10001206:	f8c4 3aa0 	str.w	r3, [r4, #2720]	; 0xaa0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, RCC_WAKEUP_IRQ_PRIO, 0);
1000120a:	2200      	movs	r2, #0
1000120c:	4611      	mov	r1, r2
1000120e:	2091      	movs	r0, #145	; 0x91
10001210:	f001 fe92 	bl	10002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10001214:	2091      	movs	r0, #145	; 0x91
10001216:	f001 fec7 	bl	10002fa8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ENABLE_IT(RCC_IT_WKUP);
1000121a:	f8d4 3c14 	ldr.w	r3, [r4, #3092]	; 0xc14
1000121e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
10001222:	f8c4 3c14 	str.w	r3, [r4, #3092]	; 0xc14

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10001226:	bd10      	pop	{r4, pc}

10001228 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
10001228:	b508      	push	{r3, lr}

  if(hipcc->Instance==IPCC)
1000122a:	6802      	ldr	r2, [r0, #0]
1000122c:	4b09      	ldr	r3, [pc, #36]	; (10001254 <HAL_IPCC_MspInit+0x2c>)
1000122e:	429a      	cmp	r2, r3
10001230:	d000      	beq.n	10001234 <HAL_IPCC_MspInit+0xc>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
}

}
10001232:	bd08      	pop	{r3, pc}
    __HAL_RCC_IPCC_CLK_ENABLE();
10001234:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
1000123c:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
    HAL_NVIC_SetPriority(IPCC_RX1_IRQn, DEFAULT_IRQ_PRIO, 0);
10001240:	2200      	movs	r2, #0
10001242:	2101      	movs	r1, #1
10001244:	2067      	movs	r0, #103	; 0x67
10001246:	f001 fe77 	bl	10002f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_RX1_IRQn);
1000124a:	2067      	movs	r0, #103	; 0x67
1000124c:	f001 feac 	bl	10002fa8 <HAL_NVIC_EnableIRQ>
}
10001250:	e7ef      	b.n	10001232 <HAL_IPCC_MspInit+0xa>
10001252:	bf00      	nop
10001254:	4c001000 	.word	0x4c001000

10001258 <HAL_DAC_MspInit>:
}

void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{

  if(hdac->Instance==DAC1)
10001258:	6802      	ldr	r2, [r0, #0]
1000125a:	4b05      	ldr	r3, [pc, #20]	; (10001270 <HAL_DAC_MspInit+0x18>)
1000125c:	429a      	cmp	r2, r3
1000125e:	d000      	beq.n	10001262 <HAL_DAC_MspInit+0xa>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
10001260:	4770      	bx	lr
    __HAL_RCC_DAC12_CLK_ENABLE();
10001262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001266:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
1000126a:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80
}
1000126e:	e7f7      	b.n	10001260 <HAL_DAC_MspInit+0x8>
10001270:	40017000 	.word	0x40017000

10001274 <HAL_ADC_MspInit>:
  *          - Configure the NVIC associated to the peripheral interruptions
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
10001274:	b500      	push	{lr}
10001276:	b0d7      	sub	sp, #348	; 0x15c
  //static DMA_HandleTypeDef  DmaHandle;
  RCC_PeriphCLKInitTypeDef  PeriphClkInit;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable clock of GPIO associated to the peripheral channels */
  ADCx_CHANNELa_GPIO_CLK_ENABLE();
10001278:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000127c:	2201      	movs	r2, #1
1000127e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  /* Enable clock of ADCx peripheral (core clock) */
  ADCx_CLK_ENABLE();
10001282:	2220      	movs	r2, #32
10001284:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
  /* Caution: On STM32MP15, ADC clock frequency max is 36MHz (refer to device   */
  /*          datasheet).                                                     */
  /*          Therefore, ADC clock prescaler must be configured in function   */
  /*          of ADC clock source frequency to remain below this maximum      */
  /*          frequency.                                                      */
  if(IS_ENGINEERING_BOOT_MODE())
10001288:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
1000128c:	681b      	ldr	r3, [r3, #0]
1000128e:	f003 0307 	and.w	r3, r3, #7
10001292:	2b04      	cmp	r3, #4
10001294:	d00a      	beq.n	100012ac <HAL_ADC_MspInit+0x38>
  
  /*##-4- Configure the NVIC #################################################*/
  /* NVIC configuration for ADC interrupt */
  /* Priority: high-priority */
  /* Lower priority than EXTI14 */
  HAL_NVIC_SetPriority(ADCx_IRQn, DEFAULT_IRQ_PRIO + 1U, 0);
10001296:	2200      	movs	r2, #0
10001298:	2102      	movs	r1, #2
1000129a:	205a      	movs	r0, #90	; 0x5a
1000129c:	f001 fe4c 	bl	10002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_IRQn);
100012a0:	205a      	movs	r0, #90	; 0x5a
100012a2:	f001 fe81 	bl	10002fa8 <HAL_NVIC_EnableIRQ>
  /* NVIC configuration for DMA interrupt (transfer completion or error) */
  /* Priority: high-priority */
  // The DMA_IRQ_Handler has been commented, remember to uncomment it if you need it
  //HAL_NVIC_SetPriority(ADCx_DMA_IRQn, DEFAULT_IRQ_PRIO, 0);
  //HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
}
100012a6:	b057      	add	sp, #348	; 0x15c
100012a8:	f85d fb04 	ldr.w	pc, [sp], #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
100012ac:	2208      	movs	r2, #8
100012ae:	2300      	movs	r3, #0
100012b0:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PER;
100012b4:	2301      	movs	r3, #1
100012b6:	9351      	str	r3, [sp, #324]	; 0x144
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
100012b8:	4668      	mov	r0, sp
100012ba:	f004 fc5b 	bl	10005b74 <HAL_RCCEx_PeriphCLKConfig>
100012be:	e7ea      	b.n	10001296 <HAL_ADC_MspInit+0x22>

100012c0 <HAL_ADC_MspDeInit>:
  *          - Revert NVIC associated to the peripheral interruptions to its default state
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
{
100012c0:	b510      	push	{r4, lr}
  /*##-1- Reset peripherals ##################################################*/
  ADCx_FORCE_RESET();
100012c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012c6:	2220      	movs	r2, #32
100012c8:	f8c3 2998 	str.w	r2, [r3, #2456]	; 0x998
  ADCx_RELEASE_RESET();
100012cc:	f8c3 299c 	str.w	r2, [r3, #2460]	; 0x99c
  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* De-initialize GPIO pin of the selected ADC channel */
  PERIPH_LOCK(ADCx_CHANNELa_GPIO_PORT);
100012d0:	4c07      	ldr	r4, [pc, #28]	; (100012f0 <HAL_ADC_MspDeInit+0x30>)
100012d2:	2164      	movs	r1, #100	; 0x64
100012d4:	4620      	mov	r0, r4
100012d6:	f7fe ff9d 	bl	10000214 <Periph_Lock>
  HAL_GPIO_DeInit(ADCx_CHANNELa_GPIO_PORT, ADCx_CHANNELa_PIN);
100012da:	2110      	movs	r1, #16
100012dc:	4620      	mov	r0, r4
100012de:	f002 f997 	bl	10003610 <HAL_GPIO_DeInit>
  PERIPH_UNLOCK(ADCx_CHANNELa_GPIO_PORT);
100012e2:	4620      	mov	r0, r4
100012e4:	f7fe fffe 	bl	100002e4 <Periph_Unlock>
    HAL_DMA_DeInit(hadc->DMA_Handle);
  }*/

  /*##-4- Disable the NVIC ###################################################*/
  /* Disable the NVIC configuration for ADC interrupt */
  HAL_NVIC_DisableIRQ(ADCx_IRQn);
100012e8:	205a      	movs	r0, #90	; 0x5a
100012ea:	f001 fe6b 	bl	10002fc4 <HAL_NVIC_DisableIRQ>
  
  /* Disable the NVIC configuration for DMA interrupt */
  //HAL_NVIC_DisableIRQ(ADCx_DMA_IRQn);
  
}
100012ee:	bd10      	pop	{r4, pc}
100012f0:	50002000 	.word	0x50002000

100012f4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
100012f4:	4770      	bx	lr

100012f6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100012f6:	e7fe      	b.n	100012f6 <HardFault_Handler>

100012f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
100012f8:	e7fe      	b.n	100012f8 <MemManage_Handler>

100012fa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
100012fa:	e7fe      	b.n	100012fa <BusFault_Handler>

100012fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
100012fc:	e7fe      	b.n	100012fc <UsageFault_Handler>

100012fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100012fe:	4770      	bx	lr

10001300 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10001300:	4770      	bx	lr

10001302 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10001302:	4770      	bx	lr

10001304 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
10001304:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10001306:	f000 fb8b 	bl	10001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1000130a:	bd08      	pop	{r3, pc}

1000130c <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
1000130c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
1000130e:	f004 f8e6 	bl	100054de <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10001312:	bd08      	pop	{r3, pc}

10001314 <IPCC_RX1_IRQHandler>:

/**
  * @brief This function handles IPCC RX1 occupied interrupt.
  */
void IPCC_RX1_IRQHandler(void)
{
10001314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IPCC_RX1_IRQn 0 */
  log_dbg("%s: IT RX1\r\n", __func__);
  /* USER CODE END IPCC_RX1_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
10001316:	4802      	ldr	r0, [pc, #8]	; (10001320 <IPCC_RX1_IRQHandler+0xc>)
10001318:	f002 fef0 	bl	100040fc <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_RX1_IRQn 1 */
}
1000131c:	bd08      	pop	{r3, pc}
1000131e:	bf00      	nop
10001320:	10020950 	.word	0x10020950

10001324 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
10001324:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
10001326:	4802      	ldr	r0, [pc, #8]	; (10001330 <TIM2_IRQHandler+0xc>)
10001328:	f006 fa85 	bl	10007836 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
1000132c:	bd08      	pop	{r3, pc}
1000132e:	bf00      	nop
10001330:	10020a0c 	.word	0x10020a0c

10001334 <ADC2_IRQHandler>:
  * @brief  This function handles ADC interrupt request.
  * @param  None
  * @retval None
  */
void ADCx_IRQHandler(void)
{
10001334:	b508      	push	{r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
10001336:	4802      	ldr	r0, [pc, #8]	; (10001340 <ADC2_IRQHandler+0xc>)
10001338:	f000 fbd2 	bl	10001ae0 <HAL_ADC_IRQHandler>
}
1000133c:	bd08      	pop	{r3, pc}
1000133e:	bf00      	nop
10001340:	100208c4 	.word	0x100208c4

10001344 <EXTI14_IRQHandler>:
  * @brief  This function handles external line 14 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI14_IRQHandler(void)
{
10001344:	b508      	push	{r3, lr}
  HAL_EXTI_IRQHandler(&hexti14);
10001346:	4802      	ldr	r0, [pc, #8]	; (10001350 <EXTI14_IRQHandler+0xc>)
10001348:	f002 f852 	bl	100033f0 <HAL_EXTI_IRQHandler>
}
1000134c:	bd08      	pop	{r3, pc}
1000134e:	bf00      	nop
10001350:	10020544 	.word	0x10020544

10001354 <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
10001354:	b508      	push	{r3, lr}
  int32_t  status = BSP_ERROR_NONE;
  if((Led == LED5) || (Led == LED6))
10001356:	2801      	cmp	r0, #1
10001358:	d905      	bls.n	10001366 <BSP_LED_On+0x12>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
  }
  else if ((Led == LED7) || (Led == LED8))
1000135a:	1e83      	subs	r3, r0, #2
1000135c:	b2db      	uxtb	r3, r3
1000135e:	2b01      	cmp	r3, #1
10001360:	d90c      	bls.n	1000137c <BSP_LED_On+0x28>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
  }
  return status;
}
10001362:	2000      	movs	r0, #0
10001364:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
10001366:	4b0b      	ldr	r3, [pc, #44]	; (10001394 <BSP_LED_On+0x40>)
10001368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
1000136c:	2200      	movs	r2, #0
1000136e:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
10001372:	f8dc 0010 	ldr.w	r0, [ip, #16]
10001376:	f002 f9ff 	bl	10003778 <HAL_GPIO_WritePin>
1000137a:	e7f2      	b.n	10001362 <BSP_LED_On+0xe>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
1000137c:	4b05      	ldr	r3, [pc, #20]	; (10001394 <BSP_LED_On+0x40>)
1000137e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
10001382:	2201      	movs	r2, #1
10001384:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
10001388:	f8dc 0010 	ldr.w	r0, [ip, #16]
1000138c:	f002 f9f4 	bl	10003778 <HAL_GPIO_WritePin>
10001390:	e7e7      	b.n	10001362 <BSP_LED_On+0xe>
10001392:	bf00      	nop
10001394:	1000a13c 	.word	0x1000a13c

10001398 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
10001398:	b508      	push	{r3, lr}
  int32_t  status = BSP_ERROR_NONE;
  if((Led == LED5) || (Led == LED6))
1000139a:	2801      	cmp	r0, #1
1000139c:	d905      	bls.n	100013aa <BSP_LED_Off+0x12>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
  }
  else if ((Led == LED7) || (Led == LED8))
1000139e:	1e83      	subs	r3, r0, #2
100013a0:	b2db      	uxtb	r3, r3
100013a2:	2b01      	cmp	r3, #1
100013a4:	d90c      	bls.n	100013c0 <BSP_LED_Off+0x28>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
  }

  return status;
}
100013a6:	2000      	movs	r0, #0
100013a8:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
100013aa:	4b0b      	ldr	r3, [pc, #44]	; (100013d8 <BSP_LED_Off+0x40>)
100013ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
100013b0:	2201      	movs	r2, #1
100013b2:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
100013b6:	f8dc 0010 	ldr.w	r0, [ip, #16]
100013ba:	f002 f9dd 	bl	10003778 <HAL_GPIO_WritePin>
100013be:	e7f2      	b.n	100013a6 <BSP_LED_Off+0xe>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
100013c0:	4b05      	ldr	r3, [pc, #20]	; (100013d8 <BSP_LED_Off+0x40>)
100013c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
100013c6:	2200      	movs	r2, #0
100013c8:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
100013cc:	f8dc 0010 	ldr.w	r0, [ip, #16]
100013d0:	f002 f9d2 	bl	10003778 <HAL_GPIO_WritePin>
100013d4:	e7e7      	b.n	100013a6 <BSP_LED_Off+0xe>
100013d6:	bf00      	nop
100013d8:	1000a13c 	.word	0x1000a13c

100013dc <BSP_LED_Init>:
{
100013dc:	b530      	push	{r4, r5, lr}
100013de:	b087      	sub	sp, #28
  if(Led == LED6)
100013e0:	4604      	mov	r4, r0
100013e2:	bb08      	cbnz	r0, 10001428 <BSP_LED_Init+0x4c>
    LED6_GPIO_CLK_ENABLE();
100013e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013e8:	2201      	movs	r2, #1
100013ea:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  gpio_init_structure.Pin = LED_PIN[Led];
100013ee:	4b1a      	ldr	r3, [pc, #104]	; (10001458 <BSP_LED_Init+0x7c>)
100013f0:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
100013f4:	9201      	str	r2, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
100013f6:	2201      	movs	r2, #1
100013f8:	9202      	str	r2, [sp, #8]
  gpio_init_structure.Pull = GPIO_PULLUP;
100013fa:	9203      	str	r2, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
100013fc:	2203      	movs	r2, #3
100013fe:	9204      	str	r2, [sp, #16]
  BSP_ENTER_CRITICAL_SECTION(LED_PORT[Led]);
10001400:	eb03 0384 	add.w	r3, r3, r4, lsl #2
10001404:	691d      	ldr	r5, [r3, #16]
10001406:	2164      	movs	r1, #100	; 0x64
10001408:	4628      	mov	r0, r5
1000140a:	f7fe ff03 	bl	10000214 <Periph_Lock>
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
1000140e:	a901      	add	r1, sp, #4
10001410:	4628      	mov	r0, r5
10001412:	f002 f80d 	bl	10003430 <HAL_GPIO_Init>
  BSP_EXIT_CRITICAL_SECTION(LED_PORT[Led]);
10001416:	4628      	mov	r0, r5
10001418:	f7fe ff64 	bl	100002e4 <Periph_Unlock>
  BSP_LED_Off(Led);
1000141c:	4620      	mov	r0, r4
1000141e:	f7ff ffbb 	bl	10001398 <BSP_LED_Off>
}
10001422:	2000      	movs	r0, #0
10001424:	b007      	add	sp, #28
10001426:	bd30      	pop	{r4, r5, pc}
  else if (Led == LED5)
10001428:	2801      	cmp	r0, #1
1000142a:	d009      	beq.n	10001440 <BSP_LED_Init+0x64>
  else if (Led == LED7)
1000142c:	2802      	cmp	r0, #2
1000142e:	d00d      	beq.n	1000144c <BSP_LED_Init+0x70>
  else if (Led == LED8)
10001430:	2803      	cmp	r0, #3
10001432:	d1dc      	bne.n	100013ee <BSP_LED_Init+0x12>
    LED8_GPIO_CLK_ENABLE();
10001434:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001438:	2208      	movs	r2, #8
1000143a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
1000143e:	e7d6      	b.n	100013ee <BSP_LED_Init+0x12>
    LED5_GPIO_CLK_ENABLE();
10001440:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001444:	2201      	movs	r2, #1
10001446:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
1000144a:	e7d0      	b.n	100013ee <BSP_LED_Init+0x12>
    LED7_GPIO_CLK_ENABLE();
1000144c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001450:	2280      	movs	r2, #128	; 0x80
10001452:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
10001456:	e7ca      	b.n	100013ee <BSP_LED_Init+0x12>
10001458:	1000a13c 	.word	0x1000a13c

1000145c <BSP_LED_DeInit>:
{
1000145c:	b530      	push	{r4, r5, lr}
1000145e:	b087      	sub	sp, #28
10001460:	4604      	mov	r4, r0
  BSP_LED_Off(Led);
10001462:	f7ff ff99 	bl	10001398 <BSP_LED_Off>
  gpio_init_structure.Pin = LED_PIN[Led];
10001466:	4b0a      	ldr	r3, [pc, #40]	; (10001490 <BSP_LED_DeInit+0x34>)
10001468:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
1000146c:	9501      	str	r5, [sp, #4]
  BSP_ENTER_CRITICAL_SECTION(LED_PORT[Led]);
1000146e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
10001472:	691c      	ldr	r4, [r3, #16]
10001474:	2164      	movs	r1, #100	; 0x64
10001476:	4620      	mov	r0, r4
10001478:	f7fe fecc 	bl	10000214 <Periph_Lock>
  HAL_GPIO_DeInit(LED_PORT[Led], gpio_init_structure.Pin);
1000147c:	4629      	mov	r1, r5
1000147e:	4620      	mov	r0, r4
10001480:	f002 f8c6 	bl	10003610 <HAL_GPIO_DeInit>
  BSP_EXIT_CRITICAL_SECTION(LED_PORT[Led]);
10001484:	4620      	mov	r0, r4
10001486:	f7fe ff2d 	bl	100002e4 <Periph_Unlock>
}
1000148a:	2000      	movs	r0, #0
1000148c:	b007      	add	sp, #28
1000148e:	bd30      	pop	{r4, r5, pc}
10001490:	1000a13c 	.word	0x1000a13c

10001494 <BSP_LED_Toggle>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
10001494:	b508      	push	{r3, lr}
  int32_t  status = BSP_ERROR_NONE;
  /* Toggle GPIO Led Pin */
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
10001496:	4b05      	ldr	r3, [pc, #20]	; (100014ac <BSP_LED_Toggle+0x18>)
10001498:	eb03 0280 	add.w	r2, r3, r0, lsl #2
1000149c:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
100014a0:	6910      	ldr	r0, [r2, #16]
100014a2:	f002 f96f 	bl	10003784 <HAL_GPIO_TogglePin>
  return status;
}
100014a6:	2000      	movs	r0, #0
100014a8:	bd08      	pop	{r3, pc}
100014aa:	bf00      	nop
100014ac:	1000a13c 	.word	0x1000a13c

100014b0 <BSP_PB_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
100014b0:	4770      	bx	lr

100014b2 <BUTTON_USER2_EXTI_Callback>:
{
100014b2:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER2);
100014b4:	2002      	movs	r0, #2
100014b6:	f7ff fffb 	bl	100014b0 <BSP_PB_Callback>
}
100014ba:	bd08      	pop	{r3, pc}

100014bc <BUTTON_USER_EXTI_Callback>:
{
100014bc:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
100014be:	2001      	movs	r0, #1
100014c0:	f7ff fff6 	bl	100014b0 <BSP_PB_Callback>
}
100014c4:	bd08      	pop	{r3, pc}

100014c6 <BUTTON_WAKEUP_EXTI_Callback>:
{
100014c6:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
100014c8:	2000      	movs	r0, #0
100014ca:	f7ff fff1 	bl	100014b0 <BSP_PB_Callback>
}
100014ce:	bd08      	pop	{r3, pc}

100014d0 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c : I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *hI2c)
{
100014d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100014d4:	b0dc      	sub	sp, #368	; 0x170
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  DISCO_I2C4_GPIO_CLK_ENABLE();
100014d6:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
100014da:	f04f 0801 	mov.w	r8, #1
100014de:	f8c5 8290 	str.w	r8, [r5, #656]	; 0x290
  
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C4_SCL_PIN;
100014e2:	2310      	movs	r3, #16
100014e4:	9357      	str	r3, [sp, #348]	; 0x15c
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
100014e6:	2312      	movs	r3, #18
100014e8:	9358      	str	r3, [sp, #352]	; 0x160
  gpio_init_structure.Pull = GPIO_NOPULL;
100014ea:	2600      	movs	r6, #0
100014ec:	9659      	str	r6, [sp, #356]	; 0x164
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
100014ee:	2702      	movs	r7, #2
100014f0:	975a      	str	r7, [sp, #360]	; 0x168
  gpio_init_structure.Alternate = DISCO_I2C4_SCL_SDA_AF;
100014f2:	2306      	movs	r3, #6
100014f4:	935b      	str	r3, [sp, #364]	; 0x16c
  BSP_ENTER_CRITICAL_SECTION(DISCO_I2C4_SCL_SDA_GPIO_PORT);
100014f6:	4c1d      	ldr	r4, [pc, #116]	; (1000156c <I2C4_MspInit+0x9c>)
100014f8:	2164      	movs	r1, #100	; 0x64
100014fa:	4620      	mov	r0, r4
100014fc:	f7fe fe8a 	bl	10000214 <Periph_Lock>
  HAL_GPIO_Init(DISCO_I2C4_SCL_SDA_GPIO_PORT, &gpio_init_structure);
10001500:	a957      	add	r1, sp, #348	; 0x15c
10001502:	4620      	mov	r0, r4
10001504:	f001 ff94 	bl	10003430 <HAL_GPIO_Init>
  BSP_EXIT_CRITICAL_SECTION(DISCO_I2C4_SCL_SDA_GPIO_PORT);
10001508:	4620      	mov	r0, r4
1000150a:	f7fe feeb 	bl	100002e4 <Periph_Unlock>
  
  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C4_SDA_PIN;
1000150e:	2320      	movs	r3, #32
10001510:	9357      	str	r3, [sp, #348]	; 0x15c
  BSP_ENTER_CRITICAL_SECTION(DISCO_I2C4_SCL_SDA_GPIO_PORT);
10001512:	2164      	movs	r1, #100	; 0x64
10001514:	4620      	mov	r0, r4
10001516:	f7fe fe7d 	bl	10000214 <Periph_Lock>
  HAL_GPIO_Init(DISCO_I2C4_SCL_SDA_GPIO_PORT, &gpio_init_structure);
1000151a:	a957      	add	r1, sp, #348	; 0x15c
1000151c:	4620      	mov	r0, r4
1000151e:	f001 ff87 	bl	10003430 <HAL_GPIO_Init>
  BSP_EXIT_CRITICAL_SECTION(DISCO_I2C4_SCL_SDA_GPIO_PORT);
10001522:	4620      	mov	r0, r4
10001524:	f7fe fede 	bl	100002e4 <Periph_Unlock>
  
  /* Enable I2C clock */
  DISCO_I2C4_CLK_ENABLE();
10001528:	2304      	movs	r3, #4
1000152a:	f8c5 3288 	str.w	r3, [r5, #648]	; 0x288
  
  /* Force the I2C peripheral clock reset */  
  DISCO_I2C4_FORCE_RESET();
1000152e:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
  
  /* Release the I2C peripheral clock reset */  
  DISCO_I2C4_RELEASE_RESET();
10001532:	f8c5 318c 	str.w	r3, [r5, #396]	; 0x18c
  
  /*** Configure the I2C peripheral clock ***/ 
  I2C4_clock_source_config.I2c46ClockSelection = RCC_I2C46CLKSOURCE_HSI;
10001536:	9731      	str	r7, [sp, #196]	; 0xc4
  I2C4_clock_source_config.PeriphClockSelection = RCC_PERIPHCLK_I2C46;
10001538:	2200      	movs	r2, #0
1000153a:	2320      	movs	r3, #32
1000153c:	e9cd 2300 	strd	r2, r3, [sp]
  HAL_RCCEx_PeriphCLKConfig(&I2C4_clock_source_config); 
10001540:	4668      	mov	r0, sp
10001542:	f004 fb17 	bl	10005b74 <HAL_RCCEx_PeriphCLKConfig>
  IRQ_SetPriority(I2C4_ER_IRQn, 0);
  IRQ_Enable(I2C4_ER_IRQn);
  IRQ_SetPriority(I2C4_EV_IRQn, 0);
  IRQ_Enable(I2C4_EV_IRQn);
#elif defined(CORE_CM4)
  HAL_NVIC_SetPriority(DISCO_I2C4_ER_IRQn, 0, 1);
10001546:	4642      	mov	r2, r8
10001548:	4631      	mov	r1, r6
1000154a:	2060      	movs	r0, #96	; 0x60
1000154c:	f001 fcf4 	bl	10002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C4_ER_IRQn);
10001550:	2060      	movs	r0, #96	; 0x60
10001552:	f001 fd29 	bl	10002fa8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCO_I2C4_EV_IRQn, 0, 2);
10001556:	463a      	mov	r2, r7
10001558:	4631      	mov	r1, r6
1000155a:	205f      	movs	r0, #95	; 0x5f
1000155c:	f001 fcec 	bl	10002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C4_EV_IRQn);
10001560:	205f      	movs	r0, #95	; 0x5f
10001562:	f001 fd21 	bl	10002fa8 <HAL_NVIC_EnableIRQ>
#endif
}
10001566:	b05c      	add	sp, #368	; 0x170
10001568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000156c:	54004000 	.word	0x54004000

10001570 <I2C4_WriteReg>:
  * @param  pData      The target register values to be written.
  * @param  Length     data length in bytes.
  * @retval BSP status.
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{  
10001570:	b510      	push	{r4, lr}
10001572:	b084      	sub	sp, #16
  int32_t status = BSP_ERROR_BUS_FAILURE;

  if(HAL_I2C_Mem_Write(&hI2c4, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
10001574:	f242 7410 	movw	r4, #10000	; 0x2710
10001578:	9402      	str	r4, [sp, #8]
1000157a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
1000157e:	9401      	str	r4, [sp, #4]
10001580:	9300      	str	r3, [sp, #0]
10001582:	4613      	mov	r3, r2
10001584:	460a      	mov	r2, r1
10001586:	4601      	mov	r1, r0
10001588:	4804      	ldr	r0, [pc, #16]	; (1000159c <I2C4_WriteReg+0x2c>)
1000158a:	f002 fb36 	bl	10003bfa <HAL_I2C_Mem_Write>
1000158e:	b910      	cbnz	r0, 10001596 <I2C4_WriteReg+0x26>
  {
    status = BSP_ERROR_NONE;
10001590:	2000      	movs	r0, #0
  }
  
  return status;
}
10001592:	b004      	add	sp, #16
10001594:	bd10      	pop	{r4, pc}
  int32_t status = BSP_ERROR_BUS_FAILURE;
10001596:	f06f 0007 	mvn.w	r0, #7
1000159a:	e7fa      	b.n	10001592 <I2C4_WriteReg+0x22>
1000159c:	10021304 	.word	0x10021304

100015a0 <I2C4_ReadReg>:
  * @param  pData      The target register values to be read.
  * @param  Length     data length in bytes.
  * @retval BSP status.
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{  
100015a0:	b510      	push	{r4, lr}
100015a2:	b084      	sub	sp, #16
  int32_t status = BSP_ERROR_BUS_FAILURE;

  if (HAL_I2C_Mem_Read(&hI2c4, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
100015a4:	f242 7410 	movw	r4, #10000	; 0x2710
100015a8:	9402      	str	r4, [sp, #8]
100015aa:	f8bd 4018 	ldrh.w	r4, [sp, #24]
100015ae:	9401      	str	r4, [sp, #4]
100015b0:	9300      	str	r3, [sp, #0]
100015b2:	4613      	mov	r3, r2
100015b4:	460a      	mov	r2, r1
100015b6:	4601      	mov	r1, r0
100015b8:	4804      	ldr	r0, [pc, #16]	; (100015cc <I2C4_ReadReg+0x2c>)
100015ba:	f002 fbf3 	bl	10003da4 <HAL_I2C_Mem_Read>
100015be:	b910      	cbnz	r0, 100015c6 <I2C4_ReadReg+0x26>
  {
	status = BSP_ERROR_NONE;
100015c0:	2000      	movs	r0, #0
  }
  
  return status;
}
100015c2:	b004      	add	sp, #16
100015c4:	bd10      	pop	{r4, pc}
  int32_t status = BSP_ERROR_BUS_FAILURE;
100015c6:	f06f 0007 	mvn.w	r0, #7
100015ca:	e7fa      	b.n	100015c2 <I2C4_ReadReg+0x22>
100015cc:	10021304 	.word	0x10021304

100015d0 <MX_I2C4_Init>:
{
100015d0:	b508      	push	{r3, lr}
  hI2c4.Instance              = DISCO_I2C4;
100015d2:	4a09      	ldr	r2, [pc, #36]	; (100015f8 <MX_I2C4_Init+0x28>)
100015d4:	4909      	ldr	r1, [pc, #36]	; (100015fc <MX_I2C4_Init+0x2c>)
100015d6:	6011      	str	r1, [r2, #0]
  hI2c->Init.Timing           = DISCO_I2C4_TIMING;
100015d8:	4a09      	ldr	r2, [pc, #36]	; (10001600 <MX_I2C4_Init+0x30>)
100015da:	6042      	str	r2, [r0, #4]
  hI2c->Init.OwnAddress1      = STPMU1_I2C_ADDRESS;
100015dc:	2266      	movs	r2, #102	; 0x66
100015de:	6082      	str	r2, [r0, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
100015e0:	2201      	movs	r2, #1
100015e2:	60c2      	str	r2, [r0, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
100015e4:	2200      	movs	r2, #0
100015e6:	6102      	str	r2, [r0, #16]
  hI2c->Init.OwnAddress2      = 0;
100015e8:	6142      	str	r2, [r0, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
100015ea:	6182      	str	r2, [r0, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
100015ec:	61c2      	str	r2, [r0, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
100015ee:	6202      	str	r2, [r0, #32]
  return HAL_I2C_Init(hI2c);
100015f0:	f002 faa5 	bl	10003b3e <HAL_I2C_Init>
}
100015f4:	bd08      	pop	{r3, pc}
100015f6:	bf00      	nop
100015f8:	10021304 	.word	0x10021304
100015fc:	5c002000 	.word	0x5c002000
10001600:	10805e89 	.word	0x10805e89

10001604 <BSP_I2C4_Init>:
{
10001604:	b510      	push	{r4, lr}
  if(HAL_I2C_GetState(&hI2c4) == HAL_I2C_STATE_RESET)
10001606:	4809      	ldr	r0, [pc, #36]	; (1000162c <BSP_I2C4_Init+0x28>)
10001608:	f002 fd5a 	bl	100040c0 <HAL_I2C_GetState>
1000160c:	b108      	cbz	r0, 10001612 <BSP_I2C4_Init+0xe>
  int32_t status = BSP_ERROR_NONE;
1000160e:	2000      	movs	r0, #0
}
10001610:	bd10      	pop	{r4, pc}
    I2C4_MspInit(&hI2c4);
10001612:	4c06      	ldr	r4, [pc, #24]	; (1000162c <BSP_I2C4_Init+0x28>)
10001614:	4620      	mov	r0, r4
10001616:	f7ff ff5b 	bl	100014d0 <I2C4_MspInit>
    if( MX_I2C4_Init(&hI2c4) != HAL_OK)
1000161a:	4620      	mov	r0, r4
1000161c:	f7ff ffd8 	bl	100015d0 <MX_I2C4_Init>
10001620:	2800      	cmp	r0, #0
10001622:	d0f5      	beq.n	10001610 <BSP_I2C4_Init+0xc>
        status = BSP_ERROR_BUS_FAILURE;
10001624:	f06f 0007 	mvn.w	r0, #7
  return status;
10001628:	e7f2      	b.n	10001610 <BSP_I2C4_Init+0xc>
1000162a:	bf00      	nop
1000162c:	10021304 	.word	0x10021304

10001630 <BSP_I2C4_WriteReg>:
{
10001630:	b500      	push	{lr}
10001632:	b083      	sub	sp, #12
  return I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
10001634:	9300      	str	r3, [sp, #0]
10001636:	4613      	mov	r3, r2
10001638:	2201      	movs	r2, #1
1000163a:	f7ff ff99 	bl	10001570 <I2C4_WriteReg>
}
1000163e:	b003      	add	sp, #12
10001640:	f85d fb04 	ldr.w	pc, [sp], #4

10001644 <BSP_I2C4_ReadReg>:
{
10001644:	b500      	push	{lr}
10001646:	b083      	sub	sp, #12
  return I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
10001648:	9300      	str	r3, [sp, #0]
1000164a:	4613      	mov	r3, r2
1000164c:	2201      	movs	r2, #1
1000164e:	f7ff ffa7 	bl	100015a0 <I2C4_ReadReg>
}
10001652:	b003      	add	sp, #12
10001654:	f85d fb04 	ldr.w	pc, [sp], #4

10001658 <BSP_I2C4_IsReady>:
{
10001658:	b508      	push	{r3, lr}
1000165a:	460a      	mov	r2, r1
  if(HAL_I2C_IsDeviceReady(&hI2c4, DevAddr, Trials, 1000) != HAL_OK)
1000165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
10001660:	4601      	mov	r1, r0
10001662:	4804      	ldr	r0, [pc, #16]	; (10001674 <BSP_I2C4_IsReady+0x1c>)
10001664:	f002 fc76 	bl	10003f54 <HAL_I2C_IsDeviceReady>
10001668:	b900      	cbnz	r0, 1000166c <BSP_I2C4_IsReady+0x14>
}
1000166a:	bd08      	pop	{r3, pc}
    status = BSP_ERROR_BUSY;
1000166c:	f06f 0002 	mvn.w	r0, #2
  return status;
10001670:	e7fb      	b.n	1000166a <BSP_I2C4_IsReady+0x12>
10001672:	bf00      	nop
10001674:	10021304 	.word	0x10021304

10001678 <BSP_PMIC_MspInit>:
 *
 */


static uint32_t BSP_PMIC_MspInit(I2C_HandleTypeDef *hi2c)
{
10001678:	b530      	push	{r4, r5, lr}
1000167a:	b087      	sub	sp, #28
  uint32_t  status = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Configure the I2C clock source, GPIO and Interrupt #*/
  BSP_I2C4_Init();
1000167c:	f7ff ffc2 	bl	10001604 <BSP_I2C4_Init>

  /*##-2- Configure PMIC GPIOs Interface ########################################*/

  /* INTn - Interrupt Line - Active Low (Falling Edge) */
  PMIC_INTn_CLK_ENABLE();
10001680:	2301      	movs	r3, #1
10001682:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001686:	f8c2 3aa8 	str.w	r3, [r2, #2728]	; 0xaa8
  GPIO_InitStruct.Pin       = PMIC_INTn_PIN;
1000168a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
1000168c:	4a0e      	ldr	r2, [pc, #56]	; (100016c8 <BSP_PMIC_MspInit+0x50>)
1000168e:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Pull      = GPIO_PULLUP; //GPIO_NOPULL;
10001690:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
10001692:	2302      	movs	r3, #2
10001694:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Alternate = 0 ;
10001696:	2400      	movs	r4, #0
10001698:	9405      	str	r4, [sp, #20]
  BSP_ENTER_CRITICAL_SECTION(PMIC_INTn_PORT);
1000169a:	4d0c      	ldr	r5, [pc, #48]	; (100016cc <BSP_PMIC_MspInit+0x54>)
1000169c:	2164      	movs	r1, #100	; 0x64
1000169e:	4628      	mov	r0, r5
100016a0:	f7fe fdb8 	bl	10000214 <Periph_Lock>
  HAL_GPIO_Init(PMIC_INTn_PORT, &GPIO_InitStruct);
100016a4:	a901      	add	r1, sp, #4
100016a6:	4628      	mov	r0, r5
100016a8:	f001 fec2 	bl	10003430 <HAL_GPIO_Init>
  BSP_EXIT_CRITICAL_SECTION(PMIC_INTn_PORT);
100016ac:	4628      	mov	r0, r5
100016ae:	f7fe fe19 	bl	100002e4 <Periph_Unlock>
  /* Enable and set INTn EXTI Interrupt  */
#if defined(CORE_CA7)
  IRQ_SetPriority(EXTI0_IRQn, 0);
  IRQ_Enable(EXTI0_IRQn);
#elif defined(CORE_CM4)
  HAL_NVIC_SetPriority(EXTI0_IRQn, BSP_PMU1_IT_PRIORITY, 0x00);
100016b2:	4622      	mov	r2, r4
100016b4:	2103      	movs	r1, #3
100016b6:	2006      	movs	r0, #6
100016b8:	f001 fc3e 	bl	10002f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
100016bc:	2006      	movs	r0, #6
100016be:	f001 fc73 	bl	10002fa8 <HAL_NVIC_EnableIRQ>
#endif

  return status;
}
100016c2:	4620      	mov	r0, r4
100016c4:	b007      	add	sp, #28
100016c6:	bd30      	pop	{r4, r5, pc}
100016c8:	10210000 	.word	0x10210000
100016cc:	50002000 	.word	0x50002000

100016d0 <BSP_Error_Handler>:
{
100016d0:	b508      	push	{r3, lr}
  BSP_LED_Init(LED_RED);
100016d2:	2000      	movs	r0, #0
100016d4:	f7ff fe82 	bl	100013dc <BSP_LED_Init>
    BSP_LED_Toggle(LED_RED);
100016d8:	2000      	movs	r0, #0
100016da:	f7ff fedb 	bl	10001494 <BSP_LED_Toggle>
    HAL_Delay(500);
100016de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
100016e2:	f000 f9af 	bl	10001a44 <HAL_Delay>
  while(1)
100016e6:	e7f7      	b.n	100016d8 <BSP_Error_Handler+0x8>

100016e8 <STPMU1_Get_Regulator_Data>:
{
100016e8:	b508      	push	{r3, lr}
  for (i = 0 ; i < MAX_REGUL ; i++ )
100016ea:	2300      	movs	r3, #0
100016ec:	2b0a      	cmp	r3, #10
100016ee:	d807      	bhi.n	10001700 <STPMU1_Get_Regulator_Data+0x18>
    if (id == regulators_table[i].id)
100016f0:	011a      	lsls	r2, r3, #4
100016f2:	4906      	ldr	r1, [pc, #24]	; (1000170c <STPMU1_Get_Regulator_Data+0x24>)
100016f4:	5c8a      	ldrb	r2, [r1, r2]
100016f6:	4282      	cmp	r2, r0
100016f8:	d004      	beq.n	10001704 <STPMU1_Get_Regulator_Data+0x1c>
  for (i = 0 ; i < MAX_REGUL ; i++ )
100016fa:	3301      	adds	r3, #1
100016fc:	b2db      	uxtb	r3, r3
100016fe:	e7f5      	b.n	100016ec <STPMU1_Get_Regulator_Data+0x4>
  BSP_Error_Handler();
10001700:	f7ff ffe6 	bl	100016d0 <BSP_Error_Handler>
      return &regulators_table[i];
10001704:	4801      	ldr	r0, [pc, #4]	; (1000170c <STPMU1_Get_Regulator_Data+0x24>)
10001706:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
1000170a:	bd08      	pop	{r3, pc}
1000170c:	100200a4 	.word	0x100200a4

10001710 <STPMU1_Voltage_Find_Index>:
{
10001710:	b510      	push	{r4, lr}
10001712:	460c      	mov	r4, r1
  regul_struct *regul = STPMU1_Get_Regulator_Data(id);
10001714:	f7ff ffe8 	bl	100016e8 <STPMU1_Get_Regulator_Data>
10001718:	4603      	mov	r3, r0
  for ( i = 0 ; i < regul->voltage_table_size ; i++)
1000171a:	2000      	movs	r0, #0
1000171c:	7a1a      	ldrb	r2, [r3, #8]
1000171e:	4282      	cmp	r2, r0
10001720:	d907      	bls.n	10001732 <STPMU1_Voltage_Find_Index+0x22>
    if ( regul->voltage_table[i] == milivolts ) {
10001722:	685a      	ldr	r2, [r3, #4]
10001724:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
10001728:	42a2      	cmp	r2, r4
1000172a:	d004      	beq.n	10001736 <STPMU1_Voltage_Find_Index+0x26>
  for ( i = 0 ; i < regul->voltage_table_size ; i++)
1000172c:	3001      	adds	r0, #1
1000172e:	b2c0      	uxtb	r0, r0
10001730:	e7f4      	b.n	1000171c <STPMU1_Voltage_Find_Index+0xc>
  BSP_Error_Handler();
10001732:	f7ff ffcd 	bl	100016d0 <BSP_Error_Handler>
}
10001736:	bd10      	pop	{r4, pc}

10001738 <STPMU1_Register_Read>:
{
10001738:	b500      	push	{lr}
1000173a:	b083      	sub	sp, #12
1000173c:	4601      	mov	r1, r0
  uint8_t Value = 0;
1000173e:	2300      	movs	r3, #0
10001740:	f88d 3007 	strb.w	r3, [sp, #7]
  status = BSP_I2C4_ReadReg(STPMU1_I2C_ADDRESS, (uint16_t)register_id, &Value, 1);
10001744:	2301      	movs	r3, #1
10001746:	f10d 0207 	add.w	r2, sp, #7
1000174a:	2066      	movs	r0, #102	; 0x66
1000174c:	f7ff ff7a 	bl	10001644 <BSP_I2C4_ReadReg>
  if(status != BSP_ERROR_NONE)
10001750:	b920      	cbnz	r0, 1000175c <STPMU1_Register_Read+0x24>
}
10001752:	f89d 0007 	ldrb.w	r0, [sp, #7]
10001756:	b003      	add	sp, #12
10001758:	f85d fb04 	ldr.w	pc, [sp], #4
    BSP_Error_Handler();
1000175c:	f7ff ffb8 	bl	100016d0 <BSP_Error_Handler>

10001760 <STPMU1_Register_Write>:
{
10001760:	b510      	push	{r4, lr}
10001762:	b082      	sub	sp, #8
10001764:	4604      	mov	r4, r0
10001766:	f88d 1007 	strb.w	r1, [sp, #7]
  status = BSP_I2C4_WriteReg(STPMU1_I2C_ADDRESS, (uint16_t)register_id, &value, 1);
1000176a:	2301      	movs	r3, #1
1000176c:	f10d 0207 	add.w	r2, sp, #7
10001770:	4601      	mov	r1, r0
10001772:	2066      	movs	r0, #102	; 0x66
10001774:	f7ff ff5c 	bl	10001630 <BSP_I2C4_WriteReg>
  if(status != BSP_ERROR_NONE)
10001778:	b928      	cbnz	r0, 10001786 <STPMU1_Register_Write+0x26>
  if ((register_id!=WATCHDOG_CONTROL_REG) && (register_id<=0x40))
1000177a:	2c1b      	cmp	r4, #27
1000177c:	d001      	beq.n	10001782 <STPMU1_Register_Write+0x22>
1000177e:	2c40      	cmp	r4, #64	; 0x40
10001780:	d903      	bls.n	1000178a <STPMU1_Register_Write+0x2a>
}
10001782:	b002      	add	sp, #8
10001784:	bd10      	pop	{r4, pc}
    BSP_Error_Handler();
10001786:	f7ff ffa3 	bl	100016d0 <BSP_Error_Handler>
    uint8_t readval = STPMU1_Register_Read(register_id);
1000178a:	4620      	mov	r0, r4
1000178c:	f7ff ffd4 	bl	10001738 <STPMU1_Register_Read>
    if (readval != value)
10001790:	f89d 3007 	ldrb.w	r3, [sp, #7]
10001794:	4283      	cmp	r3, r0
10001796:	d0f4      	beq.n	10001782 <STPMU1_Register_Write+0x22>
      BSP_Error_Handler();
10001798:	f7ff ff9a 	bl	100016d0 <BSP_Error_Handler>

1000179c <STPMU1_Enable_Interrupt>:
  if (IRQn >= IRQ_NR)
1000179c:	281f      	cmp	r0, #31
1000179e:	d900      	bls.n	100017a2 <STPMU1_Enable_Interrupt+0x6>
100017a0:	4770      	bx	lr
{
100017a2:	b538      	push	{r3, r4, r5, lr}
  irq_reg = IRQn >> 3 ;
100017a4:	08c5      	lsrs	r5, r0, #3
  irq_reg_value = 1 << ( 7 - ( IRQn%8 ) );
100017a6:	43c0      	mvns	r0, r0
100017a8:	f000 0007 	and.w	r0, r0, #7
100017ac:	2401      	movs	r4, #1
100017ae:	fa04 f000 	lsl.w	r0, r4, r0
100017b2:	b2c4      	uxtb	r4, r0
  STPMU1_Register_Write(ITCLEARLATCH1_REG+irq_reg, irq_reg_value );
100017b4:	4621      	mov	r1, r4
100017b6:	f105 0070 	add.w	r0, r5, #112	; 0x70
100017ba:	f7ff ffd1 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(ITCLEARMASK1_REG+irq_reg, irq_reg_value );
100017be:	f1a5 0060 	sub.w	r0, r5, #96	; 0x60
100017c2:	4621      	mov	r1, r4
100017c4:	b2c0      	uxtb	r0, r0
100017c6:	f7ff ffcb 	bl	10001760 <STPMU1_Register_Write>
}
100017ca:	bd38      	pop	{r3, r4, r5, pc}

100017cc <STPMU1_Register_Update>:
{
100017cc:	b570      	push	{r4, r5, r6, lr}
100017ce:	4605      	mov	r5, r0
100017d0:	460e      	mov	r6, r1
100017d2:	4614      	mov	r4, r2
  initial_value = STPMU1_Register_Read(register_id);
100017d4:	f7ff ffb0 	bl	10001738 <STPMU1_Register_Read>
  initial_value &= ~mask;
100017d8:	ea20 0304 	bic.w	r3, r0, r4
100017dc:	b2db      	uxtb	r3, r3
  initial_value |= ( value & mask );
100017de:	4034      	ands	r4, r6
  STPMU1_Register_Write(register_id, initial_value);
100017e0:	ea43 0104 	orr.w	r1, r3, r4
100017e4:	4628      	mov	r0, r5
100017e6:	f7ff ffbb 	bl	10001760 <STPMU1_Register_Write>
}
100017ea:	bd70      	pop	{r4, r5, r6, pc}

100017ec <STPMU1_Regulator_Enable>:
{
100017ec:	b508      	push	{r3, lr}
  regul_struct *regul = STPMU1_Get_Regulator_Data(id);
100017ee:	f7ff ff7b 	bl	100016e8 <STPMU1_Get_Regulator_Data>
  STPMU1_Register_Update(regul->control_reg,BIT(0),BIT(0));
100017f2:	2201      	movs	r2, #1
100017f4:	4611      	mov	r1, r2
100017f6:	7a40      	ldrb	r0, [r0, #9]
100017f8:	f7ff ffe8 	bl	100017cc <STPMU1_Register_Update>
}
100017fc:	bd08      	pop	{r3, pc}

100017fe <STPMU1_Regulator_Voltage_Set>:
{
100017fe:	b538      	push	{r3, r4, r5, lr}
10001800:	4605      	mov	r5, r0
  uint8_t voltage_index = STPMU1_Voltage_Find_Index(id,milivolts);
10001802:	f7ff ff85 	bl	10001710 <STPMU1_Voltage_Find_Index>
10001806:	4604      	mov	r4, r0
  regul_struct *regul = STPMU1_Get_Regulator_Data(id);
10001808:	4628      	mov	r0, r5
1000180a:	f7ff ff6d 	bl	100016e8 <STPMU1_Get_Regulator_Data>
  STPMU1_Register_Update(regul->control_reg, voltage_index<<2 , 0xFC );
1000180e:	00a1      	lsls	r1, r4, #2
10001810:	22fc      	movs	r2, #252	; 0xfc
10001812:	4011      	ands	r1, r2
10001814:	7a40      	ldrb	r0, [r0, #9]
10001816:	f7ff ffd9 	bl	100017cc <STPMU1_Register_Update>
}
1000181a:	bd38      	pop	{r3, r4, r5, pc}

1000181c <BSP_PMIC_Is_Device_Ready>:

  return status;
}

uint32_t BSP_PMIC_Is_Device_Ready(void)
{
1000181c:	b508      	push	{r3, lr}
  int32_t  status = BSP_ERROR_NONE;

  /* Write the TxBuffer1 at @0, then read @0 when device ready */
  if (BSP_I2C4_IsReady(STPMU1_I2C_ADDRESS, 1) != BSP_ERROR_NONE)
1000181e:	2101      	movs	r1, #1
10001820:	2066      	movs	r0, #102	; 0x66
10001822:	f7ff ff19 	bl	10001658 <BSP_I2C4_IsReady>
10001826:	b108      	cbz	r0, 1000182c <BSP_PMIC_Is_Device_Ready+0x10>
  {
    status = BSP_ERROR_BUSY;
10001828:	f06f 0002 	mvn.w	r0, #2
  }
  return status ;
}
1000182c:	bd08      	pop	{r3, pc}
	...

10001830 <BSP_PMIC_Init>:

/* Use Xls I2C COnfiguration Tools with I2C Clock config + output clocks requirement */
#define I2C_TIMING     0x10805E89

uint32_t BSP_PMIC_Init(void)
{
10001830:	b538      	push	{r3, r4, r5, lr}
  int32_t status = BSP_ERROR_NONE;
  PMIC_IRQn irq;
	

  /*##-1- Configure the I2C peripheral ######################################*/
  BSP_PMIC_MspInit(&hI2c4);
10001832:	4810      	ldr	r0, [pc, #64]	; (10001874 <BSP_PMIC_Init+0x44>)
10001834:	f7ff ff20 	bl	10001678 <BSP_PMIC_MspInit>

  status = BSP_PMIC_Is_Device_Ready();
10001838:	f7ff fff0 	bl	1000181c <BSP_PMIC_Is_Device_Ready>
  if ( status != BSP_ERROR_NONE )
1000183c:	4605      	mov	r5, r0
1000183e:	b108      	cbz	r0, 10001844 <BSP_PMIC_Init+0x14>
  for (irq = IT_SWOUT_R; irq < IRQ_NR; irq++) {
    STPMU1_Enable_Interrupt(irq);
  }

  return BSP_ERROR_NONE;
}
10001840:	4628      	mov	r0, r5
10001842:	bd38      	pop	{r3, r4, r5, pc}
  if (STPMU1_Register_Read(VERSION_STATUS_REG) != 0x00)
10001844:	2006      	movs	r0, #6
10001846:	f7ff ff77 	bl	10001738 <STPMU1_Register_Read>
1000184a:	4604      	mov	r4, r0
1000184c:	b970      	cbnz	r0, 1000186c <BSP_PMIC_Init+0x3c>
  STPMU1_Enable_Interrupt(IT_PONKEY_R);
1000184e:	2006      	movs	r0, #6
10001850:	f7ff ffa4 	bl	1000179c <STPMU1_Enable_Interrupt>
  STPMU1_Enable_Interrupt(IT_PONKEY_F);
10001854:	2007      	movs	r0, #7
10001856:	f7ff ffa1 	bl	1000179c <STPMU1_Enable_Interrupt>
  for (irq = IT_SWOUT_R; irq < IRQ_NR; irq++) {
1000185a:	e004      	b.n	10001866 <BSP_PMIC_Init+0x36>
    STPMU1_Enable_Interrupt(irq);
1000185c:	4620      	mov	r0, r4
1000185e:	f7ff ff9d 	bl	1000179c <STPMU1_Enable_Interrupt>
  for (irq = IT_SWOUT_R; irq < IRQ_NR; irq++) {
10001862:	3401      	adds	r4, #1
10001864:	b2e4      	uxtb	r4, r4
10001866:	2c1f      	cmp	r4, #31
10001868:	d9f8      	bls.n	1000185c <BSP_PMIC_Init+0x2c>
1000186a:	e7e9      	b.n	10001840 <BSP_PMIC_Init+0x10>
    return status;
1000186c:	f06f 0507 	mvn.w	r5, #7
10001870:	e7e6      	b.n	10001840 <BSP_PMIC_Init+0x10>
10001872:	bf00      	nop
10001874:	10021304 	.word	0x10021304

10001878 <BSP_PMIC_InitRegulators>:
 *
 *
 */
/* following are configurations */
uint32_t BSP_PMIC_InitRegulators(void)
{
10001878:	b508      	push	{r3, lr}
  uint32_t  status = BSP_ERROR_NONE;

  STPMU1_Register_Write(MAIN_CONTROL_REG, 0x04);
1000187a:	2104      	movs	r1, #4
1000187c:	2010      	movs	r0, #16
1000187e:	f7ff ff6f 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(VIN_CONTROL_REG, 0xc0);
10001882:	21c0      	movs	r1, #192	; 0xc0
10001884:	2015      	movs	r0, #21
10001886:	f7ff ff6b 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(USB_CONTROL_REG, 0x30);
1000188a:	2130      	movs	r1, #48	; 0x30
1000188c:	2040      	movs	r0, #64	; 0x40
1000188e:	f7ff ff67 	bl	10001760 <STPMU1_Register_Write>

  STPMU1_Register_Write(MASK_RESET_BUCK_REG, 0x04);
10001892:	2104      	movs	r1, #4
10001894:	2018      	movs	r0, #24
10001896:	f7ff ff63 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(MASK_RESET_LDO_REG, 0x00);
1000189a:	2100      	movs	r1, #0
1000189c:	201a      	movs	r0, #26
1000189e:	f7ff ff5f 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(MASK_RANK_BUCK_REG, 0x00);
100018a2:	2100      	movs	r1, #0
100018a4:	2017      	movs	r0, #23
100018a6:	f7ff ff5b 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(MASK_RANK_LDO_REG, 0x00);
100018aa:	2100      	movs	r1, #0
100018ac:	2019      	movs	r0, #25
100018ae:	f7ff ff57 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(BUCK_PULL_DOWN_REG, 0x00);
100018b2:	2100      	movs	r1, #0
100018b4:	2012      	movs	r0, #18
100018b6:	f7ff ff53 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(LDO14_PULL_DOWN_REG, 0x00);
100018ba:	2100      	movs	r1, #0
100018bc:	2013      	movs	r0, #19
100018be:	f7ff ff4f 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(LDO56_PULL_DOWN_REG, 0x00);
100018c2:	2100      	movs	r1, #0
100018c4:	2014      	movs	r0, #20
100018c6:	f7ff ff4b 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(BUCK_ICC_TURNOFF_REG, 0x30);
100018ca:	2130      	movs	r1, #48	; 0x30
100018cc:	201d      	movs	r0, #29
100018ce:	f7ff ff47 	bl	10001760 <STPMU1_Register_Write>
  STPMU1_Register_Write(LDO_ICC_TURNOFF_REG, 0x3b);
100018d2:	213b      	movs	r1, #59	; 0x3b
100018d4:	201e      	movs	r0, #30
100018d6:	f7ff ff43 	bl	10001760 <STPMU1_Register_Write>

  /* vddcore */
  STPMU1_Regulator_Voltage_Set(STPMU1_BUCK1, 1200);
100018da:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
100018de:	2001      	movs	r0, #1
100018e0:	f7ff ff8d 	bl	100017fe <STPMU1_Regulator_Voltage_Set>
  STPMU1_Regulator_Enable(STPMU1_BUCK1);
100018e4:	2001      	movs	r0, #1
100018e6:	f7ff ff81 	bl	100017ec <STPMU1_Regulator_Enable>

  /* vdd2_ddr */
  STPMU1_Regulator_Voltage_Set(STPMU1_BUCK2, 1200);
100018ea:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
100018ee:	2002      	movs	r0, #2
100018f0:	f7ff ff85 	bl	100017fe <STPMU1_Regulator_Voltage_Set>
  STPMU1_Regulator_Enable(STPMU1_BUCK2);
100018f4:	2002      	movs	r0, #2
100018f6:	f7ff ff79 	bl	100017ec <STPMU1_Regulator_Enable>

  /* vdd */
  STPMU1_Regulator_Voltage_Set(STPMU1_BUCK3, 1800);
100018fa:	f44f 61e1 	mov.w	r1, #1800	; 0x708
100018fe:	2003      	movs	r0, #3
10001900:	f7ff ff7d 	bl	100017fe <STPMU1_Regulator_Voltage_Set>
  STPMU1_Regulator_Enable(STPMU1_BUCK3);
10001904:	2003      	movs	r0, #3
10001906:	f7ff ff71 	bl	100017ec <STPMU1_Regulator_Enable>
  /* 3v3 */
  //STPMU1_Regulator_Voltage_Set(STPMU1_BUCK4, 3300);
  //STPMU1_Regulator_Enable(STPMU1_BUCK4);

  /* 1v8_audio */
  STPMU1_Regulator_Voltage_Set(STPMU1_LDO1, 1800);
1000190a:	f44f 61e1 	mov.w	r1, #1800	; 0x708
1000190e:	2005      	movs	r0, #5
10001910:	f7ff ff75 	bl	100017fe <STPMU1_Regulator_Voltage_Set>
  STPMU1_Regulator_Enable(STPMU1_LDO1);
10001914:	2005      	movs	r0, #5
10001916:	f7ff ff69 	bl	100017ec <STPMU1_Regulator_Enable>

  /* vdd_emmc */
  STPMU1_Regulator_Voltage_Set(STPMU1_LDO2, 2900);
1000191a:	f640 3154 	movw	r1, #2900	; 0xb54
1000191e:	2006      	movs	r0, #6
10001920:	f7ff ff6d 	bl	100017fe <STPMU1_Regulator_Voltage_Set>
  STPMU1_Regulator_Enable(STPMU1_LDO2);
10001924:	2006      	movs	r0, #6
10001926:	f7ff ff61 	bl	100017ec <STPMU1_Regulator_Enable>

  /* vdd1_ddr */
  STPMU1_Regulator_Voltage_Set(STPMU1_LDO3, 0xFFFF);
1000192a:	f64f 71ff 	movw	r1, #65535	; 0xffff
1000192e:	2007      	movs	r0, #7
10001930:	f7ff ff65 	bl	100017fe <STPMU1_Regulator_Voltage_Set>
  STPMU1_Regulator_Enable(STPMU1_LDO3);
10001934:	2007      	movs	r0, #7
10001936:	f7ff ff59 	bl	100017ec <STPMU1_Regulator_Enable>

  /* vdd_usb */
  STPMU1_Regulator_Voltage_Set(STPMU1_LDO4, 3300);
1000193a:	f640 41e4 	movw	r1, #3300	; 0xce4
1000193e:	2008      	movs	r0, #8
10001940:	f7ff ff5d 	bl	100017fe <STPMU1_Regulator_Voltage_Set>
  STPMU1_Regulator_Enable(STPMU1_LDO4);
10001944:	2008      	movs	r0, #8
10001946:	f7ff ff51 	bl	100017ec <STPMU1_Regulator_Enable>

  /* vdda */
  STPMU1_Regulator_Voltage_Set(STPMU1_LDO5, 2900);
1000194a:	f640 3154 	movw	r1, #2900	; 0xb54
1000194e:	2009      	movs	r0, #9
10001950:	f7ff ff55 	bl	100017fe <STPMU1_Regulator_Voltage_Set>
  STPMU1_Regulator_Enable(STPMU1_LDO5);
10001954:	2009      	movs	r0, #9
10001956:	f7ff ff49 	bl	100017ec <STPMU1_Regulator_Enable>

  /* 2v8 */
  STPMU1_Regulator_Voltage_Set(STPMU1_LDO6, 2800);
1000195a:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
1000195e:	200a      	movs	r0, #10
10001960:	f7ff ff4d 	bl	100017fe <STPMU1_Regulator_Voltage_Set>
  STPMU1_Regulator_Enable(STPMU1_LDO6);
10001964:	200a      	movs	r0, #10
10001966:	f7ff ff41 	bl	100017ec <STPMU1_Regulator_Enable>

  STPMU1_Regulator_Enable(STPMU1_VREFDDR);
1000196a:	200b      	movs	r0, #11
1000196c:	f7ff ff3e 	bl	100017ec <STPMU1_Regulator_Enable>

  return status;
}
10001970:	2000      	movs	r0, #0
10001972:	bd08      	pop	{r3, pc}

10001974 <SystemInit>:
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10001974:	4a0a      	ldr	r2, [pc, #40]	; (100019a0 <SystemInit+0x2c>)
10001976:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1000197a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1000197e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10001982:	4b08      	ldr	r3, [pc, #32]	; (100019a4 <SystemInit+0x30>)
10001984:	2200      	movs	r2, #0
10001986:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  CLEAR_REG(EXTI_C2->IMR2);
1000198a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  CLEAR_REG(EXTI_C2->IMR3);
1000198e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  CLEAR_REG(EXTI_C2->EMR1);
10001992:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  CLEAR_REG(EXTI_C2->EMR2);
10001996:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  CLEAR_REG(EXTI_C2->EMR3);
1000199a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#else
#error Please #define CORE_CM4
#endif	                         
}
1000199e:	4770      	bx	lr
100019a0:	e000ed00 	.word	0xe000ed00
100019a4:	5000d000 	.word	0x5000d000

100019a8 <HAL_InitTick>:

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100019a8:	4b10      	ldr	r3, [pc, #64]	; (100019ec <HAL_InitTick+0x44>)
100019aa:	781b      	ldrb	r3, [r3, #0]
100019ac:	b90b      	cbnz	r3, 100019b2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
100019ae:	2001      	movs	r0, #1



  /* Return function status */
  return HAL_OK;
}
100019b0:	4770      	bx	lr
{
100019b2:	b510      	push	{r4, lr}
100019b4:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100019b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
100019ba:	fbb0 f3f3 	udiv	r3, r0, r3
100019be:	4a0c      	ldr	r2, [pc, #48]	; (100019f0 <HAL_InitTick+0x48>)
100019c0:	6810      	ldr	r0, [r2, #0]
100019c2:	fbb0 f0f3 	udiv	r0, r0, r3
100019c6:	f001 fb0f 	bl	10002fe8 <HAL_SYSTICK_Config>
100019ca:	b968      	cbnz	r0, 100019e8 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100019cc:	2c0f      	cmp	r4, #15
100019ce:	d901      	bls.n	100019d4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
100019d0:	2001      	movs	r0, #1
100019d2:	e00a      	b.n	100019ea <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100019d4:	2200      	movs	r2, #0
100019d6:	4621      	mov	r1, r4
100019d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100019dc:	f001 faac 	bl	10002f38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100019e0:	4b02      	ldr	r3, [pc, #8]	; (100019ec <HAL_InitTick+0x44>)
100019e2:	605c      	str	r4, [r3, #4]
  return HAL_OK;
100019e4:	2000      	movs	r0, #0
100019e6:	e000      	b.n	100019ea <HAL_InitTick+0x42>
    return HAL_ERROR;
100019e8:	2001      	movs	r0, #1
}
100019ea:	bd10      	pop	{r4, pc}
100019ec:	100203f4 	.word	0x100203f4
100019f0:	100203f0 	.word	0x100203f0

100019f4 <HAL_Init>:
{
100019f4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
100019f6:	2003      	movs	r0, #3
100019f8:	f001 fa8c 	bl	10002f14 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100019fc:	f003 f9a6 	bl	10004d4c <HAL_RCC_GetSystemCoreClockFreq>
10001a00:	4b06      	ldr	r3, [pc, #24]	; (10001a1c <HAL_Init+0x28>)
10001a02:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10001a04:	200f      	movs	r0, #15
10001a06:	f7ff ffcf 	bl	100019a8 <HAL_InitTick>
10001a0a:	b110      	cbz	r0, 10001a12 <HAL_Init+0x1e>
    return HAL_ERROR;
10001a0c:	2401      	movs	r4, #1
}
10001a0e:	4620      	mov	r0, r4
10001a10:	bd10      	pop	{r4, pc}
10001a12:	4604      	mov	r4, r0
  HAL_MspInit();
10001a14:	f7ff fbf2 	bl	100011fc <HAL_MspInit>
  return HAL_OK;
10001a18:	e7f9      	b.n	10001a0e <HAL_Init+0x1a>
10001a1a:	bf00      	nop
10001a1c:	100203f0 	.word	0x100203f0

10001a20 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
10001a20:	4b03      	ldr	r3, [pc, #12]	; (10001a30 <HAL_IncTick+0x10>)
10001a22:	781b      	ldrb	r3, [r3, #0]
10001a24:	4a03      	ldr	r2, [pc, #12]	; (10001a34 <HAL_IncTick+0x14>)
10001a26:	6811      	ldr	r1, [r2, #0]
10001a28:	440b      	add	r3, r1
10001a2a:	6013      	str	r3, [r2, #0]
}
10001a2c:	4770      	bx	lr
10001a2e:	bf00      	nop
10001a30:	100203f4 	.word	0x100203f4
10001a34:	10021350 	.word	0x10021350

10001a38 <HAL_GetTick>:
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10001a38:	4b01      	ldr	r3, [pc, #4]	; (10001a40 <HAL_GetTick+0x8>)
10001a3a:	6818      	ldr	r0, [r3, #0]
#endif /* CORE_CM4 */

}
10001a3c:	4770      	bx	lr
10001a3e:	bf00      	nop
10001a40:	10021350 	.word	0x10021350

10001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10001a44:	b538      	push	{r3, r4, r5, lr}
10001a46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
10001a48:	f7ff fff6 	bl	10001a38 <HAL_GetTick>
10001a4c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10001a4e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
10001a52:	d002      	beq.n	10001a5a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
10001a54:	4b04      	ldr	r3, [pc, #16]	; (10001a68 <HAL_Delay+0x24>)
10001a56:	781b      	ldrb	r3, [r3, #0]
10001a58:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
10001a5a:	f7ff ffed 	bl	10001a38 <HAL_GetTick>
10001a5e:	1b40      	subs	r0, r0, r5
10001a60:	42a0      	cmp	r0, r4
10001a62:	d3fa      	bcc.n	10001a5a <HAL_Delay+0x16>
  {
  }
}
10001a64:	bd38      	pop	{r3, r4, r5, pc}
10001a66:	bf00      	nop
10001a68:	100203f4 	.word	0x100203f4

10001a6c <HAL_SuspendTick>:
__weak void HAL_SuspendTick(void)
{
#if defined (CORE_CA7)
#elif defined (CORE_CM4)
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
10001a6c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
10001a70:	6913      	ldr	r3, [r2, #16]
10001a72:	f023 0302 	bic.w	r3, r3, #2
10001a76:	6113      	str	r3, [r2, #16]
#endif
}
10001a78:	4770      	bx	lr

10001a7a <HAL_ResumeTick>:
__weak void HAL_ResumeTick(void)
{
#if defined (CORE_CA7)
#elif defined (CORE_CM4)
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
10001a7a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
10001a7e:	6913      	ldr	r3, [r2, #16]
10001a80:	f043 0302 	orr.w	r3, r3, #2
10001a84:	6113      	str	r3, [r2, #16]
#endif
}
10001a86:	4770      	bx	lr

10001a88 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 return __STM32MP1xx_HAL_VERSION;
}
10001a88:	f04f 7083 	mov.w	r0, #17170432	; 0x1060000
10001a8c:	4770      	bx	lr
	...

10001a90 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
10001a90:	4a03      	ldr	r2, [pc, #12]	; (10001aa0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x10>)
10001a92:	6813      	ldr	r3, [r2, #0]
10001a94:	f023 0302 	bic.w	r3, r3, #2
10001a98:	4303      	orrs	r3, r0
10001a9a:	6013      	str	r3, [r2, #0]
}
10001a9c:	4770      	bx	lr
10001a9e:	bf00      	nop
10001aa0:	50025000 	.word	0x50025000

10001aa4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
10001aa4:	b510      	push	{r4, lr}
  uint32_t  tickstart = 0;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
10001aa6:	4a0b      	ldr	r2, [pc, #44]	; (10001ad4 <HAL_SYSCFG_EnableVREFBUF+0x30>)
10001aa8:	6813      	ldr	r3, [r2, #0]
10001aaa:	f043 0301 	orr.w	r3, r3, #1
10001aae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001ab0:	f7ff ffc2 	bl	10001a38 <HAL_GetTick>
10001ab4:	4604      	mov	r4, r0

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == RESET)
10001ab6:	4b07      	ldr	r3, [pc, #28]	; (10001ad4 <HAL_SYSCFG_EnableVREFBUF+0x30>)
10001ab8:	681b      	ldr	r3, [r3, #0]
10001aba:	f013 0f08 	tst.w	r3, #8
10001abe:	d106      	bne.n	10001ace <HAL_SYSCFG_EnableVREFBUF+0x2a>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
10001ac0:	f7ff ffba 	bl	10001a38 <HAL_GetTick>
10001ac4:	1b00      	subs	r0, r0, r4
10001ac6:	280a      	cmp	r0, #10
10001ac8:	d9f5      	bls.n	10001ab6 <HAL_SYSCFG_EnableVREFBUF+0x12>
    {
      return HAL_TIMEOUT;
10001aca:	2003      	movs	r0, #3
10001acc:	e000      	b.n	10001ad0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    }
  }

  return HAL_OK;
10001ace:	2000      	movs	r0, #0
}
10001ad0:	bd10      	pop	{r4, pc}
10001ad2:	bf00      	nop
10001ad4:	50025000 	.word	0x50025000

10001ad8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
10001ad8:	6803      	ldr	r3, [r0, #0]
10001ada:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
10001adc:	4770      	bx	lr

10001ade <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
10001ade:	4770      	bx	lr

10001ae0 <HAL_ADC_IRQHandler>:
{
10001ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001ae2:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
10001ae4:	6803      	ldr	r3, [r0, #0]
10001ae6:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
10001ae8:	685d      	ldr	r5, [r3, #4]
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
10001aea:	4b98      	ldr	r3, [pc, #608]	; (10001d4c <HAL_ADC_IRQHandler+0x26c>)
10001aec:	689e      	ldr	r6, [r3, #8]
10001aee:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
10001af2:	f017 0f02 	tst.w	r7, #2
10001af6:	d010      	beq.n	10001b1a <HAL_ADC_IRQHandler+0x3a>
10001af8:	f015 0f02 	tst.w	r5, #2
10001afc:	d00d      	beq.n	10001b1a <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
10001afe:	6d43      	ldr	r3, [r0, #84]	; 0x54
10001b00:	f013 0f10 	tst.w	r3, #16
10001b04:	d103      	bne.n	10001b0e <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
10001b06:	6d43      	ldr	r3, [r0, #84]	; 0x54
10001b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
10001b0c:	6543      	str	r3, [r0, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
10001b0e:	4620      	mov	r0, r4
10001b10:	f001 f9fe 	bl	10002f10 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
10001b14:	6823      	ldr	r3, [r4, #0]
10001b16:	2202      	movs	r2, #2
10001b18:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
10001b1a:	f017 0f04 	tst.w	r7, #4
10001b1e:	d002      	beq.n	10001b26 <HAL_ADC_IRQHandler+0x46>
10001b20:	f015 0f04 	tst.w	r5, #4
10001b24:	d105      	bne.n	10001b32 <HAL_ADC_IRQHandler+0x52>
10001b26:	f017 0f08 	tst.w	r7, #8
10001b2a:	d04a      	beq.n	10001bc2 <HAL_ADC_IRQHandler+0xe2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
10001b2c:	f015 0f08 	tst.w	r5, #8
10001b30:	d047      	beq.n	10001bc2 <HAL_ADC_IRQHandler+0xe2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
10001b32:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001b34:	f013 0f10 	tst.w	r3, #16
10001b38:	d103      	bne.n	10001b42 <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
10001b3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
10001b40:	6563      	str	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
10001b42:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
10001b44:	68da      	ldr	r2, [r3, #12]
10001b46:	f412 6f40 	tst.w	r2, #3072	; 0xc00
10001b4a:	d134      	bne.n	10001bb6 <HAL_ADC_IRQHandler+0xd6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10001b4c:	4a80      	ldr	r2, [pc, #512]	; (10001d50 <HAL_ADC_IRQHandler+0x270>)
10001b4e:	4293      	cmp	r3, r2
10001b50:	d009      	beq.n	10001b66 <HAL_ADC_IRQHandler+0x86>
10001b52:	461a      	mov	r2, r3
10001b54:	4293      	cmp	r3, r2
10001b56:	d009      	beq.n	10001b6c <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10001b58:	b146      	cbz	r6, 10001b6c <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
10001b5a:	2e05      	cmp	r6, #5
10001b5c:	d006      	beq.n	10001b6c <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10001b5e:	2e09      	cmp	r6, #9
10001b60:	d004      	beq.n	10001b6c <HAL_ADC_IRQHandler+0x8c>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
10001b62:	68d2      	ldr	r2, [r2, #12]
10001b64:	e003      	b.n	10001b6e <HAL_ADC_IRQHandler+0x8e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10001b66:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
10001b6a:	e7f3      	b.n	10001b54 <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
10001b6c:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
10001b6e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
10001b72:	d120      	bne.n	10001bb6 <HAL_ADC_IRQHandler+0xd6>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
10001b74:	681a      	ldr	r2, [r3, #0]
10001b76:	f012 0f08 	tst.w	r2, #8
10001b7a:	d01c      	beq.n	10001bb6 <HAL_ADC_IRQHandler+0xd6>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10001b7c:	689a      	ldr	r2, [r3, #8]
10001b7e:	f012 0f04 	tst.w	r2, #4
10001b82:	d110      	bne.n	10001ba6 <HAL_ADC_IRQHandler+0xc6>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
10001b84:	685a      	ldr	r2, [r3, #4]
10001b86:	f022 020c 	bic.w	r2, r2, #12
10001b8a:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
10001b8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001b8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
10001b92:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
10001b94:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001b96:	f413 5f80 	tst.w	r3, #4096	; 0x1000
10001b9a:	d10c      	bne.n	10001bb6 <HAL_ADC_IRQHandler+0xd6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
10001b9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001b9e:	f043 0301 	orr.w	r3, r3, #1
10001ba2:	6563      	str	r3, [r4, #84]	; 0x54
10001ba4:	e007      	b.n	10001bb6 <HAL_ADC_IRQHandler+0xd6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001ba6:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001ba8:	f043 0310 	orr.w	r3, r3, #16
10001bac:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10001bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
10001bb0:	f043 0301 	orr.w	r3, r3, #1
10001bb4:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
10001bb6:	4620      	mov	r0, r4
10001bb8:	f7ff ff91 	bl	10001ade <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
10001bbc:	6823      	ldr	r3, [r4, #0]
10001bbe:	220c      	movs	r2, #12
10001bc0:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
10001bc2:	f017 0f20 	tst.w	r7, #32
10001bc6:	d002      	beq.n	10001bce <HAL_ADC_IRQHandler+0xee>
10001bc8:	f015 0f20 	tst.w	r5, #32
10001bcc:	d105      	bne.n	10001bda <HAL_ADC_IRQHandler+0xfa>
10001bce:	f017 0f40 	tst.w	r7, #64	; 0x40
10001bd2:	d05c      	beq.n	10001c8e <HAL_ADC_IRQHandler+0x1ae>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
10001bd4:	f015 0f40 	tst.w	r5, #64	; 0x40
10001bd8:	d059      	beq.n	10001c8e <HAL_ADC_IRQHandler+0x1ae>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
10001bda:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001bdc:	f013 0f10 	tst.w	r3, #16
10001be0:	d103      	bne.n	10001bea <HAL_ADC_IRQHandler+0x10a>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
10001be2:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001be4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
10001be8:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
10001bea:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
10001bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10001bee:	f412 7fc0 	tst.w	r2, #384	; 0x180
10001bf2:	d112      	bne.n	10001c1a <HAL_ADC_IRQHandler+0x13a>
10001bf4:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
10001bf6:	68da      	ldr	r2, [r3, #12]
10001bf8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
10001bfc:	d10f      	bne.n	10001c1e <HAL_ADC_IRQHandler+0x13e>
10001bfe:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10001c00:	4a53      	ldr	r2, [pc, #332]	; (10001d50 <HAL_ADC_IRQHandler+0x270>)
10001c02:	4293      	cmp	r3, r2
10001c04:	d00d      	beq.n	10001c22 <HAL_ADC_IRQHandler+0x142>
10001c06:	461a      	mov	r2, r3
10001c08:	4293      	cmp	r3, r2
10001c0a:	d00d      	beq.n	10001c28 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10001c0c:	b166      	cbz	r6, 10001c28 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
10001c0e:	2e06      	cmp	r6, #6
10001c10:	d00a      	beq.n	10001c28 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
10001c12:	2e07      	cmp	r6, #7
10001c14:	d008      	beq.n	10001c28 <HAL_ADC_IRQHandler+0x148>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
10001c16:	68d2      	ldr	r2, [r2, #12]
10001c18:	e007      	b.n	10001c2a <HAL_ADC_IRQHandler+0x14a>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
10001c1a:	2100      	movs	r1, #0
10001c1c:	e7eb      	b.n	10001bf6 <HAL_ADC_IRQHandler+0x116>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
10001c1e:	2000      	movs	r0, #0
10001c20:	e7ee      	b.n	10001c00 <HAL_ADC_IRQHandler+0x120>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10001c22:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
10001c26:	e7ef      	b.n	10001c08 <HAL_ADC_IRQHandler+0x128>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
10001c28:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
10001c2a:	b351      	cbz	r1, 10001c82 <HAL_ADC_IRQHandler+0x1a2>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
10001c2c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
10001c30:	d003      	beq.n	10001c3a <HAL_ADC_IRQHandler+0x15a>
10001c32:	b330      	cbz	r0, 10001c82 <HAL_ADC_IRQHandler+0x1a2>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
10001c34:	f412 5f00 	tst.w	r2, #8192	; 0x2000
10001c38:	d123      	bne.n	10001c82 <HAL_ADC_IRQHandler+0x1a2>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
10001c3a:	6819      	ldr	r1, [r3, #0]
10001c3c:	f011 0f40 	tst.w	r1, #64	; 0x40
10001c40:	d01f      	beq.n	10001c82 <HAL_ADC_IRQHandler+0x1a2>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
10001c42:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
10001c46:	d11c      	bne.n	10001c82 <HAL_ADC_IRQHandler+0x1a2>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10001c48:	689a      	ldr	r2, [r3, #8]
10001c4a:	f012 0f08 	tst.w	r2, #8
10001c4e:	d110      	bne.n	10001c72 <HAL_ADC_IRQHandler+0x192>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
10001c50:	685a      	ldr	r2, [r3, #4]
10001c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
10001c56:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
10001c58:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
10001c5e:	6563      	str	r3, [r4, #84]	; 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
10001c60:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001c62:	f413 7f80 	tst.w	r3, #256	; 0x100
10001c66:	d10c      	bne.n	10001c82 <HAL_ADC_IRQHandler+0x1a2>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
10001c68:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001c6a:	f043 0301 	orr.w	r3, r3, #1
10001c6e:	6563      	str	r3, [r4, #84]	; 0x54
10001c70:	e007      	b.n	10001c82 <HAL_ADC_IRQHandler+0x1a2>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10001c72:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001c74:	f043 0310 	orr.w	r3, r3, #16
10001c78:	6563      	str	r3, [r4, #84]	; 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10001c7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
10001c7c:	f043 0301 	orr.w	r3, r3, #1
10001c80:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
10001c82:	4620      	mov	r0, r4
10001c84:	f001 f940 	bl	10002f08 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
10001c88:	6823      	ldr	r3, [r4, #0]
10001c8a:	2260      	movs	r2, #96	; 0x60
10001c8c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
10001c8e:	f017 0f80 	tst.w	r7, #128	; 0x80
10001c92:	d002      	beq.n	10001c9a <HAL_ADC_IRQHandler+0x1ba>
10001c94:	f015 0f80 	tst.w	r5, #128	; 0x80
10001c98:	d12f      	bne.n	10001cfa <HAL_ADC_IRQHandler+0x21a>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
10001c9a:	f417 7f80 	tst.w	r7, #256	; 0x100
10001c9e:	d002      	beq.n	10001ca6 <HAL_ADC_IRQHandler+0x1c6>
10001ca0:	f415 7f80 	tst.w	r5, #256	; 0x100
10001ca4:	d134      	bne.n	10001d10 <HAL_ADC_IRQHandler+0x230>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
10001ca6:	f417 7f00 	tst.w	r7, #512	; 0x200
10001caa:	d002      	beq.n	10001cb2 <HAL_ADC_IRQHandler+0x1d2>
10001cac:	f415 7f00 	tst.w	r5, #512	; 0x200
10001cb0:	d13a      	bne.n	10001d28 <HAL_ADC_IRQHandler+0x248>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
10001cb2:	f017 0f10 	tst.w	r7, #16
10001cb6:	d019      	beq.n	10001cec <HAL_ADC_IRQHandler+0x20c>
10001cb8:	f015 0f10 	tst.w	r5, #16
10001cbc:	d016      	beq.n	10001cec <HAL_ADC_IRQHandler+0x20c>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
10001cbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
10001cc0:	b133      	cbz	r3, 10001cd0 <HAL_ADC_IRQHandler+0x1f0>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
10001cc2:	2e00      	cmp	r6, #0
10001cc4:	d03c      	beq.n	10001d40 <HAL_ADC_IRQHandler+0x260>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
10001cc6:	4b21      	ldr	r3, [pc, #132]	; (10001d4c <HAL_ADC_IRQHandler+0x26c>)
10001cc8:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
10001cca:	f413 4f40 	tst.w	r3, #49152	; 0xc000
10001cce:	d00a      	beq.n	10001ce6 <HAL_ADC_IRQHandler+0x206>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
10001cd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10001cd6:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
10001cd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
10001cda:	f043 0302 	orr.w	r3, r3, #2
10001cde:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
10001ce0:	4620      	mov	r0, r4
10001ce2:	f7ff f8ab 	bl	10000e3c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
10001ce6:	6823      	ldr	r3, [r4, #0]
10001ce8:	2210      	movs	r2, #16
10001cea:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
10001cec:	f417 6f80 	tst.w	r7, #1024	; 0x400
10001cf0:	d002      	beq.n	10001cf8 <HAL_ADC_IRQHandler+0x218>
10001cf2:	f415 6f80 	tst.w	r5, #1024	; 0x400
10001cf6:	d12d      	bne.n	10001d54 <HAL_ADC_IRQHandler+0x274>
}
10001cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
10001cfa:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001d00:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
10001d02:	4620      	mov	r0, r4
10001d04:	f7fe fc04 	bl	10000510 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
10001d08:	6823      	ldr	r3, [r4, #0]
10001d0a:	2280      	movs	r2, #128	; 0x80
10001d0c:	601a      	str	r2, [r3, #0]
10001d0e:	e7c4      	b.n	10001c9a <HAL_ADC_IRQHandler+0x1ba>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
10001d10:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10001d16:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
10001d18:	4620      	mov	r0, r4
10001d1a:	f001 f8f7 	bl	10002f0c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
10001d1e:	6823      	ldr	r3, [r4, #0]
10001d20:	f44f 7280 	mov.w	r2, #256	; 0x100
10001d24:	601a      	str	r2, [r3, #0]
10001d26:	e7be      	b.n	10001ca6 <HAL_ADC_IRQHandler+0x1c6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
10001d28:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001d2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
10001d2e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
10001d30:	4620      	mov	r0, r4
10001d32:	f001 f8ec 	bl	10002f0e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
10001d36:	6823      	ldr	r3, [r4, #0]
10001d38:	f44f 7200 	mov.w	r2, #512	; 0x200
10001d3c:	601a      	str	r2, [r3, #0]
10001d3e:	e7b8      	b.n	10001cb2 <HAL_ADC_IRQHandler+0x1d2>
      if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
10001d40:	6823      	ldr	r3, [r4, #0]
10001d42:	68db      	ldr	r3, [r3, #12]
10001d44:	f013 0f03 	tst.w	r3, #3
10001d48:	d0cd      	beq.n	10001ce6 <HAL_ADC_IRQHandler+0x206>
10001d4a:	e7c1      	b.n	10001cd0 <HAL_ADC_IRQHandler+0x1f0>
10001d4c:	48003300 	.word	0x48003300
10001d50:	48003100 	.word	0x48003100
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
10001d54:	6d63      	ldr	r3, [r4, #84]	; 0x54
10001d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
10001d5a:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
10001d5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
10001d5e:	f043 0308 	orr.w	r3, r3, #8
10001d62:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
10001d64:	6823      	ldr	r3, [r4, #0]
10001d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
10001d6a:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
10001d6c:	4620      	mov	r0, r4
10001d6e:	f001 f8cc 	bl	10002f0a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
10001d72:	e7c1      	b.n	10001cf8 <HAL_ADC_IRQHandler+0x218>

10001d74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
10001d74:	b5f0      	push	{r4, r5, r6, r7, lr}
10001d76:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
10001d78:	2200      	movs	r2, #0
10001d7a:	9201      	str	r2, [sp, #4]
      assert_param(IS_ADC2_DIFF_CHANNEL(pConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
10001d7c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
10001d80:	2a01      	cmp	r2, #1
10001d82:	f000 824e 	beq.w	10002222 <HAL_ADC_ConfigChannel+0x4ae>
10001d86:	4603      	mov	r3, r0
10001d88:	2201      	movs	r2, #1
10001d8a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
10001d8e:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10001d90:	6882      	ldr	r2, [r0, #8]
10001d92:	f012 0f04 	tst.w	r2, #4
10001d96:	d009      	beq.n	10001dac <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10001d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10001d9a:	f042 0220 	orr.w	r2, r2, #32
10001d9e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
10001da0:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
10001da2:	2200      	movs	r2, #0
10001da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
}
10001da8:	b003      	add	sp, #12
10001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
10001dac:	680a      	ldr	r2, [r1, #0]
10001dae:	f3c2 0413 	ubfx	r4, r2, #0, #20
10001db2:	2c00      	cmp	r4, #0
10001db4:	d14e      	bne.n	10001e54 <HAL_ADC_ConfigChannel+0xe0>
10001db6:	f3c2 6284 	ubfx	r2, r2, #26, #5
10001dba:	2401      	movs	r4, #1
10001dbc:	4094      	lsls	r4, r2
10001dbe:	69c2      	ldr	r2, [r0, #28]
10001dc0:	4322      	orrs	r2, r4
10001dc2:	61c2      	str	r2, [r0, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
10001dc4:	681d      	ldr	r5, [r3, #0]
10001dc6:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
10001dc8:	3530      	adds	r5, #48	; 0x30
10001dca:	0a22      	lsrs	r2, r4, #8
10001dcc:	0092      	lsls	r2, r2, #2
10001dce:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
10001dd2:	58a8      	ldr	r0, [r5, r2]
10001dd4:	f004 0e1f 	and.w	lr, r4, #31
10001dd8:	241f      	movs	r4, #31
10001dda:	fa04 f40e 	lsl.w	r4, r4, lr
10001dde:	ea20 0004 	bic.w	r0, r0, r4
10001de2:	680c      	ldr	r4, [r1, #0]
10001de4:	f3c4 6c84 	ubfx	ip, r4, #26, #5
10001de8:	fa0c fc0e 	lsl.w	ip, ip, lr
10001dec:	ea40 000c 	orr.w	r0, r0, ip
10001df0:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10001df2:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10001df4:	6882      	ldr	r2, [r0, #8]
10001df6:	f012 0204 	ands.w	r2, r2, #4
10001dfa:	d000      	beq.n	10001dfe <HAL_ADC_ConfigChannel+0x8a>
10001dfc:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10001dfe:	6884      	ldr	r4, [r0, #8]
10001e00:	f014 0408 	ands.w	r4, r4, #8
10001e04:	d000      	beq.n	10001e08 <HAL_ADC_ConfigChannel+0x94>
10001e06:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
10001e08:	b902      	cbnz	r2, 10001e0c <HAL_ADC_ConfigChannel+0x98>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
10001e0a:	b37c      	cbz	r4, 10001e6c <HAL_ADC_ConfigChannel+0xf8>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10001e0c:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10001e0e:	68a2      	ldr	r2, [r4, #8]
10001e10:	f012 0f01 	tst.w	r2, #1
10001e14:	f040 8203 	bne.w	1000221e <HAL_ADC_ConfigChannel+0x4aa>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
10001e18:	680a      	ldr	r2, [r1, #0]
10001e1a:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
10001e1c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
10001e20:	f3c2 0c13 	ubfx	ip, r2, #0, #20
10001e24:	ea20 000c 	bic.w	r0, r0, ip
10001e28:	f005 0c18 	and.w	ip, r5, #24
10001e2c:	4db4      	ldr	r5, [pc, #720]	; (10002100 <HAL_ADC_ConfigChannel+0x38c>)
10001e2e:	fa25 f50c 	lsr.w	r5, r5, ip
10001e32:	402a      	ands	r2, r5
10001e34:	f3c2 0213 	ubfx	r2, r2, #0, #20
10001e38:	4302      	orrs	r2, r0
10001e3a:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
10001e3e:	68c8      	ldr	r0, [r1, #12]
10001e40:	4ab0      	ldr	r2, [pc, #704]	; (10002104 <HAL_ADC_ConfigChannel+0x390>)
10001e42:	4290      	cmp	r0, r2
10001e44:	f000 809f 	beq.w	10001f86 <HAL_ADC_ConfigChannel+0x212>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
10001e48:	680a      	ldr	r2, [r1, #0]
10001e4a:	2a00      	cmp	r2, #0
10001e4c:	f2c0 815c 	blt.w	10002108 <HAL_ADC_ConfigChannel+0x394>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10001e50:	2000      	movs	r0, #0
10001e52:	e7a6      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10001e54:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
10001e58:	b132      	cbz	r2, 10001e68 <HAL_ADC_ConfigChannel+0xf4>
  {
    return 32U;
  }
  return __builtin_clz(value);
10001e5a:	fab2 f282 	clz	r2, r2
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
10001e5e:	f002 021f 	and.w	r2, r2, #31
10001e62:	2401      	movs	r4, #1
10001e64:	4094      	lsls	r4, r2
10001e66:	e7aa      	b.n	10001dbe <HAL_ADC_ConfigChannel+0x4a>
    return 32U;
10001e68:	2220      	movs	r2, #32
10001e6a:	e7f8      	b.n	10001e5e <HAL_ADC_ConfigChannel+0xea>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
10001e6c:	680f      	ldr	r7, [r1, #0]
10001e6e:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
10001e70:	3014      	adds	r0, #20
10001e72:	0e7a      	lsrs	r2, r7, #25
10001e74:	0092      	lsls	r2, r2, #2
10001e76:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
10001e7a:	5886      	ldr	r6, [r0, r2]
10001e7c:	f3c7 5e04 	ubfx	lr, r7, #20, #5
10001e80:	f04f 0c07 	mov.w	ip, #7
10001e84:	fa0c fc0e 	lsl.w	ip, ip, lr
10001e88:	ea26 0c0c 	bic.w	ip, r6, ip
10001e8c:	fa05 f50e 	lsl.w	r5, r5, lr
10001e90:	ea4c 0505 	orr.w	r5, ip, r5
10001e94:	5085      	str	r5, [r0, r2]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
10001e96:	681a      	ldr	r2, [r3, #0]
10001e98:	68d0      	ldr	r0, [r2, #12]
10001e9a:	f010 0f10 	tst.w	r0, #16
10001e9e:	d130      	bne.n	10001f02 <HAL_ADC_ConfigChannel+0x18e>
10001ea0:	6948      	ldr	r0, [r1, #20]
10001ea2:	68d5      	ldr	r5, [r2, #12]
10001ea4:	f3c5 0582 	ubfx	r5, r5, #2, #3
10001ea8:	006d      	lsls	r5, r5, #1
10001eaa:	40a8      	lsls	r0, r5
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
10001eac:	690f      	ldr	r7, [r1, #16]
10001eae:	2f04      	cmp	r7, #4
10001eb0:	d035      	beq.n	10001f1e <HAL_ADC_ConfigChannel+0x1aa>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
10001eb2:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10001eb4:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
10001eb6:	f852 5027 	ldr.w	r5, [r2, r7, lsl #2]
10001eba:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
10001ebe:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
10001ec2:	4330      	orrs	r0, r6
10001ec4:	4328      	orrs	r0, r5
10001ec6:	f842 0027 	str.w	r0, [r2, r7, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
10001eca:	681a      	ldr	r2, [r3, #0]
10001ecc:	690e      	ldr	r6, [r1, #16]
10001ece:	7e48      	ldrb	r0, [r1, #25]
10001ed0:	2801      	cmp	r0, #1
10001ed2:	d01e      	beq.n	10001f12 <HAL_ADC_ConfigChannel+0x19e>
10001ed4:	4620      	mov	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
10001ed6:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
10001ed8:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
10001edc:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
10001ee0:	4328      	orrs	r0, r5
10001ee2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
10001ee6:	681d      	ldr	r5, [r3, #0]
10001ee8:	6908      	ldr	r0, [r1, #16]
10001eea:	7e0a      	ldrb	r2, [r1, #24]
10001eec:	2a01      	cmp	r2, #1
10001eee:	d013      	beq.n	10001f18 <HAL_ADC_ConfigChannel+0x1a4>
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
10001ef0:	692a      	ldr	r2, [r5, #16]
10001ef2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
10001ef6:	f000 001f 	and.w	r0, r0, #31
10001efa:	4084      	lsls	r4, r0
10001efc:	4314      	orrs	r4, r2
10001efe:	612c      	str	r4, [r5, #16]
}
10001f00:	e784      	b.n	10001e0c <HAL_ADC_ConfigChannel+0x98>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
10001f02:	6948      	ldr	r0, [r1, #20]
10001f04:	68d5      	ldr	r5, [r2, #12]
10001f06:	08ad      	lsrs	r5, r5, #2
10001f08:	f005 0504 	and.w	r5, r5, #4
10001f0c:	006d      	lsls	r5, r5, #1
10001f0e:	40a8      	lsls	r0, r5
10001f10:	e7cc      	b.n	10001eac <HAL_ADC_ConfigChannel+0x138>
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
10001f12:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
10001f16:	e7de      	b.n	10001ed6 <HAL_ADC_ConfigChannel+0x162>
        LL_ADC_SetDataRightShift(hadc->Instance, pConfig->OffsetNumber, (pConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
10001f18:	f44f 6400 	mov.w	r4, #2048	; 0x800
10001f1c:	e7e8      	b.n	10001ef0 <HAL_ADC_ConfigChannel+0x17c>
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10001f1e:	6e10      	ldr	r0, [r2, #96]	; 0x60
10001f20:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
10001f24:	680c      	ldr	r4, [r1, #0]
10001f26:	ebb0 6f84 	cmp.w	r0, r4, lsl #26
10001f2a:	d01d      	beq.n	10001f68 <HAL_ADC_ConfigChannel+0x1f4>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10001f2c:	6818      	ldr	r0, [r3, #0]
10001f2e:	6e42      	ldr	r2, [r0, #100]	; 0x64
10001f30:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
10001f34:	680c      	ldr	r4, [r1, #0]
10001f36:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
10001f3a:	d01a      	beq.n	10001f72 <HAL_ADC_ConfigChannel+0x1fe>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10001f3c:	6818      	ldr	r0, [r3, #0]
10001f3e:	6e82      	ldr	r2, [r0, #104]	; 0x68
10001f40:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
10001f44:	680c      	ldr	r4, [r1, #0]
10001f46:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
10001f4a:	d017      	beq.n	10001f7c <HAL_ADC_ConfigChannel+0x208>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(pConfig->Channel))
10001f4c:	6818      	ldr	r0, [r3, #0]
10001f4e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
10001f50:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
10001f54:	680c      	ldr	r4, [r1, #0]
10001f56:	ebb2 6f84 	cmp.w	r2, r4, lsl #26
10001f5a:	f47f af57 	bne.w	10001e0c <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
10001f5e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
10001f60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10001f64:	66c2      	str	r2, [r0, #108]	; 0x6c
10001f66:	e751      	b.n	10001e0c <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
10001f68:	6e10      	ldr	r0, [r2, #96]	; 0x60
10001f6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
10001f6e:	6610      	str	r0, [r2, #96]	; 0x60
10001f70:	e7dc      	b.n	10001f2c <HAL_ADC_ConfigChannel+0x1b8>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
10001f72:	6e42      	ldr	r2, [r0, #100]	; 0x64
10001f74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10001f78:	6642      	str	r2, [r0, #100]	; 0x64
10001f7a:	e7df      	b.n	10001f3c <HAL_ADC_ConfigChannel+0x1c8>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
10001f7c:	6e82      	ldr	r2, [r0, #104]	; 0x68
10001f7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10001f82:	6682      	str	r2, [r0, #104]	; 0x68
10001f84:	e7e2      	b.n	10001f4c <HAL_ADC_ConfigChannel+0x1d8>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10001f86:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10001f88:	680a      	ldr	r2, [r1, #0]
10001f8a:	f3c2 0513 	ubfx	r5, r2, #0, #20
10001f8e:	2d00      	cmp	r5, #0
10001f90:	d138      	bne.n	10002004 <HAL_ADC_ConfigChannel+0x290>
10001f92:	0e90      	lsrs	r0, r2, #26
10001f94:	3001      	adds	r0, #1
10001f96:	f000 001f 	and.w	r0, r0, #31
10001f9a:	2809      	cmp	r0, #9
10001f9c:	bf8c      	ite	hi
10001f9e:	2000      	movhi	r0, #0
10001fa0:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10001fa2:	2800      	cmp	r0, #0
10001fa4:	d065      	beq.n	10002072 <HAL_ADC_ConfigChannel+0x2fe>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
10001fa6:	2d00      	cmp	r5, #0
10001fa8:	d13b      	bne.n	10002022 <HAL_ADC_ConfigChannel+0x2ae>
10001faa:	0e90      	lsrs	r0, r2, #26
10001fac:	3001      	adds	r0, #1
10001fae:	0680      	lsls	r0, r0, #26
10001fb0:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
10001fb4:	2d00      	cmp	r5, #0
10001fb6:	d140      	bne.n	1000203a <HAL_ADC_ConfigChannel+0x2c6>
10001fb8:	0e96      	lsrs	r6, r2, #26
10001fba:	3601      	adds	r6, #1
10001fbc:	f006 071f 	and.w	r7, r6, #31
10001fc0:	2601      	movs	r6, #1
10001fc2:	40be      	lsls	r6, r7
10001fc4:	4330      	orrs	r0, r6
10001fc6:	2d00      	cmp	r5, #0
10001fc8:	d145      	bne.n	10002056 <HAL_ADC_ConfigChannel+0x2e2>
10001fca:	0e92      	lsrs	r2, r2, #26
10001fcc:	3201      	adds	r2, #1
10001fce:	f002 021f 	and.w	r2, r2, #31
10001fd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
10001fd6:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
10001fd8:	4302      	orrs	r2, r0
10001fda:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
10001fdc:	f104 0614 	add.w	r6, r4, #20
10001fe0:	0e55      	lsrs	r5, r2, #25
10001fe2:	00ad      	lsls	r5, r5, #2
10001fe4:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
10001fe8:	5974      	ldr	r4, [r6, r5]
10001fea:	f3c2 5204 	ubfx	r2, r2, #20, #5
10001fee:	f04f 0c07 	mov.w	ip, #7
10001ff2:	fa0c fc02 	lsl.w	ip, ip, r2
10001ff6:	ea24 0c0c 	bic.w	ip, r4, ip
10001ffa:	4090      	lsls	r0, r2
10001ffc:	ea4c 0000 	orr.w	r0, ip, r0
10002000:	5170      	str	r0, [r6, r5]
}
10002002:	e721      	b.n	10001e48 <HAL_ADC_ConfigChannel+0xd4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002004:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
10002008:	b148      	cbz	r0, 1000201e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
1000200a:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
1000200e:	3001      	adds	r0, #1
10002010:	f000 001f 	and.w	r0, r0, #31
10002014:	2809      	cmp	r0, #9
10002016:	bf8c      	ite	hi
10002018:	2000      	movhi	r0, #0
1000201a:	2001      	movls	r0, #1
1000201c:	e7c1      	b.n	10001fa2 <HAL_ADC_ConfigChannel+0x22e>
    return 32U;
1000201e:	2020      	movs	r0, #32
10002020:	e7f5      	b.n	1000200e <HAL_ADC_ConfigChannel+0x29a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002022:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
10002026:	b130      	cbz	r0, 10002036 <HAL_ADC_ConfigChannel+0x2c2>
  return __builtin_clz(value);
10002028:	fab0 f080 	clz	r0, r0
1000202c:	3001      	adds	r0, #1
1000202e:	0680      	lsls	r0, r0, #26
10002030:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
10002034:	e7be      	b.n	10001fb4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
10002036:	2020      	movs	r0, #32
10002038:	e7f8      	b.n	1000202c <HAL_ADC_ConfigChannel+0x2b8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
1000203a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
1000203e:	b146      	cbz	r6, 10002052 <HAL_ADC_ConfigChannel+0x2de>
  return __builtin_clz(value);
10002040:	fab6 f686 	clz	r6, r6
10002044:	3601      	adds	r6, #1
10002046:	f006 061f 	and.w	r6, r6, #31
1000204a:	2701      	movs	r7, #1
1000204c:	fa07 f606 	lsl.w	r6, r7, r6
10002050:	e7b8      	b.n	10001fc4 <HAL_ADC_ConfigChannel+0x250>
    return 32U;
10002052:	2620      	movs	r6, #32
10002054:	e7f6      	b.n	10002044 <HAL_ADC_ConfigChannel+0x2d0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002056:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
1000205a:	b142      	cbz	r2, 1000206e <HAL_ADC_ConfigChannel+0x2fa>
  return __builtin_clz(value);
1000205c:	fab2 f282 	clz	r2, r2
10002060:	3201      	adds	r2, #1
10002062:	f002 021f 	and.w	r2, r2, #31
10002066:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1000206a:	0512      	lsls	r2, r2, #20
1000206c:	e7b4      	b.n	10001fd8 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
1000206e:	2220      	movs	r2, #32
10002070:	e7f6      	b.n	10002060 <HAL_ADC_ConfigChannel+0x2ec>
10002072:	b9cd      	cbnz	r5, 100020a8 <HAL_ADC_ConfigChannel+0x334>
10002074:	0e90      	lsrs	r0, r2, #26
10002076:	3001      	adds	r0, #1
10002078:	0680      	lsls	r0, r0, #26
1000207a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
1000207e:	b9fd      	cbnz	r5, 100020c0 <HAL_ADC_ConfigChannel+0x34c>
10002080:	0e96      	lsrs	r6, r2, #26
10002082:	3601      	adds	r6, #1
10002084:	f006 071f 	and.w	r7, r6, #31
10002088:	2601      	movs	r6, #1
1000208a:	40be      	lsls	r6, r7
1000208c:	4330      	orrs	r0, r6
1000208e:	bb2d      	cbnz	r5, 100020dc <HAL_ADC_ConfigChannel+0x368>
10002090:	0e92      	lsrs	r2, r2, #26
10002092:	3201      	adds	r2, #1
10002094:	f002 021f 	and.w	r2, r2, #31
10002098:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1000209c:	3a1e      	subs	r2, #30
1000209e:	0512      	lsls	r2, r2, #20
100020a0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
100020a4:	4302      	orrs	r2, r0
100020a6:	e798      	b.n	10001fda <HAL_ADC_ConfigChannel+0x266>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100020a8:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
100020ac:	b130      	cbz	r0, 100020bc <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
100020ae:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) + 1UL) & 0x1FUL)),
100020b2:	3001      	adds	r0, #1
100020b4:	0680      	lsls	r0, r0, #26
100020b6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
100020ba:	e7e0      	b.n	1000207e <HAL_ADC_ConfigChannel+0x30a>
    return 32U;
100020bc:	2020      	movs	r0, #32
100020be:	e7f8      	b.n	100020b2 <HAL_ADC_ConfigChannel+0x33e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100020c0:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
100020c4:	b146      	cbz	r6, 100020d8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
100020c6:	fab6 f686 	clz	r6, r6
100020ca:	3601      	adds	r6, #1
100020cc:	f006 061f 	and.w	r6, r6, #31
100020d0:	2701      	movs	r7, #1
100020d2:	fa07 f606 	lsl.w	r6, r7, r6
100020d6:	e7d9      	b.n	1000208c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
100020d8:	2620      	movs	r6, #32
100020da:	e7f6      	b.n	100020ca <HAL_ADC_ConfigChannel+0x356>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100020dc:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
100020e0:	b15a      	cbz	r2, 100020fa <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
100020e2:	fab2 f282 	clz	r2, r2
100020e6:	3201      	adds	r2, #1
100020e8:	f002 021f 	and.w	r2, r2, #31
100020ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
100020f0:	3a1e      	subs	r2, #30
100020f2:	0512      	lsls	r2, r2, #20
100020f4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
100020f8:	e7d4      	b.n	100020a4 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
100020fa:	2220      	movs	r2, #32
100020fc:	e7f3      	b.n	100020e6 <HAL_ADC_ConfigChannel+0x372>
100020fe:	bf00      	nop
10002100:	000fffff 	.word	0x000fffff
10002104:	47ff0000 	.word	0x47ff0000
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
10002108:	4947      	ldr	r1, [pc, #284]	; (10002228 <HAL_ADC_ConfigChannel+0x4b4>)
1000210a:	688c      	ldr	r4, [r1, #8]
1000210c:	f004 75e0 	and.w	r5, r4, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10002110:	f5a1 7140 	sub.w	r1, r1, #768	; 0x300
10002114:	6889      	ldr	r1, [r1, #8]
10002116:	f011 0101 	ands.w	r1, r1, #1
1000211a:	d000      	beq.n	1000211e <HAL_ADC_ConfigChannel+0x3aa>
1000211c:	2101      	movs	r1, #1
1000211e:	4843      	ldr	r0, [pc, #268]	; (1000222c <HAL_ADC_ConfigChannel+0x4b8>)
10002120:	6880      	ldr	r0, [r0, #8]
10002122:	f010 0001 	ands.w	r0, r0, #1
10002126:	d000      	beq.n	1000212a <HAL_ADC_ConfigChannel+0x3b6>
10002128:	2001      	movs	r0, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
1000212a:	4301      	orrs	r1, r0
1000212c:	d171      	bne.n	10002212 <HAL_ADC_ConfigChannel+0x49e>
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
1000212e:	4940      	ldr	r1, [pc, #256]	; (10002230 <HAL_ADC_ConfigChannel+0x4bc>)
10002130:	428a      	cmp	r2, r1
10002132:	d00a      	beq.n	1000214a <HAL_ADC_ConfigChannel+0x3d6>
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
10002134:	493f      	ldr	r1, [pc, #252]	; (10002234 <HAL_ADC_ConfigChannel+0x4c0>)
10002136:	428a      	cmp	r2, r1
10002138:	d02b      	beq.n	10002192 <HAL_ADC_ConfigChannel+0x41e>
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
1000213a:	493f      	ldr	r1, [pc, #252]	; (10002238 <HAL_ADC_ConfigChannel+0x4c4>)
1000213c:	428a      	cmp	r2, r1
1000213e:	d03b      	beq.n	100021b8 <HAL_ADC_ConfigChannel+0x444>
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VDDCORE) == 0UL))
10002140:	493e      	ldr	r1, [pc, #248]	; (1000223c <HAL_ADC_ConfigChannel+0x4c8>)
10002142:	428a      	cmp	r2, r1
10002144:	d04b      	beq.n	100021de <HAL_ADC_ConfigChannel+0x46a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10002146:	2000      	movs	r0, #0
10002148:	e62b      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
1000214a:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
1000214e:	d1f1      	bne.n	10002134 <HAL_ADC_ConfigChannel+0x3c0>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
10002150:	6819      	ldr	r1, [r3, #0]
10002152:	4a36      	ldr	r2, [pc, #216]	; (1000222c <HAL_ADC_ConfigChannel+0x4b8>)
10002154:	4291      	cmp	r1, r2
10002156:	d001      	beq.n	1000215c <HAL_ADC_ConfigChannel+0x3e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10002158:	2000      	movs	r0, #0
1000215a:	e622      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
1000215c:	f445 0200 	orr.w	r2, r5, #8388608	; 0x800000
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
10002160:	4831      	ldr	r0, [pc, #196]	; (10002228 <HAL_ADC_ConfigChannel+0x4b4>)
10002162:	6881      	ldr	r1, [r0, #8]
10002164:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
10002168:	430a      	orrs	r2, r1
1000216a:	6082      	str	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
1000216c:	4a34      	ldr	r2, [pc, #208]	; (10002240 <HAL_ADC_ConfigChannel+0x4cc>)
1000216e:	6812      	ldr	r2, [r2, #0]
10002170:	0992      	lsrs	r2, r2, #6
10002172:	4934      	ldr	r1, [pc, #208]	; (10002244 <HAL_ADC_ConfigChannel+0x4d0>)
10002174:	fba1 1202 	umull	r1, r2, r1, r2
10002178:	0992      	lsrs	r2, r2, #6
1000217a:	3201      	adds	r2, #1
1000217c:	0052      	lsls	r2, r2, #1
1000217e:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
10002180:	e002      	b.n	10002188 <HAL_ADC_ConfigChannel+0x414>
                wait_loop_index--;
10002182:	9a01      	ldr	r2, [sp, #4]
10002184:	3a01      	subs	r2, #1
10002186:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
10002188:	9a01      	ldr	r2, [sp, #4]
1000218a:	2a00      	cmp	r2, #0
1000218c:	d1f9      	bne.n	10002182 <HAL_ADC_ConfigChannel+0x40e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1000218e:	2000      	movs	r0, #0
10002190:	e607      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
10002192:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
10002196:	d1d0      	bne.n	1000213a <HAL_ADC_ConfigChannel+0x3c6>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
10002198:	6819      	ldr	r1, [r3, #0]
1000219a:	4a24      	ldr	r2, [pc, #144]	; (1000222c <HAL_ADC_ConfigChannel+0x4b8>)
1000219c:	4291      	cmp	r1, r2
1000219e:	d001      	beq.n	100021a4 <HAL_ADC_ConfigChannel+0x430>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
100021a0:	2000      	movs	r0, #0
100021a2:	e5fe      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
100021a4:	f045 7280 	orr.w	r2, r5, #16777216	; 0x1000000
100021a8:	481f      	ldr	r0, [pc, #124]	; (10002228 <HAL_ADC_ConfigChannel+0x4b4>)
100021aa:	6881      	ldr	r1, [r0, #8]
100021ac:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
100021b0:	430a      	orrs	r2, r1
100021b2:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
100021b4:	2000      	movs	r0, #0
}
100021b6:	e5f4      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
100021b8:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
100021bc:	d1c0      	bne.n	10002140 <HAL_ADC_ConfigChannel+0x3cc>
            if (ADC_VREFINT_INSTANCE(hadc))
100021be:	6819      	ldr	r1, [r3, #0]
100021c0:	4a1a      	ldr	r2, [pc, #104]	; (1000222c <HAL_ADC_ConfigChannel+0x4b8>)
100021c2:	4291      	cmp	r1, r2
100021c4:	d001      	beq.n	100021ca <HAL_ADC_ConfigChannel+0x456>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
100021c6:	2000      	movs	r0, #0
100021c8:	e5eb      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
100021ca:	f445 0280 	orr.w	r2, r5, #4194304	; 0x400000
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
100021ce:	4816      	ldr	r0, [pc, #88]	; (10002228 <HAL_ADC_ConfigChannel+0x4b4>)
100021d0:	6881      	ldr	r1, [r0, #8]
100021d2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
100021d6:	430a      	orrs	r2, r1
100021d8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
100021da:	2000      	movs	r0, #0
}
100021dc:	e5e1      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
            if (ADC_VDDCORE_INSTANCE(hadc))
100021de:	6819      	ldr	r1, [r3, #0]
100021e0:	4a12      	ldr	r2, [pc, #72]	; (1000222c <HAL_ADC_ConfigChannel+0x4b8>)
100021e2:	4291      	cmp	r1, r2
100021e4:	d001      	beq.n	100021ea <HAL_ADC_ConfigChannel+0x476>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
100021e6:	2000      	movs	r0, #0
100021e8:	e5db      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VDDCORE | tmp_config_internal_channel);
100021ea:	f045 0201 	orr.w	r2, r5, #1
  if(PathInternal == LL_ADC_PATH_INTERNAL_VDDCORE)
100021ee:	b13d      	cbz	r5, 10002200 <HAL_ADC_ConfigChannel+0x48c>
    MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
100021f0:	480d      	ldr	r0, [pc, #52]	; (10002228 <HAL_ADC_ConfigChannel+0x4b4>)
100021f2:	6881      	ldr	r1, [r0, #8]
100021f4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
100021f8:	430a      	orrs	r2, r1
100021fa:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
100021fc:	2000      	movs	r0, #0
100021fe:	e5d0      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
    SET_BIT(ADC2->OR, ADC2_OR_VDDCOREEN);
10002200:	490a      	ldr	r1, [pc, #40]	; (1000222c <HAL_ADC_ConfigChannel+0x4b8>)
10002202:	f8d1 20d0 	ldr.w	r2, [r1, #208]	; 0xd0
10002206:	f042 0201 	orr.w	r2, r2, #1
1000220a:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
1000220e:	2000      	movs	r0, #0
10002210:	e5c7      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
10002212:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10002214:	f042 0220 	orr.w	r2, r2, #32
10002218:	655a      	str	r2, [r3, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
1000221a:	2001      	movs	r0, #1
1000221c:	e5c1      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1000221e:	2000      	movs	r0, #0
10002220:	e5bf      	b.n	10001da2 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
10002222:	2002      	movs	r0, #2
10002224:	e5c0      	b.n	10001da8 <HAL_ADC_ConfigChannel+0x34>
10002226:	bf00      	nop
10002228:	48003300 	.word	0x48003300
1000222c:	48003100 	.word	0x48003100
10002230:	b2601000 	.word	0xb2601000
10002234:	bef08000 	.word	0xbef08000
10002238:	b6902000 	.word	0xb6902000
1000223c:	bac04000 	.word	0xbac04000
10002240:	100203f0 	.word	0x100203f0
10002244:	053e2d63 	.word	0x053e2d63

10002248 <HAL_ADC_AnalogWDGConfig>:
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
10002248:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
1000224c:	2a01      	cmp	r2, #1
1000224e:	f000 81ef 	beq.w	10002630 <HAL_ADC_AnalogWDGConfig+0x3e8>
{
10002252:	b470      	push	{r4, r5, r6}
10002254:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
10002256:	2201      	movs	r2, #1
10002258:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
1000225c:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
1000225e:	68a2      	ldr	r2, [r4, #8]
10002260:	f012 0204 	ands.w	r2, r2, #4
10002264:	d000      	beq.n	10002268 <HAL_ADC_AnalogWDGConfig+0x20>
10002266:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10002268:	68a0      	ldr	r0, [r4, #8]
1000226a:	f010 0008 	ands.w	r0, r0, #8
1000226e:	d000      	beq.n	10002272 <HAL_ADC_AnalogWDGConfig+0x2a>
10002270:	2001      	movs	r0, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
10002272:	2a00      	cmp	r2, #0
10002274:	f040 81d2 	bne.w	1000261c <HAL_ADC_AnalogWDGConfig+0x3d4>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
10002278:	2800      	cmp	r0, #0
1000227a:	f040 81cf 	bne.w	1000261c <HAL_ADC_AnalogWDGConfig+0x3d4>
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
1000227e:	6808      	ldr	r0, [r1, #0]
10002280:	4ab0      	ldr	r2, [pc, #704]	; (10002544 <HAL_ADC_AnalogWDGConfig+0x2fc>)
10002282:	4290      	cmp	r0, r2
10002284:	d069      	beq.n	1000235a <HAL_ADC_AnalogWDGConfig+0x112>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
10002286:	684a      	ldr	r2, [r1, #4]
10002288:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
1000228c:	f000 8111 	beq.w	100024b2 <HAL_ADC_AnalogWDGConfig+0x26a>
10002290:	f200 8108 	bhi.w	100024a4 <HAL_ADC_AnalogWDGConfig+0x25c>
10002294:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
10002298:	f000 810b 	beq.w	100024b2 <HAL_ADC_AnalogWDGConfig+0x26a>
1000229c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
100022a0:	f000 813e 	beq.w	10002520 <HAL_ADC_AnalogWDGConfig+0x2d8>
100022a4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
100022a8:	f000 813a 	beq.w	10002520 <HAL_ADC_AnalogWDGConfig+0x2d8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
100022ac:	340c      	adds	r4, #12
100022ae:	f3c0 5201 	ubfx	r2, r0, #20, #2
100022b2:	f000 0501 	and.w	r5, r0, #1
100022b6:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
100022ba:	eb02 0285 	add.w	r2, r2, r5, lsl #2
  MODIFY_REG(*preg,
100022be:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
100022c2:	f020 4002 	bic.w	r0, r0, #2181038080	; 0x82000000
100022c6:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
100022ca:	ea25 0000 	bic.w	r0, r5, r0
100022ce:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
          break;
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
100022d2:	681a      	ldr	r2, [r3, #0]
100022d4:	68d0      	ldr	r0, [r2, #12]
100022d6:	f010 0f10 	tst.w	r0, #16
100022da:	f040 815d 	bne.w	10002598 <HAL_ADC_AnalogWDGConfig+0x350>
100022de:	690c      	ldr	r4, [r1, #16]
100022e0:	68d0      	ldr	r0, [r2, #12]
100022e2:	f3c0 0082 	ubfx	r0, r0, #2, #3
100022e6:	0040      	lsls	r0, r0, #1
100022e8:	fa04 f000 	lsl.w	r0, r4, r0
      tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
100022ec:	68d4      	ldr	r4, [r2, #12]
100022ee:	f014 0f10 	tst.w	r4, #16
100022f2:	f040 815a 	bne.w	100025aa <HAL_ADC_AnalogWDGConfig+0x362>
100022f6:	694c      	ldr	r4, [r1, #20]
100022f8:	68d5      	ldr	r5, [r2, #12]
100022fa:	f3c5 0582 	ubfx	r5, r5, #2, #3
100022fe:	006d      	lsls	r5, r5, #1
10002300:	40ac      	lsls	r4, r5

     if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
10002302:	4d91      	ldr	r5, [pc, #580]	; (10002548 <HAL_ADC_AnalogWDGConfig+0x300>)
10002304:	680e      	ldr	r6, [r1, #0]
10002306:	42ae      	cmp	r6, r5
10002308:	f000 815a 	beq.w	100025c0 <HAL_ADC_AnalogWDGConfig+0x378>
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR2_HT2 , tmp_awd_high_threshold_shifted);
      }
      else
      {
        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR3_LT3 , tmp_awd_low_threshold_shifted);
1000230c:	f8d2 50b8 	ldr.w	r5, [r2, #184]	; 0xb8
10002310:	f005 457c 	and.w	r5, r5, #4227858432	; 0xfc000000
10002314:	432c      	orrs	r4, r5
10002316:	f8c2 40b8 	str.w	r4, [r2, #184]	; 0xb8
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR3_HT3 , tmp_awd_high_threshold_shifted);
1000231a:	681c      	ldr	r4, [r3, #0]
1000231c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
10002320:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
10002324:	4310      	orrs	r0, r2
10002326:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
1000232a:	6808      	ldr	r0, [r1, #0]
1000232c:	4a86      	ldr	r2, [pc, #536]	; (10002548 <HAL_ADC_AnalogWDGConfig+0x300>)
1000232e:	4290      	cmp	r0, r2
10002330:	f000 8156 	beq.w	100025e0 <HAL_ADC_AnalogWDGConfig+0x398>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
10002334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
10002336:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
1000233a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
1000233c:	681a      	ldr	r2, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
1000233e:	f44f 7000 	mov.w	r0, #512	; 0x200
10002342:	6010      	str	r0, [r2, #0]

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
10002344:	7b0a      	ldrb	r2, [r1, #12]
10002346:	2a01      	cmp	r2, #1
10002348:	f000 8162 	beq.w	10002610 <HAL_ADC_AnalogWDGConfig+0x3c8>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
1000234c:	6819      	ldr	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
1000234e:	684a      	ldr	r2, [r1, #4]
10002350:	f422 7200 	bic.w	r2, r2, #512	; 0x200
10002354:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10002356:	2000      	movs	r0, #0
}
10002358:	e165      	b.n	10002626 <HAL_ADC_AnalogWDGConfig+0x3de>
      switch (pAnalogWDGConfig->WatchdogMode)
1000235a:	684a      	ldr	r2, [r1, #4]
1000235c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
10002360:	d06c      	beq.n	1000243c <HAL_ADC_AnalogWDGConfig+0x1f4>
10002362:	d81a      	bhi.n	1000239a <HAL_ADC_AnalogWDGConfig+0x152>
10002364:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
10002368:	d02a      	beq.n	100023c0 <HAL_ADC_AnalogWDGConfig+0x178>
1000236a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
1000236e:	d108      	bne.n	10002382 <HAL_ADC_AnalogWDGConfig+0x13a>
  MODIFY_REG(*preg,
10002370:	68e2      	ldr	r2, [r4, #12]
10002372:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
10002376:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
1000237a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
1000237e:	60e2      	str	r2, [r4, #12]
}
10002380:	e02a      	b.n	100023d8 <HAL_ADC_AnalogWDGConfig+0x190>
10002382:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
10002386:	d16f      	bne.n	10002468 <HAL_ADC_AnalogWDGConfig+0x220>
  MODIFY_REG(*preg,
10002388:	68e2      	ldr	r2, [r4, #12]
1000238a:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
1000238e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
10002392:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
10002396:	60e2      	str	r2, [r4, #12]
}
10002398:	e01e      	b.n	100023d8 <HAL_ADC_AnalogWDGConfig+0x190>
1000239a:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
1000239e:	d05a      	beq.n	10002456 <HAL_ADC_AnalogWDGConfig+0x20e>
100023a0:	f1b2 7fe0 	cmp.w	r2, #29360128	; 0x1c00000
100023a4:	d160      	bne.n	10002468 <HAL_ADC_AnalogWDGConfig+0x220>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
100023a6:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(*preg,
100023a8:	68e2      	ldr	r2, [r4, #12]
100023aa:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
100023ae:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
100023b2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
100023b6:	f040 70e0 	orr.w	r0, r0, #29360128	; 0x1c00000
100023ba:	4302      	orrs	r2, r0
100023bc:	60e2      	str	r2, [r4, #12]
}
100023be:	e00b      	b.n	100023d8 <HAL_ADC_AnalogWDGConfig+0x190>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
100023c0:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(*preg,
100023c2:	68e2      	ldr	r2, [r4, #12]
100023c4:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
100023c8:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
100023cc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
100023d0:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
100023d4:	4302      	orrs	r2, r0
100023d6:	60e2      	str	r2, [r4, #12]
      tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
100023d8:	681a      	ldr	r2, [r3, #0]
100023da:	68d0      	ldr	r0, [r2, #12]
100023dc:	f010 0f10 	tst.w	r0, #16
100023e0:	d149      	bne.n	10002476 <HAL_ADC_AnalogWDGConfig+0x22e>
100023e2:	690c      	ldr	r4, [r1, #16]
100023e4:	68d0      	ldr	r0, [r2, #12]
100023e6:	f3c0 0082 	ubfx	r0, r0, #2, #3
100023ea:	0040      	lsls	r0, r0, #1
100023ec:	4084      	lsls	r4, r0
      tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
100023ee:	68d0      	ldr	r0, [r2, #12]
100023f0:	f010 0f10 	tst.w	r0, #16
100023f4:	d147      	bne.n	10002486 <HAL_ADC_AnalogWDGConfig+0x23e>
100023f6:	6948      	ldr	r0, [r1, #20]
100023f8:	68d5      	ldr	r5, [r2, #12]
100023fa:	f3c5 0582 	ubfx	r5, r5, #2, #3
100023fe:	006d      	lsls	r5, r5, #1
10002400:	fa00 f505 	lsl.w	r5, r0, r5
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR1_LT1 , tmp_awd_low_threshold_shifted);
10002404:	6a10      	ldr	r0, [r2, #32]
10002406:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
1000240a:	4328      	orrs	r0, r5
1000240c:	6210      	str	r0, [r2, #32]
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR1_HT1 , tmp_awd_high_threshold_shifted);
1000240e:	6818      	ldr	r0, [r3, #0]
10002410:	6a42      	ldr	r2, [r0, #36]	; 0x24
10002412:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
10002416:	4322      	orrs	r2, r4
10002418:	6242      	str	r2, [r0, #36]	; 0x24
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1000241a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
1000241c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
10002420:	655a      	str	r2, [r3, #84]	; 0x54
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
10002422:	681a      	ldr	r2, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
10002424:	2080      	movs	r0, #128	; 0x80
10002426:	6010      	str	r0, [r2, #0]
      if (pAnalogWDGConfig->ITMode == ENABLE)
10002428:	7b0a      	ldrb	r2, [r1, #12]
1000242a:	2a01      	cmp	r2, #1
1000242c:	d034      	beq.n	10002498 <HAL_ADC_AnalogWDGConfig+0x250>
        LL_ADC_DisableIT_AWD1(hadc->Instance);
1000242e:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
10002430:	684a      	ldr	r2, [r1, #4]
10002432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
10002436:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10002438:	2000      	movs	r0, #0
}
1000243a:	e0f4      	b.n	10002626 <HAL_ADC_AnalogWDGConfig+0x3de>
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
1000243c:	6888      	ldr	r0, [r1, #8]
  MODIFY_REG(*preg,
1000243e:	68e2      	ldr	r2, [r4, #12]
10002440:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
10002444:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
10002448:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
1000244c:	f040 70a0 	orr.w	r0, r0, #20971520	; 0x1400000
10002450:	4302      	orrs	r2, r0
10002452:	60e2      	str	r2, [r4, #12]
}
10002454:	e7c0      	b.n	100023d8 <HAL_ADC_AnalogWDGConfig+0x190>
  MODIFY_REG(*preg,
10002456:	68e2      	ldr	r2, [r4, #12]
10002458:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
1000245c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
10002460:	f042 72c0 	orr.w	r2, r2, #25165824	; 0x1800000
10002464:	60e2      	str	r2, [r4, #12]
}
10002466:	e7b7      	b.n	100023d8 <HAL_ADC_AnalogWDGConfig+0x190>
  MODIFY_REG(*preg,
10002468:	68e2      	ldr	r2, [r4, #12]
1000246a:	f022 42fb 	bic.w	r2, r2, #2105540608	; 0x7d800000
1000246e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
10002472:	60e2      	str	r2, [r4, #12]
}
10002474:	e7b0      	b.n	100023d8 <HAL_ADC_AnalogWDGConfig+0x190>
      tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
10002476:	690c      	ldr	r4, [r1, #16]
10002478:	68d0      	ldr	r0, [r2, #12]
1000247a:	0880      	lsrs	r0, r0, #2
1000247c:	f000 0004 	and.w	r0, r0, #4
10002480:	0040      	lsls	r0, r0, #1
10002482:	4084      	lsls	r4, r0
10002484:	e7b3      	b.n	100023ee <HAL_ADC_AnalogWDGConfig+0x1a6>
      tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
10002486:	6948      	ldr	r0, [r1, #20]
10002488:	68d5      	ldr	r5, [r2, #12]
1000248a:	08ad      	lsrs	r5, r5, #2
1000248c:	f005 0504 	and.w	r5, r5, #4
10002490:	006d      	lsls	r5, r5, #1
10002492:	fa00 f505 	lsl.w	r5, r0, r5
10002496:	e7b5      	b.n	10002404 <HAL_ADC_AnalogWDGConfig+0x1bc>
        LL_ADC_EnableIT_AWD1(hadc->Instance);
10002498:	6819      	ldr	r1, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
1000249a:	684a      	ldr	r2, [r1, #4]
1000249c:	4302      	orrs	r2, r0
1000249e:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
100024a0:	2000      	movs	r0, #0
}
100024a2:	e0c0      	b.n	10002626 <HAL_ADC_AnalogWDGConfig+0x3de>
      switch (pAnalogWDGConfig->WatchdogMode)
100024a4:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
100024a8:	d03a      	beq.n	10002520 <HAL_ADC_AnalogWDGConfig+0x2d8>
100024aa:	f1b2 7fe0 	cmp.w	r2, #29360128	; 0x1c00000
100024ae:	f47f aefd 	bne.w	100022ac <HAL_ADC_AnalogWDGConfig+0x64>
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
100024b2:	4a25      	ldr	r2, [pc, #148]	; (10002548 <HAL_ADC_AnalogWDGConfig+0x300>)
100024b4:	4290      	cmp	r0, r2
100024b6:	d00d      	beq.n	100024d4 <HAL_ADC_AnalogWDGConfig+0x28c>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
100024b8:	688a      	ldr	r2, [r1, #8]
100024ba:	f3c2 0013 	ubfx	r0, r2, #0, #20
100024be:	bb18      	cbnz	r0, 10002508 <HAL_ADC_AnalogWDGConfig+0x2c0>
100024c0:	f3c2 6284 	ubfx	r2, r2, #26, #5
100024c4:	2001      	movs	r0, #1
100024c6:	4090      	lsls	r0, r2
100024c8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
100024cc:	4302      	orrs	r2, r0
100024ce:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
100024d2:	e6fe      	b.n	100022d2 <HAL_ADC_AnalogWDGConfig+0x8a>
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
100024d4:	688a      	ldr	r2, [r1, #8]
100024d6:	f3c2 0013 	ubfx	r0, r2, #0, #20
100024da:	b948      	cbnz	r0, 100024f0 <HAL_ADC_AnalogWDGConfig+0x2a8>
100024dc:	f3c2 6284 	ubfx	r2, r2, #26, #5
100024e0:	2001      	movs	r0, #1
100024e2:	4090      	lsls	r0, r2
100024e4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
100024e8:	4302      	orrs	r2, r0
100024ea:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
100024ee:	e6f0      	b.n	100022d2 <HAL_ADC_AnalogWDGConfig+0x8a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
100024f0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
100024f4:	b132      	cbz	r2, 10002504 <HAL_ADC_AnalogWDGConfig+0x2bc>
  return __builtin_clz(value);
100024f6:	fab2 f282 	clz	r2, r2
100024fa:	f002 021f 	and.w	r2, r2, #31
100024fe:	2001      	movs	r0, #1
10002500:	4090      	lsls	r0, r2
10002502:	e7ef      	b.n	100024e4 <HAL_ADC_AnalogWDGConfig+0x29c>
    return 32U;
10002504:	2220      	movs	r2, #32
10002506:	e7f8      	b.n	100024fa <HAL_ADC_AnalogWDGConfig+0x2b2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002508:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
1000250c:	b132      	cbz	r2, 1000251c <HAL_ADC_AnalogWDGConfig+0x2d4>
  return __builtin_clz(value);
1000250e:	fab2 f282 	clz	r2, r2
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
10002512:	f002 021f 	and.w	r2, r2, #31
10002516:	2001      	movs	r0, #1
10002518:	4090      	lsls	r0, r2
1000251a:	e7d5      	b.n	100024c8 <HAL_ADC_AnalogWDGConfig+0x280>
    return 32U;
1000251c:	2220      	movs	r2, #32
1000251e:	e7f8      	b.n	10002512 <HAL_ADC_AnalogWDGConfig+0x2ca>
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
10002520:	4a09      	ldr	r2, [pc, #36]	; (10002548 <HAL_ADC_AnalogWDGConfig+0x300>)
10002522:	4290      	cmp	r0, r2
10002524:	d012      	beq.n	1000254c <HAL_ADC_AnalogWDGConfig+0x304>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
10002526:	688a      	ldr	r2, [r1, #8]
10002528:	f3c2 0013 	ubfx	r0, r2, #0, #20
1000252c:	bb40      	cbnz	r0, 10002580 <HAL_ADC_AnalogWDGConfig+0x338>
1000252e:	f3c2 6284 	ubfx	r2, r2, #26, #5
10002532:	2001      	movs	r0, #1
10002534:	4090      	lsls	r0, r2
10002536:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
1000253a:	4302      	orrs	r2, r0
1000253c:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
10002540:	e6c7      	b.n	100022d2 <HAL_ADC_AnalogWDGConfig+0x8a>
10002542:	bf00      	nop
10002544:	7dc00000 	.word	0x7dc00000
10002548:	001fffff 	.word	0x001fffff
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
1000254c:	688a      	ldr	r2, [r1, #8]
1000254e:	f3c2 0013 	ubfx	r0, r2, #0, #20
10002552:	b948      	cbnz	r0, 10002568 <HAL_ADC_AnalogWDGConfig+0x320>
10002554:	f3c2 6284 	ubfx	r2, r2, #26, #5
10002558:	2001      	movs	r0, #1
1000255a:	4090      	lsls	r0, r2
1000255c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
10002560:	4302      	orrs	r2, r0
10002562:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
10002566:	e6b4      	b.n	100022d2 <HAL_ADC_AnalogWDGConfig+0x8a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002568:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
1000256c:	b132      	cbz	r2, 1000257c <HAL_ADC_AnalogWDGConfig+0x334>
  return __builtin_clz(value);
1000256e:	fab2 f282 	clz	r2, r2
10002572:	f002 021f 	and.w	r2, r2, #31
10002576:	2001      	movs	r0, #1
10002578:	4090      	lsls	r0, r2
1000257a:	e7ef      	b.n	1000255c <HAL_ADC_AnalogWDGConfig+0x314>
    return 32U;
1000257c:	2220      	movs	r2, #32
1000257e:	e7f8      	b.n	10002572 <HAL_ADC_AnalogWDGConfig+0x32a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
10002580:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
10002584:	b132      	cbz	r2, 10002594 <HAL_ADC_AnalogWDGConfig+0x34c>
  return __builtin_clz(value);
10002586:	fab2 f282 	clz	r2, r2
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel) & 0x1FUL)));
1000258a:	f002 021f 	and.w	r2, r2, #31
1000258e:	2001      	movs	r0, #1
10002590:	4090      	lsls	r0, r2
10002592:	e7d0      	b.n	10002536 <HAL_ADC_AnalogWDGConfig+0x2ee>
    return 32U;
10002594:	2220      	movs	r2, #32
10002596:	e7f8      	b.n	1000258a <HAL_ADC_AnalogWDGConfig+0x342>
      tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
10002598:	690c      	ldr	r4, [r1, #16]
1000259a:	68d0      	ldr	r0, [r2, #12]
1000259c:	0880      	lsrs	r0, r0, #2
1000259e:	f000 0004 	and.w	r0, r0, #4
100025a2:	0040      	lsls	r0, r0, #1
100025a4:	fa04 f000 	lsl.w	r0, r4, r0
100025a8:	e6a0      	b.n	100022ec <HAL_ADC_AnalogWDGConfig+0xa4>
      tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
100025aa:	694c      	ldr	r4, [r1, #20]
100025ac:	68d5      	ldr	r5, [r2, #12]
100025ae:	ea4f 0c95 	mov.w	ip, r5, lsr #2
100025b2:	f00c 0c04 	and.w	ip, ip, #4
100025b6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
100025ba:	fa04 f40c 	lsl.w	r4, r4, ip
100025be:	e6a0      	b.n	10002302 <HAL_ADC_AnalogWDGConfig+0xba>
        MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR2_LT2 , tmp_awd_low_threshold_shifted);
100025c0:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
100025c4:	f005 457c 	and.w	r5, r5, #4227858432	; 0xfc000000
100025c8:	432c      	orrs	r4, r5
100025ca:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
        MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR2_HT2 , tmp_awd_high_threshold_shifted);
100025ce:	681c      	ldr	r4, [r3, #0]
100025d0:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
100025d4:	f002 427c 	and.w	r2, r2, #4227858432	; 0xfc000000
100025d8:	4310      	orrs	r0, r2
100025da:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
100025de:	e6a4      	b.n	1000232a <HAL_ADC_AnalogWDGConfig+0xe2>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
100025e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
100025e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
100025e6:	655a      	str	r2, [r3, #84]	; 0x54
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
100025e8:	681a      	ldr	r2, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
100025ea:	f44f 7080 	mov.w	r0, #256	; 0x100
100025ee:	6010      	str	r0, [r2, #0]
        if (pAnalogWDGConfig->ITMode == ENABLE)
100025f0:	7b0a      	ldrb	r2, [r1, #12]
100025f2:	2a01      	cmp	r2, #1
100025f4:	d006      	beq.n	10002604 <HAL_ADC_AnalogWDGConfig+0x3bc>
          LL_ADC_DisableIT_AWD2(hadc->Instance);
100025f6:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
100025f8:	684a      	ldr	r2, [r1, #4]
100025fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
100025fe:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10002600:	2000      	movs	r0, #0
}
10002602:	e010      	b.n	10002626 <HAL_ADC_AnalogWDGConfig+0x3de>
          LL_ADC_EnableIT_AWD2(hadc->Instance);
10002604:	6819      	ldr	r1, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
10002606:	684a      	ldr	r2, [r1, #4]
10002608:	4302      	orrs	r2, r0
1000260a:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1000260c:	2000      	movs	r0, #0
}
1000260e:	e00a      	b.n	10002626 <HAL_ADC_AnalogWDGConfig+0x3de>
          LL_ADC_EnableIT_AWD3(hadc->Instance);
10002610:	6819      	ldr	r1, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
10002612:	684a      	ldr	r2, [r1, #4]
10002614:	4302      	orrs	r2, r0
10002616:	604a      	str	r2, [r1, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10002618:	2000      	movs	r0, #0
}
1000261a:	e004      	b.n	10002626 <HAL_ADC_AnalogWDGConfig+0x3de>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1000261c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
1000261e:	f042 0220 	orr.w	r2, r2, #32
10002622:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
10002624:	2001      	movs	r0, #1
  }
  __HAL_UNLOCK(hadc);
10002626:	2200      	movs	r2, #0
10002628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return tmp_hal_status;
}
1000262c:	bc70      	pop	{r4, r5, r6}
1000262e:	4770      	bx	lr
  __HAL_LOCK(hadc);
10002630:	2002      	movs	r0, #2
}
10002632:	4770      	bx	lr

10002634 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
10002634:	b570      	push	{r4, r5, r6, lr}
10002636:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10002638:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
1000263a:	689a      	ldr	r2, [r3, #8]
1000263c:	f012 0204 	ands.w	r2, r2, #4
10002640:	d000      	beq.n	10002644 <ADC_ConversionStop+0x10>
10002642:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10002644:	6898      	ldr	r0, [r3, #8]
10002646:	f010 0008 	ands.w	r0, r0, #8
1000264a:	d000      	beq.n	1000264e <ADC_ConversionStop+0x1a>
1000264c:	2001      	movs	r0, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
1000264e:	b90a      	cbnz	r2, 10002654 <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
10002650:	2800      	cmp	r0, #0
10002652:	d06b      	beq.n	1000272c <ADC_ConversionStop+0xf8>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
10002654:	68da      	ldr	r2, [r3, #12]
10002656:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
1000265a:	d004      	beq.n	10002666 <ADC_ConversionStop+0x32>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
1000265c:	8aa0      	ldrh	r0, [r4, #20]
1000265e:	f240 1201 	movw	r2, #257	; 0x101
10002662:	4290      	cmp	r0, r2
10002664:	d04e      	beq.n	10002704 <ADC_ConversionStop+0xd0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
10002666:	2902      	cmp	r1, #2
10002668:	d010      	beq.n	1000268c <ADC_ConversionStop+0x58>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
1000266a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
1000266c:	689a      	ldr	r2, [r3, #8]
1000266e:	f012 0f04 	tst.w	r2, #4
10002672:	d00b      	beq.n	1000268c <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
10002674:	689a      	ldr	r2, [r3, #8]
10002676:	f012 0f02 	tst.w	r2, #2
1000267a:	d107      	bne.n	1000268c <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
1000267c:	689a      	ldr	r2, [r3, #8]
1000267e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10002682:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
10002686:	f042 0210 	orr.w	r2, r2, #16
1000268a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
1000268c:	2901      	cmp	r1, #1
1000268e:	d010      	beq.n	100026b2 <ADC_ConversionStop+0x7e>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
10002690:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10002692:	689a      	ldr	r2, [r3, #8]
10002694:	f012 0f08 	tst.w	r2, #8
10002698:	d00b      	beq.n	100026b2 <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
1000269a:	689a      	ldr	r2, [r3, #8]
1000269c:	f012 0f02 	tst.w	r2, #2
100026a0:	d107      	bne.n	100026b2 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
100026a2:	689a      	ldr	r2, [r3, #8]
100026a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100026a8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
100026ac:	f042 0220 	orr.w	r2, r2, #32
100026b0:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
100026b2:	2902      	cmp	r1, #2
100026b4:	d034      	beq.n	10002720 <ADC_ConversionStop+0xec>
100026b6:	2903      	cmp	r1, #3
100026b8:	d134      	bne.n	10002724 <ADC_ConversionStop+0xf0>
100026ba:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
100026bc:	f7ff f9bc 	bl	10001a38 <HAL_GetTick>
100026c0:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
100026c2:	6823      	ldr	r3, [r4, #0]
100026c4:	689b      	ldr	r3, [r3, #8]
100026c6:	422b      	tst	r3, r5
100026c8:	d02e      	beq.n	10002728 <ADC_ConversionStop+0xf4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
100026ca:	f7ff f9b5 	bl	10001a38 <HAL_GetTick>
100026ce:	1b80      	subs	r0, r0, r6
100026d0:	2805      	cmp	r0, #5
100026d2:	d9f6      	bls.n	100026c2 <ADC_ConversionStop+0x8e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
100026d4:	6823      	ldr	r3, [r4, #0]
100026d6:	689b      	ldr	r3, [r3, #8]
100026d8:	422b      	tst	r3, r5
100026da:	d0f2      	beq.n	100026c2 <ADC_ConversionStop+0x8e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
100026dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
100026de:	f043 0310 	orr.w	r3, r3, #16
100026e2:	6563      	str	r3, [r4, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
100026e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
100026e6:	f043 0301 	orr.w	r3, r3, #1
100026ea:	65a3      	str	r3, [r4, #88]	; 0x58

          return HAL_ERROR;
100026ec:	2001      	movs	r0, #1
100026ee:	e01c      	b.n	1000272a <ADC_ConversionStop+0xf6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
100026f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
100026f2:	f043 0310 	orr.w	r3, r3, #16
100026f6:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
100026f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
100026fa:	f043 0301 	orr.w	r3, r3, #1
100026fe:	65a3      	str	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
10002700:	2001      	movs	r0, #1
10002702:	e012      	b.n	1000272a <ADC_ConversionStop+0xf6>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
10002704:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
10002706:	6819      	ldr	r1, [r3, #0]
10002708:	f011 0f40 	tst.w	r1, #64	; 0x40
1000270c:	d104      	bne.n	10002718 <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
1000270e:	4908      	ldr	r1, [pc, #32]	; (10002730 <ADC_ConversionStop+0xfc>)
10002710:	428a      	cmp	r2, r1
10002712:	d8ed      	bhi.n	100026f0 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
10002714:	3201      	adds	r2, #1
10002716:	e7f6      	b.n	10002706 <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
10002718:	2240      	movs	r2, #64	; 0x40
1000271a:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
1000271c:	2101      	movs	r1, #1
1000271e:	e7a4      	b.n	1000266a <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
10002720:	2508      	movs	r5, #8
10002722:	e7cb      	b.n	100026bc <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
10002724:	2504      	movs	r5, #4
10002726:	e7c9      	b.n	100026bc <ADC_ConversionStop+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
10002728:	2000      	movs	r0, #0
}
1000272a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
1000272c:	2000      	movs	r0, #0
1000272e:	e7fc      	b.n	1000272a <ADC_ConversionStop+0xf6>
10002730:	000cdbff 	.word	0x000cdbff

10002734 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
10002734:	b538      	push	{r3, r4, r5, lr}

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
10002736:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10002738:	689a      	ldr	r2, [r3, #8]
1000273a:	f012 0f01 	tst.w	r2, #1
1000273e:	d151      	bne.n	100027e4 <ADC_Enable+0xb0>
10002740:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
10002742:	6899      	ldr	r1, [r3, #8]
10002744:	4a28      	ldr	r2, [pc, #160]	; (100027e8 <ADC_Enable+0xb4>)
10002746:	4211      	tst	r1, r2
10002748:	d009      	beq.n	1000275e <ADC_Enable+0x2a>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000274a:	6d43      	ldr	r3, [r0, #84]	; 0x54
1000274c:	f043 0310 	orr.w	r3, r3, #16
10002750:	6543      	str	r3, [r0, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002752:	6d83      	ldr	r3, [r0, #88]	; 0x58
10002754:	f043 0301 	orr.w	r3, r3, #1
10002758:	6583      	str	r3, [r0, #88]	; 0x58

      return HAL_ERROR;
1000275a:	2001      	movs	r0, #1
1000275c:	e043      	b.n	100027e6 <ADC_Enable+0xb2>
  MODIFY_REG(ADCx->CR,
1000275e:	689a      	ldr	r2, [r3, #8]
10002760:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10002764:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
10002768:	f042 0201 	orr.w	r2, r2, #1
1000276c:	609a      	str	r2, [r3, #8]

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
1000276e:	f7ff f963 	bl	10001a38 <HAL_GetTick>
10002772:	4605      	mov	r5, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
10002774:	4b1d      	ldr	r3, [pc, #116]	; (100027ec <ADC_Enable+0xb8>)
10002776:	689b      	ldr	r3, [r3, #8]
10002778:	f003 031f 	and.w	r3, r3, #31

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1000277c:	6822      	ldr	r2, [r4, #0]
1000277e:	491c      	ldr	r1, [pc, #112]	; (100027f0 <ADC_Enable+0xbc>)
10002780:	428a      	cmp	r2, r1
10002782:	d005      	beq.n	10002790 <ADC_Enable+0x5c>
10002784:	4611      	mov	r1, r2
10002786:	428a      	cmp	r2, r1
10002788:	d005      	beq.n	10002796 <ADC_Enable+0x62>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000278a:	b123      	cbz	r3, 10002796 <ADC_Enable+0x62>
    }
#endif
  }

  /* Return HAL status */
  return HAL_OK;
1000278c:	2000      	movs	r0, #0
1000278e:	e02a      	b.n	100027e6 <ADC_Enable+0xb2>
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002790:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
10002794:	e7f7      	b.n	10002786 <ADC_Enable+0x52>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
10002796:	6823      	ldr	r3, [r4, #0]
10002798:	681a      	ldr	r2, [r3, #0]
1000279a:	f012 0f01 	tst.w	r2, #1
1000279e:	d11f      	bne.n	100027e0 <ADC_Enable+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
100027a0:	689a      	ldr	r2, [r3, #8]
100027a2:	f012 0f01 	tst.w	r2, #1
100027a6:	d107      	bne.n	100027b8 <ADC_Enable+0x84>
  MODIFY_REG(ADCx->CR,
100027a8:	689a      	ldr	r2, [r3, #8]
100027aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
100027ae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
100027b2:	f042 0201 	orr.w	r2, r2, #1
100027b6:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
100027b8:	f7ff f93e 	bl	10001a38 <HAL_GetTick>
100027bc:	1b40      	subs	r0, r0, r5
100027be:	2802      	cmp	r0, #2
100027c0:	d9e9      	bls.n	10002796 <ADC_Enable+0x62>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
100027c2:	6823      	ldr	r3, [r4, #0]
100027c4:	681b      	ldr	r3, [r3, #0]
100027c6:	f013 0f01 	tst.w	r3, #1
100027ca:	d1e4      	bne.n	10002796 <ADC_Enable+0x62>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
100027cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
100027ce:	f043 0310 	orr.w	r3, r3, #16
100027d2:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
100027d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
100027d6:	f043 0301 	orr.w	r3, r3, #1
100027da:	65a3      	str	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
100027dc:	2001      	movs	r0, #1
100027de:	e002      	b.n	100027e6 <ADC_Enable+0xb2>
  return HAL_OK;
100027e0:	2000      	movs	r0, #0
100027e2:	e000      	b.n	100027e6 <ADC_Enable+0xb2>
100027e4:	2000      	movs	r0, #0
}
100027e6:	bd38      	pop	{r3, r4, r5, pc}
100027e8:	8000003f 	.word	0x8000003f
100027ec:	48003300 	.word	0x48003300
100027f0:	48003100 	.word	0x48003100

100027f4 <HAL_ADC_Start>:
{
100027f4:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
100027f6:	4b3a      	ldr	r3, [pc, #232]	; (100028e0 <HAL_ADC_Start+0xec>)
100027f8:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
100027fa:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
100027fc:	689b      	ldr	r3, [r3, #8]
100027fe:	f013 0f04 	tst.w	r3, #4
10002802:	d169      	bne.n	100028d8 <HAL_ADC_Start+0xe4>
10002804:	4604      	mov	r4, r0
10002806:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
1000280a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
1000280e:	2b01      	cmp	r3, #1
10002810:	d064      	beq.n	100028dc <HAL_ADC_Start+0xe8>
10002812:	2301      	movs	r3, #1
10002814:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
10002818:	f7ff ff8c 	bl	10002734 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
1000281c:	2800      	cmp	r0, #0
1000281e:	d157      	bne.n	100028d0 <HAL_ADC_Start+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
10002820:	6d63      	ldr	r3, [r4, #84]	; 0x54
10002822:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
10002826:	f023 0301 	bic.w	r3, r3, #1
1000282a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000282e:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002830:	6823      	ldr	r3, [r4, #0]
10002832:	4a2c      	ldr	r2, [pc, #176]	; (100028e4 <HAL_ADC_Start+0xf0>)
10002834:	4293      	cmp	r3, r2
10002836:	d02f      	beq.n	10002898 <HAL_ADC_Start+0xa4>
10002838:	461a      	mov	r2, r3
1000283a:	4293      	cmp	r3, r2
1000283c:	d000      	beq.n	10002840 <HAL_ADC_Start+0x4c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1000283e:	b91d      	cbnz	r5, 10002848 <HAL_ADC_Start+0x54>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
10002840:	6d62      	ldr	r2, [r4, #84]	; 0x54
10002842:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
10002846:	6562      	str	r2, [r4, #84]	; 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
10002848:	6d62      	ldr	r2, [r4, #84]	; 0x54
1000284a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
1000284e:	d026      	beq.n	1000289e <HAL_ADC_Start+0xaa>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
10002850:	6da2      	ldr	r2, [r4, #88]	; 0x58
10002852:	f022 0206 	bic.w	r2, r2, #6
10002856:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
10002858:	221c      	movs	r2, #28
1000285a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
1000285c:	2300      	movs	r3, #0
1000285e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002862:	6822      	ldr	r2, [r4, #0]
10002864:	4b1f      	ldr	r3, [pc, #124]	; (100028e4 <HAL_ADC_Start+0xf0>)
10002866:	429a      	cmp	r2, r3
10002868:	d01c      	beq.n	100028a4 <HAL_ADC_Start+0xb0>
1000286a:	4613      	mov	r3, r2
1000286c:	429a      	cmp	r2, r3
1000286e:	d01c      	beq.n	100028aa <HAL_ADC_Start+0xb6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
10002870:	b1dd      	cbz	r5, 100028aa <HAL_ADC_Start+0xb6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
10002872:	2d05      	cmp	r5, #5
10002874:	d019      	beq.n	100028aa <HAL_ADC_Start+0xb6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
10002876:	2d09      	cmp	r5, #9
10002878:	d017      	beq.n	100028aa <HAL_ADC_Start+0xb6>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1000287a:	6d62      	ldr	r2, [r4, #84]	; 0x54
1000287c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
10002880:	6562      	str	r2, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
10002882:	68db      	ldr	r3, [r3, #12]
10002884:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
10002888:	d027      	beq.n	100028da <HAL_ADC_Start+0xe6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1000288a:	6d63      	ldr	r3, [r4, #84]	; 0x54
1000288c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
10002890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
10002894:	6563      	str	r3, [r4, #84]	; 0x54
10002896:	e020      	b.n	100028da <HAL_ADC_Start+0xe6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
10002898:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
1000289c:	e7cd      	b.n	1000283a <HAL_ADC_Start+0x46>
        ADC_CLEAR_ERRORCODE(hadc);
1000289e:	2200      	movs	r2, #0
100028a0:	65a2      	str	r2, [r4, #88]	; 0x58
100028a2:	e7d9      	b.n	10002858 <HAL_ADC_Start+0x64>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
100028a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
100028a8:	e7e0      	b.n	1000286c <HAL_ADC_Start+0x78>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
100028aa:	68d3      	ldr	r3, [r2, #12]
100028ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
100028b0:	d005      	beq.n	100028be <HAL_ADC_Start+0xca>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
100028b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
100028b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
100028b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
100028bc:	6563      	str	r3, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
100028be:	6893      	ldr	r3, [r2, #8]
100028c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
100028c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
100028c8:	f043 0304 	orr.w	r3, r3, #4
100028cc:	6093      	str	r3, [r2, #8]
}
100028ce:	e004      	b.n	100028da <HAL_ADC_Start+0xe6>
      __HAL_UNLOCK(hadc);
100028d0:	2300      	movs	r3, #0
100028d2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
100028d6:	e000      	b.n	100028da <HAL_ADC_Start+0xe6>
    tmp_hal_status = HAL_BUSY;
100028d8:	2002      	movs	r0, #2
}
100028da:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
100028dc:	2002      	movs	r0, #2
100028de:	e7fc      	b.n	100028da <HAL_ADC_Start+0xe6>
100028e0:	48003300 	.word	0x48003300
100028e4:	48003100 	.word	0x48003100

100028e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
100028e8:	b538      	push	{r3, r4, r5, lr}
100028ea:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
100028ec:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
100028ee:	6893      	ldr	r3, [r2, #8]
100028f0:	f013 0302 	ands.w	r3, r3, #2
100028f4:	d000      	beq.n	100028f8 <ADC_Disable+0x10>
100028f6:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
100028f8:	6891      	ldr	r1, [r2, #8]
100028fa:	f011 0f01 	tst.w	r1, #1
100028fe:	d039      	beq.n	10002974 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
10002900:	2b00      	cmp	r3, #0
10002902:	d139      	bne.n	10002978 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
10002904:	6893      	ldr	r3, [r2, #8]
10002906:	f003 030d 	and.w	r3, r3, #13
1000290a:	2b01      	cmp	r3, #1
1000290c:	d009      	beq.n	10002922 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000290e:	6d63      	ldr	r3, [r4, #84]	; 0x54
10002910:	f043 0310 	orr.w	r3, r3, #16
10002914:	6563      	str	r3, [r4, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002916:	6da3      	ldr	r3, [r4, #88]	; 0x58
10002918:	f043 0301 	orr.w	r3, r3, #1
1000291c:	65a3      	str	r3, [r4, #88]	; 0x58

      return HAL_ERROR;
1000291e:	2001      	movs	r0, #1
10002920:	e029      	b.n	10002976 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
10002922:	6893      	ldr	r3, [r2, #8]
10002924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10002928:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
1000292c:	f043 0302 	orr.w	r3, r3, #2
10002930:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
10002932:	6823      	ldr	r3, [r4, #0]
10002934:	2203      	movs	r2, #3
10002936:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
10002938:	f7ff f87e 	bl	10001a38 <HAL_GetTick>
1000293c:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
1000293e:	6823      	ldr	r3, [r4, #0]
10002940:	689b      	ldr	r3, [r3, #8]
10002942:	f013 0f01 	tst.w	r3, #1
10002946:	d013      	beq.n	10002970 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
10002948:	f7ff f876 	bl	10001a38 <HAL_GetTick>
1000294c:	1b40      	subs	r0, r0, r5
1000294e:	2802      	cmp	r0, #2
10002950:	d9f5      	bls.n	1000293e <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
10002952:	6823      	ldr	r3, [r4, #0]
10002954:	689b      	ldr	r3, [r3, #8]
10002956:	f013 0f01 	tst.w	r3, #1
1000295a:	d0f0      	beq.n	1000293e <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1000295c:	6d63      	ldr	r3, [r4, #84]	; 0x54
1000295e:	f043 0310 	orr.w	r3, r3, #16
10002962:	6563      	str	r3, [r4, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002964:	6da3      	ldr	r3, [r4, #88]	; 0x58
10002966:	f043 0301 	orr.w	r3, r3, #1
1000296a:	65a3      	str	r3, [r4, #88]	; 0x58

          return HAL_ERROR;
1000296c:	2001      	movs	r0, #1
1000296e:	e002      	b.n	10002976 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
10002970:	2000      	movs	r0, #0
10002972:	e000      	b.n	10002976 <ADC_Disable+0x8e>
10002974:	2000      	movs	r0, #0
}
10002976:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
10002978:	2000      	movs	r0, #0
1000297a:	e7fc      	b.n	10002976 <ADC_Disable+0x8e>

1000297c <HAL_ADC_DeInit>:
{
1000297c:	b538      	push	{r3, r4, r5, lr}
  if (hadc == NULL)
1000297e:	2800      	cmp	r0, #0
10002980:	f000 80cf 	beq.w	10002b22 <HAL_ADC_DeInit+0x1a6>
10002984:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
10002986:	6d43      	ldr	r3, [r0, #84]	; 0x54
10002988:	f043 0302 	orr.w	r3, r3, #2
1000298c:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
1000298e:	2103      	movs	r1, #3
10002990:	f7ff fe50 	bl	10002634 <ADC_ConversionStop>
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
10002994:	6822      	ldr	r2, [r4, #0]
10002996:	68d3      	ldr	r3, [r2, #12]
10002998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1000299c:	60d3      	str	r3, [r2, #12]
  if (tmp_hal_status == HAL_OK)
1000299e:	4605      	mov	r5, r0
100029a0:	2800      	cmp	r0, #0
100029a2:	f000 80ab 	beq.w	10002afc <HAL_ADC_DeInit+0x180>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
100029a6:	6822      	ldr	r2, [r4, #0]
100029a8:	6853      	ldr	r3, [r2, #4]
100029aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
100029ae:	f023 0307 	bic.w	r3, r3, #7
100029b2:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
100029b4:	6823      	ldr	r3, [r4, #0]
100029b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
100029ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
100029bc:	6822      	ldr	r2, [r4, #0]
100029be:	6893      	ldr	r3, [r2, #8]
100029c0:	f023 43a0 	bic.w	r3, r3, #1342177280	; 0x50000000
100029c4:	6093      	str	r3, [r2, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
100029c6:	6822      	ldr	r2, [r4, #0]
100029c8:	6893      	ldr	r3, [r2, #8]
100029ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
100029ce:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
100029d0:	6822      	ldr	r2, [r4, #0]
100029d2:	68d3      	ldr	r3, [r2, #12]
100029d4:	f003 2380 	and.w	r3, r3, #2147516416	; 0x80008000
100029d8:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
100029da:	6822      	ldr	r2, [r4, #0]
100029dc:	68d3      	ldr	r3, [r2, #12]
100029de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
100029e2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
100029e4:	6822      	ldr	r2, [r4, #0]
100029e6:	6913      	ldr	r3, [r2, #16]
100029e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
100029ec:	f023 0307 	bic.w	r3, r3, #7
100029f0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
100029f2:	6822      	ldr	r2, [r4, #0]
100029f4:	6953      	ldr	r3, [r2, #20]
100029f6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
100029fa:	6153      	str	r3, [r2, #20]
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
100029fc:	6822      	ldr	r2, [r4, #0]
100029fe:	6993      	ldr	r3, [r2, #24]
10002a00:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
10002a04:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR1_LT1);
10002a06:	6822      	ldr	r2, [r4, #0]
10002a08:	6a13      	ldr	r3, [r2, #32]
10002a0a:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
10002a0e:	6213      	str	r3, [r2, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR1_HT1);
10002a10:	6822      	ldr	r2, [r4, #0]
10002a12:	6a53      	ldr	r3, [r2, #36]	; 0x24
10002a14:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
10002a18:	6253      	str	r3, [r2, #36]	; 0x24
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR2_LT2);
10002a1a:	6822      	ldr	r2, [r4, #0]
10002a1c:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
10002a20:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
10002a24:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR2_HT2);
10002a28:	6822      	ldr	r2, [r4, #0]
10002a2a:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
10002a2e:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
10002a32:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR2_LT2);
10002a36:	6822      	ldr	r2, [r4, #0]
10002a38:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
10002a3c:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
10002a40:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR2_HT2);
10002a44:	6822      	ldr	r2, [r4, #0]
10002a46:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
10002a4a:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
10002a4e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
10002a52:	6822      	ldr	r2, [r4, #0]
10002a54:	6b11      	ldr	r1, [r2, #48]	; 0x30
10002a56:	4b34      	ldr	r3, [pc, #208]	; (10002b28 <HAL_ADC_DeInit+0x1ac>)
10002a58:	400b      	ands	r3, r1
10002a5a:	6313      	str	r3, [r2, #48]	; 0x30
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
10002a5c:	6823      	ldr	r3, [r4, #0]
10002a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10002a60:	4932      	ldr	r1, [pc, #200]	; (10002b2c <HAL_ADC_DeInit+0x1b0>)
10002a62:	400a      	ands	r2, r1
10002a64:	635a      	str	r2, [r3, #52]	; 0x34
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
10002a66:	6822      	ldr	r2, [r4, #0]
10002a68:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002a6a:	400b      	ands	r3, r1
10002a6c:	6393      	str	r3, [r2, #56]	; 0x38
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
10002a6e:	6822      	ldr	r2, [r4, #0]
10002a70:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
10002a72:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
10002a76:	f023 0307 	bic.w	r3, r3, #7
10002a7a:	63d3      	str	r3, [r2, #60]	; 0x3c
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
10002a7c:	6822      	ldr	r2, [r4, #0]
10002a7e:	6e13      	ldr	r3, [r2, #96]	; 0x60
10002a80:	2300      	movs	r3, #0
10002a82:	6613      	str	r3, [r2, #96]	; 0x60
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
10002a84:	6822      	ldr	r2, [r4, #0]
10002a86:	6e51      	ldr	r1, [r2, #100]	; 0x64
10002a88:	6653      	str	r3, [r2, #100]	; 0x64
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
10002a8a:	6822      	ldr	r2, [r4, #0]
10002a8c:	6e91      	ldr	r1, [r2, #104]	; 0x68
10002a8e:	6693      	str	r3, [r2, #104]	; 0x68
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
10002a90:	6822      	ldr	r2, [r4, #0]
10002a92:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
10002a94:	66d3      	str	r3, [r2, #108]	; 0x6c
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
10002a96:	6822      	ldr	r2, [r4, #0]
10002a98:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
10002a9c:	0d1b      	lsrs	r3, r3, #20
10002a9e:	051b      	lsls	r3, r3, #20
10002aa0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
10002aa4:	6822      	ldr	r2, [r4, #0]
10002aa6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
10002aaa:	0d1b      	lsrs	r3, r3, #20
10002aac:	051b      	lsls	r3, r3, #20
10002aae:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
10002ab2:	6822      	ldr	r2, [r4, #0]
10002ab4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
10002ab8:	0d1b      	lsrs	r3, r3, #20
10002aba:	051b      	lsls	r3, r3, #20
10002abc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
10002ac0:	6822      	ldr	r2, [r4, #0]
10002ac2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
10002ac6:	f003 23f8 	and.w	r3, r3, #4160813056	; 0xf800f800
10002aca:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10002ace:	4b18      	ldr	r3, [pc, #96]	; (10002b30 <HAL_ADC_DeInit+0x1b4>)
10002ad0:	689b      	ldr	r3, [r3, #8]
10002ad2:	f013 0301 	ands.w	r3, r3, #1
10002ad6:	d000      	beq.n	10002ada <HAL_ADC_DeInit+0x15e>
10002ad8:	2301      	movs	r3, #1
10002ada:	4a16      	ldr	r2, [pc, #88]	; (10002b34 <HAL_ADC_DeInit+0x1b8>)
10002adc:	6892      	ldr	r2, [r2, #8]
10002ade:	f012 0201 	ands.w	r2, r2, #1
10002ae2:	d000      	beq.n	10002ae6 <HAL_ADC_DeInit+0x16a>
10002ae4:	2201      	movs	r2, #1
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
10002ae6:	4313      	orrs	r3, r2
10002ae8:	d012      	beq.n	10002b10 <HAL_ADC_DeInit+0x194>
  ADC_CLEAR_ERRORCODE(hadc);
10002aea:	2300      	movs	r3, #0
10002aec:	65a3      	str	r3, [r4, #88]	; 0x58
  hadc->InjectionConfig.ContextQueue = 0;
10002aee:	65e3      	str	r3, [r4, #92]	; 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
10002af0:	6623      	str	r3, [r4, #96]	; 0x60
  hadc->State = HAL_ADC_STATE_RESET;
10002af2:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
10002af4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
10002af8:	4628      	mov	r0, r5
10002afa:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = ADC_Disable(hadc);
10002afc:	4620      	mov	r0, r4
10002afe:	f7ff fef3 	bl	100028e8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
10002b02:	4605      	mov	r5, r0
10002b04:	2800      	cmp	r0, #0
10002b06:	f47f af4e 	bne.w	100029a6 <HAL_ADC_DeInit+0x2a>
      hadc->State = HAL_ADC_STATE_READY;
10002b0a:	2301      	movs	r3, #1
10002b0c:	6563      	str	r3, [r4, #84]	; 0x54
10002b0e:	e74a      	b.n	100029a6 <HAL_ADC_DeInit+0x2a>
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
10002b10:	4a09      	ldr	r2, [pc, #36]	; (10002b38 <HAL_ADC_DeInit+0x1bc>)
10002b12:	6891      	ldr	r1, [r2, #8]
10002b14:	4b09      	ldr	r3, [pc, #36]	; (10002b3c <HAL_ADC_DeInit+0x1c0>)
10002b16:	400b      	ands	r3, r1
10002b18:	6093      	str	r3, [r2, #8]
    HAL_ADC_MspDeInit(hadc);
10002b1a:	4620      	mov	r0, r4
10002b1c:	f7fe fbd0 	bl	100012c0 <HAL_ADC_MspDeInit>
10002b20:	e7e3      	b.n	10002aea <HAL_ADC_DeInit+0x16e>
    return HAL_ERROR;
10002b22:	2501      	movs	r5, #1
10002b24:	e7e8      	b.n	10002af8 <HAL_ADC_DeInit+0x17c>
10002b26:	bf00      	nop
10002b28:	e0820830 	.word	0xe0820830
10002b2c:	e0820820 	.word	0xe0820820
10002b30:	48003000 	.word	0x48003000
10002b34:	48003100 	.word	0x48003100
10002b38:	48003300 	.word	0x48003300
10002b3c:	fe0030e0 	.word	0xfe0030e0

10002b40 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
10002b40:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
10002b44:	2b01      	cmp	r3, #1
10002b46:	d01a      	beq.n	10002b7e <HAL_ADC_Stop+0x3e>
{
10002b48:	b510      	push	{r4, lr}
10002b4a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
10002b4c:	2301      	movs	r3, #1
10002b4e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
10002b52:	2103      	movs	r1, #3
10002b54:	f7ff fd6e 	bl	10002634 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
10002b58:	b118      	cbz	r0, 10002b62 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
10002b5a:	2300      	movs	r3, #0
10002b5c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
10002b60:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
10002b62:	4620      	mov	r0, r4
10002b64:	f7ff fec0 	bl	100028e8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
10002b68:	2800      	cmp	r0, #0
10002b6a:	d1f6      	bne.n	10002b5a <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
10002b6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
10002b6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
10002b72:	f023 0301 	bic.w	r3, r3, #1
10002b76:	f043 0301 	orr.w	r3, r3, #1
10002b7a:	6563      	str	r3, [r4, #84]	; 0x54
10002b7c:	e7ed      	b.n	10002b5a <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
10002b7e:	2002      	movs	r0, #2
}
10002b80:	4770      	bx	lr
	...

10002b84 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
10002b84:	b510      	push	{r4, lr}
10002b86:	4604      	mov	r4, r0
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
10002b88:	6803      	ldr	r3, [r0, #0]
10002b8a:	4a32      	ldr	r2, [pc, #200]	; (10002c54 <ADC_ConfigureBoostMode+0xd0>)
10002b8c:	4293      	cmp	r3, r2
10002b8e:	d015      	beq.n	10002bbc <ADC_ConfigureBoostMode+0x38>
10002b90:	f502 7280 	add.w	r2, r2, #256	; 0x100
10002b94:	4293      	cmp	r3, r2
10002b96:	d011      	beq.n	10002bbc <ADC_ConfigureBoostMode+0x38>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
10002b98:	2008      	movs	r0, #8
10002b9a:	2100      	movs	r1, #0
10002b9c:	f003 ff5c 	bl	10006a58 <HAL_RCCEx_GetPeriphCLKFreq>
    switch(hadc->Init.ClockPrescaler)
10002ba0:	6863      	ldr	r3, [r4, #4]
10002ba2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
10002ba6:	d04d      	beq.n	10002c44 <ADC_ConfigureBoostMode+0xc0>
10002ba8:	d842      	bhi.n	10002c30 <ADC_ConfigureBoostMode+0xac>
10002baa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
10002bae:	d047      	beq.n	10002c40 <ADC_ConfigureBoostMode+0xbc>
10002bb0:	d924      	bls.n	10002bfc <ADC_ConfigureBoostMode+0x78>
10002bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
10002bb6:	d112      	bne.n	10002bde <ADC_ConfigureBoostMode+0x5a>
        break;
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
      break;
        case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
10002bb8:	0940      	lsrs	r0, r0, #5
        break;
10002bba:	e010      	b.n	10002bde <ADC_ConfigureBoostMode+0x5a>
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
10002bbc:	4b26      	ldr	r3, [pc, #152]	; (10002c58 <ADC_ConfigureBoostMode+0xd4>)
10002bbe:	689b      	ldr	r3, [r3, #8]
10002bc0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
10002bc4:	d0e8      	beq.n	10002b98 <ADC_ConfigureBoostMode+0x14>
    freq = HAL_RCC_GetHCLK2Freq();
10002bc6:	f002 f8b9 	bl	10004d3c <HAL_RCC_GetHCLK2Freq>
    switch(hadc->Init.ClockPrescaler)
10002bca:	6863      	ldr	r3, [r4, #4]
10002bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10002bd0:	d00e      	beq.n	10002bf0 <ADC_ConfigureBoostMode+0x6c>
10002bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
10002bd6:	d00f      	beq.n	10002bf8 <ADC_ConfigureBoostMode+0x74>
10002bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10002bdc:	d008      	beq.n	10002bf0 <ADC_ConfigureBoostMode+0x6c>
      default:
        break;
    }
  }

  if (freq > 20000000UL)
10002bde:	4b1f      	ldr	r3, [pc, #124]	; (10002c5c <ADC_ConfigureBoostMode+0xd8>)
10002be0:	4298      	cmp	r0, r3
10002be2:	d933      	bls.n	10002c4c <ADC_ConfigureBoostMode+0xc8>
  {
    SET_BIT(hadc->Instance->CR, ADC_CR_BOOST);
10002be4:	6822      	ldr	r2, [r4, #0]
10002be6:	6893      	ldr	r3, [r2, #8]
10002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10002bec:	6093      	str	r3, [r2, #8]
  }
  else
  {
    CLEAR_BIT(hadc->Instance->CR, 0);
  }
}
10002bee:	bd10      	pop	{r4, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
10002bf0:	0c1b      	lsrs	r3, r3, #16
10002bf2:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
10002bf6:	e7f2      	b.n	10002bde <ADC_ConfigureBoostMode+0x5a>
        freq /= 4UL;
10002bf8:	0880      	lsrs	r0, r0, #2
        break;
10002bfa:	e7f0      	b.n	10002bde <ADC_ConfigureBoostMode+0x5a>
    switch(hadc->Init.ClockPrescaler)
10002bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10002c00:	d00d      	beq.n	10002c1e <ADC_ConfigureBoostMode+0x9a>
10002c02:	d906      	bls.n	10002c12 <ADC_ConfigureBoostMode+0x8e>
10002c04:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
10002c08:	d009      	beq.n	10002c1e <ADC_ConfigureBoostMode+0x9a>
10002c0a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
10002c0e:	d006      	beq.n	10002c1e <ADC_ConfigureBoostMode+0x9a>
10002c10:	e7e5      	b.n	10002bde <ADC_ConfigureBoostMode+0x5a>
10002c12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
10002c16:	d002      	beq.n	10002c1e <ADC_ConfigureBoostMode+0x9a>
10002c18:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
10002c1c:	d104      	bne.n	10002c28 <ADC_ConfigureBoostMode+0xa4>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
10002c1e:	0c9b      	lsrs	r3, r3, #18
10002c20:	005b      	lsls	r3, r3, #1
10002c22:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
10002c26:	e7da      	b.n	10002bde <ADC_ConfigureBoostMode+0x5a>
    switch(hadc->Init.ClockPrescaler)
10002c28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
10002c2c:	d0f7      	beq.n	10002c1e <ADC_ConfigureBoostMode+0x9a>
10002c2e:	e7d6      	b.n	10002bde <ADC_ConfigureBoostMode+0x5a>
10002c30:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
10002c34:	d008      	beq.n	10002c48 <ADC_ConfigureBoostMode+0xc4>
10002c36:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
10002c3a:	d1d0      	bne.n	10002bde <ADC_ConfigureBoostMode+0x5a>
        freq /= 256UL;
10002c3c:	0a00      	lsrs	r0, r0, #8
        break;
10002c3e:	e7ce      	b.n	10002bde <ADC_ConfigureBoostMode+0x5a>
        freq /= 16UL;
10002c40:	0900      	lsrs	r0, r0, #4
      break;
10002c42:	e7cc      	b.n	10002bde <ADC_ConfigureBoostMode+0x5a>
        freq /= 64UL;
10002c44:	0980      	lsrs	r0, r0, #6
        break;
10002c46:	e7ca      	b.n	10002bde <ADC_ConfigureBoostMode+0x5a>
        freq /= 128UL;
10002c48:	09c0      	lsrs	r0, r0, #7
        break;
10002c4a:	e7c8      	b.n	10002bde <ADC_ConfigureBoostMode+0x5a>
    CLEAR_BIT(hadc->Instance->CR, 0);
10002c4c:	6823      	ldr	r3, [r4, #0]
10002c4e:	689a      	ldr	r2, [r3, #8]
10002c50:	609a      	str	r2, [r3, #8]
}
10002c52:	e7cc      	b.n	10002bee <ADC_ConfigureBoostMode+0x6a>
10002c54:	48003000 	.word	0x48003000
10002c58:	48003300 	.word	0x48003300
10002c5c:	01312d00 	.word	0x01312d00

10002c60 <HAL_ADC_Init>:
{
10002c60:	b530      	push	{r4, r5, lr}
10002c62:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
10002c64:	2300      	movs	r3, #0
10002c66:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
10002c68:	2800      	cmp	r0, #0
10002c6a:	f000 80e9 	beq.w	10002e40 <HAL_ADC_Init+0x1e0>
10002c6e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
10002c70:	6d43      	ldr	r3, [r0, #84]	; 0x54
10002c72:	b30b      	cbz	r3, 10002cb8 <HAL_ADC_Init+0x58>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
10002c74:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
10002c76:	689a      	ldr	r2, [r3, #8]
10002c78:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
10002c7c:	d005      	beq.n	10002c8a <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
10002c7e:	689a      	ldr	r2, [r3, #8]
10002c80:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
10002c84:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
10002c88:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10002c8a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
10002c8c:	6893      	ldr	r3, [r2, #8]
10002c8e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
10002c92:	d11e      	bne.n	10002cd2 <HAL_ADC_Init+0x72>
  MODIFY_REG(ADCx->CR,
10002c94:	6893      	ldr	r3, [r2, #8]
10002c96:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
10002c9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
10002c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
10002ca2:	6093      	str	r3, [r2, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
10002ca4:	4b67      	ldr	r3, [pc, #412]	; (10002e44 <HAL_ADC_Init+0x1e4>)
10002ca6:	681b      	ldr	r3, [r3, #0]
10002ca8:	099b      	lsrs	r3, r3, #6
10002caa:	4a67      	ldr	r2, [pc, #412]	; (10002e48 <HAL_ADC_Init+0x1e8>)
10002cac:	fba2 2303 	umull	r2, r3, r2, r3
10002cb0:	099b      	lsrs	r3, r3, #6
10002cb2:	3301      	adds	r3, #1
10002cb4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
10002cb6:	e009      	b.n	10002ccc <HAL_ADC_Init+0x6c>
    HAL_ADC_MspInit(hadc);
10002cb8:	f7fe fadc 	bl	10001274 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
10002cbc:	2300      	movs	r3, #0
10002cbe:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
10002cc0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
10002cc4:	e7d6      	b.n	10002c74 <HAL_ADC_Init+0x14>
      wait_loop_index--;
10002cc6:	9b01      	ldr	r3, [sp, #4]
10002cc8:	3b01      	subs	r3, #1
10002cca:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
10002ccc:	9b01      	ldr	r3, [sp, #4]
10002cce:	2b00      	cmp	r3, #0
10002cd0:	d1f9      	bne.n	10002cc6 <HAL_ADC_Init+0x66>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
10002cd2:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
10002cd4:	6893      	ldr	r3, [r2, #8]
10002cd6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
10002cda:	f040 8087 	bne.w	10002dec <HAL_ADC_Init+0x18c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002cde:	6d63      	ldr	r3, [r4, #84]	; 0x54
10002ce0:	f043 0310 	orr.w	r3, r3, #16
10002ce4:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
10002ce6:	6da3      	ldr	r3, [r4, #88]	; 0x58
10002ce8:	f043 0301 	orr.w	r3, r3, #1
10002cec:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
10002cee:	2501      	movs	r5, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10002cf0:	6893      	ldr	r3, [r2, #8]
10002cf2:	f013 0304 	ands.w	r3, r3, #4
10002cf6:	d000      	beq.n	10002cfa <HAL_ADC_Init+0x9a>
10002cf8:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
10002cfa:	6d61      	ldr	r1, [r4, #84]	; 0x54
10002cfc:	f011 0f10 	tst.w	r1, #16
10002d00:	f040 8096 	bne.w	10002e30 <HAL_ADC_Init+0x1d0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
10002d04:	2b00      	cmp	r3, #0
10002d06:	f040 8093 	bne.w	10002e30 <HAL_ADC_Init+0x1d0>
    ADC_STATE_CLR_SET(hadc->State,
10002d0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
10002d0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
10002d10:	f043 0302 	orr.w	r3, r3, #2
10002d14:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
10002d16:	6893      	ldr	r3, [r2, #8]
10002d18:	f013 0f01 	tst.w	r3, #1
10002d1c:	d114      	bne.n	10002d48 <HAL_ADC_Init+0xe8>
10002d1e:	4b4b      	ldr	r3, [pc, #300]	; (10002e4c <HAL_ADC_Init+0x1ec>)
10002d20:	689b      	ldr	r3, [r3, #8]
10002d22:	f013 0301 	ands.w	r3, r3, #1
10002d26:	d000      	beq.n	10002d2a <HAL_ADC_Init+0xca>
10002d28:	2301      	movs	r3, #1
10002d2a:	4a49      	ldr	r2, [pc, #292]	; (10002e50 <HAL_ADC_Init+0x1f0>)
10002d2c:	6892      	ldr	r2, [r2, #8]
10002d2e:	f012 0201 	ands.w	r2, r2, #1
10002d32:	d000      	beq.n	10002d36 <HAL_ADC_Init+0xd6>
10002d34:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
10002d36:	4313      	orrs	r3, r2
10002d38:	d106      	bne.n	10002d48 <HAL_ADC_Init+0xe8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
10002d3a:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
10002d3c:	4945      	ldr	r1, [pc, #276]	; (10002e54 <HAL_ADC_Init+0x1f4>)
10002d3e:	688a      	ldr	r2, [r1, #8]
10002d40:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
10002d44:	4313      	orrs	r3, r2
10002d46:	608b      	str	r3, [r1, #8]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10002d48:	7d62      	ldrb	r2, [r4, #21]
                hadc->Init.Overrun                                                     |
10002d4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10002d4c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.Resolution                                                  |
10002d50:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.Overrun                                                     |
10002d52:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
10002d54:	7f22      	ldrb	r2, [r4, #28]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
10002d56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
10002d5a:	2a01      	cmp	r2, #1
10002d5c:	d048      	beq.n	10002df0 <HAL_ADC_Init+0x190>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
10002d5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
10002d60:	b122      	cbz	r2, 10002d6c <HAL_ADC_Init+0x10c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10002d62:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
10002d66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
10002d68:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
10002d6a:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
10002d6c:	6821      	ldr	r1, [r4, #0]
10002d6e:	68c8      	ldr	r0, [r1, #12]
10002d70:	4a39      	ldr	r2, [pc, #228]	; (10002e58 <HAL_ADC_Init+0x1f8>)
10002d72:	4002      	ands	r2, r0
10002d74:	4313      	orrs	r3, r2
10002d76:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
10002d78:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
10002d7a:	688b      	ldr	r3, [r1, #8]
10002d7c:	f013 0304 	ands.w	r3, r3, #4
10002d80:	d000      	beq.n	10002d84 <HAL_ADC_Init+0x124>
10002d82:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
10002d84:	688a      	ldr	r2, [r1, #8]
10002d86:	f012 0208 	ands.w	r2, r2, #8
10002d8a:	d000      	beq.n	10002d8e <HAL_ADC_Init+0x12e>
10002d8c:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
10002d8e:	b9f3      	cbnz	r3, 10002dce <HAL_ADC_Init+0x16e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
10002d90:	b9ea      	cbnz	r2, 10002dce <HAL_ADC_Init+0x16e>
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
10002d92:	7d22      	ldrb	r2, [r4, #20]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
10002d94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      tmpCFGR = (
10002d96:	ea43 3282 	orr.w	r2, r3, r2, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
10002d9a:	68cb      	ldr	r3, [r1, #12]
10002d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
10002da0:	f023 0303 	bic.w	r3, r3, #3
10002da4:	4313      	orrs	r3, r2
10002da6:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
10002da8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
10002dac:	2b01      	cmp	r3, #1
10002dae:	d024      	beq.n	10002dfa <HAL_ADC_Init+0x19a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
10002db0:	6822      	ldr	r2, [r4, #0]
10002db2:	6913      	ldr	r3, [r2, #16]
10002db4:	f023 0301 	bic.w	r3, r3, #1
10002db8:	6113      	str	r3, [r2, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
10002dba:	6822      	ldr	r2, [r4, #0]
10002dbc:	6913      	ldr	r3, [r2, #16]
10002dbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
10002dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
10002dc4:	430b      	orrs	r3, r1
10002dc6:	6113      	str	r3, [r2, #16]
      ADC_ConfigureBoostMode(hadc);
10002dc8:	4620      	mov	r0, r4
10002dca:	f7ff fedb 	bl	10002b84 <ADC_ConfigureBoostMode>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
10002dce:	68e3      	ldr	r3, [r4, #12]
10002dd0:	2b01      	cmp	r3, #1
10002dd2:	d024      	beq.n	10002e1e <HAL_ADC_Init+0x1be>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
10002dd4:	6822      	ldr	r2, [r4, #0]
10002dd6:	6b13      	ldr	r3, [r2, #48]	; 0x30
10002dd8:	f023 030f 	bic.w	r3, r3, #15
10002ddc:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
10002dde:	6d63      	ldr	r3, [r4, #84]	; 0x54
10002de0:	f023 0303 	bic.w	r3, r3, #3
10002de4:	f043 0301 	orr.w	r3, r3, #1
10002de8:	6563      	str	r3, [r4, #84]	; 0x54
10002dea:	e026      	b.n	10002e3a <HAL_ADC_Init+0x1da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
10002dec:	2500      	movs	r5, #0
10002dee:	e77f      	b.n	10002cf0 <HAL_ADC_Init+0x90>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
10002df0:	6a22      	ldr	r2, [r4, #32]
10002df2:	3a01      	subs	r2, #1
10002df4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
10002df8:	e7b1      	b.n	10002d5e <HAL_ADC_Init+0xfe>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
10002dfa:	6820      	ldr	r0, [r4, #0]
10002dfc:	6902      	ldr	r2, [r0, #16]
10002dfe:	4b17      	ldr	r3, [pc, #92]	; (10002e5c <HAL_ADC_Init+0x1fc>)
10002e00:	4013      	ands	r3, r2
10002e02:	6be2      	ldr	r2, [r4, #60]	; 0x3c
10002e04:	1e51      	subs	r1, r2, #1
10002e06:	6c22      	ldr	r2, [r4, #64]	; 0x40
10002e08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
10002e0c:	6c61      	ldr	r1, [r4, #68]	; 0x44
10002e0e:	430a      	orrs	r2, r1
10002e10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
10002e12:	430a      	orrs	r2, r1
10002e14:	4313      	orrs	r3, r2
10002e16:	f043 0301 	orr.w	r3, r3, #1
10002e1a:	6103      	str	r3, [r0, #16]
10002e1c:	e7cd      	b.n	10002dba <HAL_ADC_Init+0x15a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
10002e1e:	6821      	ldr	r1, [r4, #0]
10002e20:	6b0b      	ldr	r3, [r1, #48]	; 0x30
10002e22:	f023 030f 	bic.w	r3, r3, #15
10002e26:	69a2      	ldr	r2, [r4, #24]
10002e28:	3a01      	subs	r2, #1
10002e2a:	4313      	orrs	r3, r2
10002e2c:	630b      	str	r3, [r1, #48]	; 0x30
10002e2e:	e7d6      	b.n	10002dde <HAL_ADC_Init+0x17e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002e30:	6d63      	ldr	r3, [r4, #84]	; 0x54
10002e32:	f043 0310 	orr.w	r3, r3, #16
10002e36:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
10002e38:	2501      	movs	r5, #1
}
10002e3a:	4628      	mov	r0, r5
10002e3c:	b003      	add	sp, #12
10002e3e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
10002e40:	2501      	movs	r5, #1
10002e42:	e7fa      	b.n	10002e3a <HAL_ADC_Init+0x1da>
10002e44:	100203f0 	.word	0x100203f0
10002e48:	053e2d63 	.word	0x053e2d63
10002e4c:	48003000 	.word	0x48003000
10002e50:	48003100 	.word	0x48003100
10002e54:	48003300 	.word	0x48003300
10002e58:	fff0c003 	.word	0xfff0c003
10002e5c:	fc00f81e 	.word	0xfc00f81e

10002e60 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
10002e60:	b570      	push	{r4, r5, r6, lr}
10002e62:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
10002e64:	2300      	movs	r3, #0
10002e66:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
10002e68:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
10002e6c:	2b01      	cmp	r3, #1
10002e6e:	d044      	beq.n	10002efa <HAL_ADCEx_Calibration_Start+0x9a>
10002e70:	4604      	mov	r4, r0
10002e72:	460d      	mov	r5, r1
10002e74:	4616      	mov	r6, r2
10002e76:	2301      	movs	r3, #1
10002e78:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
10002e7c:	f7ff fd34 	bl	100028e8 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
10002e80:	2800      	cmp	r0, #0
10002e82:	d131      	bne.n	10002ee8 <HAL_ADCEx_Calibration_Start+0x88>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10002e84:	6d61      	ldr	r1, [r4, #84]	; 0x54
10002e86:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
10002e8a:	f021 0102 	bic.w	r1, r1, #2
10002e8e:	f041 0102 	orr.w	r1, r1, #2
10002e92:	6561      	str	r1, [r4, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
10002e94:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
10002e96:	6891      	ldr	r1, [r2, #8]
10002e98:	4b19      	ldr	r3, [pc, #100]	; (10002f00 <HAL_ADCEx_Calibration_Start+0xa0>)
10002e9a:	400b      	ands	r3, r1
10002e9c:	f405 3580 	and.w	r5, r5, #65536	; 0x10000
10002ea0:	f006 4680 	and.w	r6, r6, #1073741824	; 0x40000000
10002ea4:	4335      	orrs	r5, r6
10002ea6:	432b      	orrs	r3, r5
10002ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10002eac:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
10002eae:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
10002eb0:	689b      	ldr	r3, [r3, #8]
10002eb2:	2b00      	cmp	r3, #0
10002eb4:	db06      	blt.n	10002ec4 <HAL_ADCEx_Calibration_Start+0x64>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
10002eb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
10002eb8:	f023 0303 	bic.w	r3, r3, #3
10002ebc:	f043 0301 	orr.w	r3, r3, #1
10002ec0:	6563      	str	r3, [r4, #84]	; 0x54
10002ec2:	e015      	b.n	10002ef0 <HAL_ADCEx_Calibration_Start+0x90>
      wait_loop_index++;
10002ec4:	9b01      	ldr	r3, [sp, #4]
10002ec6:	3301      	adds	r3, #1
10002ec8:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
10002eca:	9a01      	ldr	r2, [sp, #4]
10002ecc:	4b0d      	ldr	r3, [pc, #52]	; (10002f04 <HAL_ADCEx_Calibration_Start+0xa4>)
10002ece:	429a      	cmp	r2, r3
10002ed0:	d9ed      	bls.n	10002eae <HAL_ADCEx_Calibration_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State,
10002ed2:	6d63      	ldr	r3, [r4, #84]	; 0x54
10002ed4:	f023 0312 	bic.w	r3, r3, #18
10002ed8:	f043 0310 	orr.w	r3, r3, #16
10002edc:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
10002ede:	2300      	movs	r3, #0
10002ee0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
10002ee4:	2001      	movs	r0, #1
10002ee6:	e006      	b.n	10002ef6 <HAL_ADCEx_Calibration_Start+0x96>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
10002ee8:	6d63      	ldr	r3, [r4, #84]	; 0x54
10002eea:	f043 0310 	orr.w	r3, r3, #16
10002eee:	6563      	str	r3, [r4, #84]	; 0x54

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
10002ef0:	2300      	movs	r3, #0
10002ef2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  return tmp_hal_status;
}
10002ef6:	b002      	add	sp, #8
10002ef8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
10002efa:	2002      	movs	r0, #2
10002efc:	e7fb      	b.n	10002ef6 <HAL_ADCEx_Calibration_Start+0x96>
10002efe:	bf00      	nop
10002f00:	3ffeffc0 	.word	0x3ffeffc0
10002f04:	32021fbf 	.word	0x32021fbf

10002f08 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
10002f08:	4770      	bx	lr

10002f0a <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
10002f0a:	4770      	bx	lr

10002f0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
10002f0c:	4770      	bx	lr

10002f0e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
10002f0e:	4770      	bx	lr

10002f10 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
10002f10:	4770      	bx	lr
	...

10002f14 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10002f14:	4a07      	ldr	r2, [pc, #28]	; (10002f34 <HAL_NVIC_SetPriorityGrouping+0x20>)
10002f16:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10002f18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
10002f1c:	041b      	lsls	r3, r3, #16
10002f1e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10002f20:	0200      	lsls	r0, r0, #8
10002f22:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10002f26:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
10002f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10002f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
10002f30:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
10002f32:	4770      	bx	lr
10002f34:	e000ed00 	.word	0xe000ed00

10002f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10002f38:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10002f3a:	4b19      	ldr	r3, [pc, #100]	; (10002fa0 <HAL_NVIC_SetPriority+0x68>)
10002f3c:	68db      	ldr	r3, [r3, #12]
10002f3e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10002f42:	f1c3 0c07 	rsb	ip, r3, #7
10002f46:	f1bc 0f04 	cmp.w	ip, #4
10002f4a:	bf28      	it	cs
10002f4c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10002f50:	f103 0e04 	add.w	lr, r3, #4
10002f54:	f1be 0f06 	cmp.w	lr, #6
10002f58:	d918      	bls.n	10002f8c <HAL_NVIC_SetPriority+0x54>
10002f5a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002f5c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
10002f60:	fa0e fc0c 	lsl.w	ip, lr, ip
10002f64:	ea21 010c 	bic.w	r1, r1, ip
10002f68:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10002f6a:	fa0e f303 	lsl.w	r3, lr, r3
10002f6e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10002f72:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
10002f74:	2800      	cmp	r0, #0
10002f76:	db0b      	blt.n	10002f90 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002f78:	0109      	lsls	r1, r1, #4
10002f7a:	b2c9      	uxtb	r1, r1
10002f7c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
10002f80:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
10002f84:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
10002f88:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10002f8c:	2300      	movs	r3, #0
10002f8e:	e7e5      	b.n	10002f5c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002f90:	f000 000f 	and.w	r0, r0, #15
10002f94:	0109      	lsls	r1, r1, #4
10002f96:	b2c9      	uxtb	r1, r1
10002f98:	4b02      	ldr	r3, [pc, #8]	; (10002fa4 <HAL_NVIC_SetPriority+0x6c>)
10002f9a:	5419      	strb	r1, [r3, r0]
10002f9c:	e7f4      	b.n	10002f88 <HAL_NVIC_SetPriority+0x50>
10002f9e:	bf00      	nop
10002fa0:	e000ed00 	.word	0xe000ed00
10002fa4:	e000ed14 	.word	0xe000ed14

10002fa8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
10002fa8:	2800      	cmp	r0, #0
10002faa:	db07      	blt.n	10002fbc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002fac:	f000 021f 	and.w	r2, r0, #31
10002fb0:	0940      	lsrs	r0, r0, #5
10002fb2:	2301      	movs	r3, #1
10002fb4:	4093      	lsls	r3, r2
10002fb6:	4a02      	ldr	r2, [pc, #8]	; (10002fc0 <HAL_NVIC_EnableIRQ+0x18>)
10002fb8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
10002fbc:	4770      	bx	lr
10002fbe:	bf00      	nop
10002fc0:	e000e100 	.word	0xe000e100

10002fc4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
10002fc4:	2800      	cmp	r0, #0
10002fc6:	db0c      	blt.n	10002fe2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10002fc8:	f000 021f 	and.w	r2, r0, #31
10002fcc:	0940      	lsrs	r0, r0, #5
10002fce:	2301      	movs	r3, #1
10002fd0:	4093      	lsls	r3, r2
10002fd2:	3020      	adds	r0, #32
10002fd4:	4a03      	ldr	r2, [pc, #12]	; (10002fe4 <HAL_NVIC_DisableIRQ+0x20>)
10002fd6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
10002fda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10002fde:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
10002fe2:	4770      	bx	lr
10002fe4:	e000e100 	.word	0xe000e100

10002fe8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10002fe8:	3801      	subs	r0, #1
10002fea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
10002fee:	d20b      	bcs.n	10003008 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10002ff0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
10002ff4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10002ff6:	4a05      	ldr	r2, [pc, #20]	; (1000300c <HAL_SYSTICK_Config+0x24>)
10002ff8:	21f0      	movs	r1, #240	; 0xf0
10002ffa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10002ffe:	2000      	movs	r0, #0
10003000:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10003002:	2207      	movs	r2, #7
10003004:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10003006:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
10003008:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
1000300a:	4770      	bx	lr
1000300c:	e000ed00 	.word	0xe000ed00

10003010 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
10003010:	b170      	cbz	r0, 10003030 <HAL_DAC_Init+0x20>
{
10003012:	b510      	push	{r4, lr}
10003014:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
10003016:	7903      	ldrb	r3, [r0, #4]
10003018:	b133      	cbz	r3, 10003028 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
1000301a:	2302      	movs	r3, #2
1000301c:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
1000301e:	2000      	movs	r0, #0
10003020:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
10003022:	2301      	movs	r3, #1
10003024:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
10003026:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
10003028:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
1000302a:	f7fe f915 	bl	10001258 <HAL_DAC_MspInit>
1000302e:	e7f4      	b.n	1000301a <HAL_DAC_Init+0xa>
    return HAL_ERROR;
10003030:	2001      	movs	r0, #1
}
10003032:	4770      	bx	lr

10003034 <HAL_DAC_Start>:

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
10003034:	7943      	ldrb	r3, [r0, #5]
10003036:	2b01      	cmp	r3, #1
10003038:	d029      	beq.n	1000308e <HAL_DAC_Start+0x5a>
{
1000303a:	b410      	push	{r4}
  __HAL_LOCK(hdac);
1000303c:	2301      	movs	r3, #1
1000303e:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
10003040:	2202      	movs	r2, #2
10003042:	7102      	strb	r2, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
10003044:	6804      	ldr	r4, [r0, #0]
10003046:	6822      	ldr	r2, [r4, #0]
10003048:	408b      	lsls	r3, r1
1000304a:	4313      	orrs	r3, r2
1000304c:	6023      	str	r3, [r4, #0]

  if (Channel == DAC_CHANNEL_1)
1000304e:	b991      	cbnz	r1, 10003076 <HAL_DAC_Start+0x42>
  {

    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
10003050:	6802      	ldr	r2, [r0, #0]
10003052:	6813      	ldr	r3, [r2, #0]
10003054:	f003 033e 	and.w	r3, r3, #62	; 0x3e
10003058:	2b02      	cmp	r3, #2
1000305a:	d007      	beq.n	1000306c <HAL_DAC_Start+0x38>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
1000305c:	2301      	movs	r3, #1
1000305e:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
10003060:	2300      	movs	r3, #0
10003062:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
10003064:	4618      	mov	r0, r3
}
10003066:	f85d 4b04 	ldr.w	r4, [sp], #4
1000306a:	4770      	bx	lr
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
1000306c:	6853      	ldr	r3, [r2, #4]
1000306e:	f043 0301 	orr.w	r3, r3, #1
10003072:	6053      	str	r3, [r2, #4]
10003074:	e7f2      	b.n	1000305c <HAL_DAC_Start+0x28>
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
10003076:	6802      	ldr	r2, [r0, #0]
10003078:	6813      	ldr	r3, [r2, #0]
1000307a:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
1000307e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
10003082:	d1eb      	bne.n	1000305c <HAL_DAC_Start+0x28>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
10003084:	6853      	ldr	r3, [r2, #4]
10003086:	f043 0302 	orr.w	r3, r3, #2
1000308a:	6053      	str	r3, [r2, #4]
1000308c:	e7e6      	b.n	1000305c <HAL_DAC_Start+0x28>
  __HAL_LOCK(hdac);
1000308e:	2002      	movs	r0, #2
}
10003090:	4770      	bx	lr

10003092 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
10003092:	b410      	push	{r4}
10003094:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0;
10003096:	2400      	movs	r4, #0
10003098:	9401      	str	r4, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
1000309a:	6800      	ldr	r0, [r0, #0]
1000309c:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
1000309e:	b951      	cbnz	r1, 100030b6 <HAL_DAC_SetValue+0x24>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
100030a0:	9901      	ldr	r1, [sp, #4]
100030a2:	440a      	add	r2, r1
100030a4:	3208      	adds	r2, #8
100030a6:	9201      	str	r2, [sp, #4]
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
100030a8:	9a01      	ldr	r2, [sp, #4]
100030aa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
100030ac:	2000      	movs	r0, #0
100030ae:	b003      	add	sp, #12
100030b0:	f85d 4b04 	ldr.w	r4, [sp], #4
100030b4:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
100030b6:	9901      	ldr	r1, [sp, #4]
100030b8:	440a      	add	r2, r1
100030ba:	3214      	adds	r2, #20
100030bc:	9201      	str	r2, [sp, #4]
100030be:	e7f3      	b.n	100030a8 <HAL_DAC_SetValue+0x16>

100030c0 <HAL_DAC_GetValue>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
100030c0:	b911      	cbnz	r1, 100030c8 <HAL_DAC_GetValue+0x8>
  {
    return hdac->Instance->DOR1;
100030c2:	6803      	ldr	r3, [r0, #0]
100030c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
100030c6:	4770      	bx	lr
  }
  else
  {
    return hdac->Instance->DOR2;
100030c8:	6803      	ldr	r3, [r0, #0]
100030ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
  }
}
100030cc:	4770      	bx	lr
	...

100030d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
100030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
100030d2:	7943      	ldrb	r3, [r0, #5]
100030d4:	2b01      	cmp	r3, #1
100030d6:	f000 8097 	beq.w	10003208 <HAL_DAC_ConfigChannel+0x138>
100030da:	4604      	mov	r4, r0
100030dc:	460d      	mov	r5, r1
100030de:	4616      	mov	r6, r2
100030e0:	2301      	movs	r3, #1
100030e2:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
100030e4:	2302      	movs	r3, #2
100030e6:	7103      	strb	r3, [r0, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
100030e8:	684b      	ldr	r3, [r1, #4]
100030ea:	2b04      	cmp	r3, #4
100030ec:	d039      	beq.n	10003162 <HAL_DAC_ConfigChannel+0x92>
    hdac->Instance->SHHR = (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << Channel;
    /* RefreshTime */
    hdac->Instance->SHRR = (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << Channel;
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
100030ee:	696b      	ldr	r3, [r5, #20]
100030f0:	2b01      	cmp	r3, #1
100030f2:	d070      	beq.n	100031d6 <HAL_DAC_ConfigChannel+0x106>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
100030f4:	6821      	ldr	r1, [r4, #0]
100030f6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  /* Clear DAC_MCR_MODE2_0, DAC_MCR_MODE2_1 and DAC_MCR_MODE2_2 bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << Channel);
100030f8:	2207      	movs	r2, #7
100030fa:	40b2      	lsls	r2, r6
100030fc:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
10003100:	686b      	ldr	r3, [r5, #4]
10003102:	68e8      	ldr	r0, [r5, #12]
10003104:	4303      	orrs	r3, r0
10003106:	6928      	ldr	r0, [r5, #16]
10003108:	4303      	orrs	r3, r0
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
1000310a:	40b3      	lsls	r3, r6
1000310c:	4313      	orrs	r3, r2
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
1000310e:	63cb      	str	r3, [r1, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << Channel);
10003110:	6821      	ldr	r1, [r4, #0]
10003112:	680b      	ldr	r3, [r1, #0]
10003114:	f44f 4280 	mov.w	r2, #16384	; 0x4000
10003118:	40b2      	lsls	r2, r6
1000311a:	ea23 0302 	bic.w	r3, r3, r2
1000311e:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
10003120:	6823      	ldr	r3, [r4, #0]
10003122:	681f      	ldr	r7, [r3, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << Channel);
10003124:	f640 73fe 	movw	r3, #4094	; 0xffe
10003128:	40b3      	lsls	r3, r6
1000312a:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = (sConfig->DAC_Trigger);
1000312e:	68ab      	ldr	r3, [r5, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
10003130:	40b3      	lsls	r3, r6
10003132:	431f      	orrs	r7, r3

  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
10003134:	682b      	ldr	r3, [r5, #0]
10003136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
1000313a:	d057      	beq.n	100031ec <HAL_DAC_ConfigChannel+0x11c>
  {
    tmpreg1 |= DAC_CR_HFSEL;
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
1000313c:	2b00      	cmp	r3, #0
1000313e:	d158      	bne.n	100031f2 <HAL_DAC_ConfigChannel+0x122>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
10003140:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
      }
    }
  }

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
10003144:	6822      	ldr	r2, [r4, #0]
10003146:	6017      	str	r7, [r2, #0]

  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
10003148:	6821      	ldr	r1, [r4, #0]
1000314a:	680b      	ldr	r3, [r1, #0]
1000314c:	22c0      	movs	r2, #192	; 0xc0
1000314e:	fa02 f606 	lsl.w	r6, r2, r6
10003152:	ea23 0606 	bic.w	r6, r3, r6
10003156:	600e      	str	r6, [r1, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
10003158:	2301      	movs	r3, #1
1000315a:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
1000315c:	2000      	movs	r0, #0
1000315e:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
10003160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Channel == DAC_CHANNEL_1)
10003162:	b172      	cbz	r2, 10003182 <HAL_DAC_ConfigChannel+0xb2>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0U)
10003164:	6823      	ldr	r3, [r4, #0]
10003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003168:	2b00      	cmp	r3, #0
1000316a:	da25      	bge.n	100031b8 <HAL_DAC_ConfigChannel+0xe8>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
1000316c:	f7fe fc64 	bl	10001a38 <HAL_GetTick>
10003170:	2801      	cmp	r0, #1
10003172:	d9f7      	bls.n	10003164 <HAL_DAC_ConfigChannel+0x94>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
10003174:	6923      	ldr	r3, [r4, #16]
10003176:	f043 0308 	orr.w	r3, r3, #8
1000317a:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
1000317c:	2003      	movs	r0, #3
1000317e:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
10003180:	e7ee      	b.n	10003160 <HAL_DAC_ConfigChannel+0x90>
      tickstart = HAL_GetTick();
10003182:	f7fe fc59 	bl	10001a38 <HAL_GetTick>
10003186:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0U)
10003188:	6823      	ldr	r3, [r4, #0]
1000318a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
1000318c:	4b1f      	ldr	r3, [pc, #124]	; (1000320c <HAL_DAC_ConfigChannel+0x13c>)
1000318e:	4013      	ands	r3, r2
10003190:	b15b      	cbz	r3, 100031aa <HAL_DAC_ConfigChannel+0xda>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
10003192:	f7fe fc51 	bl	10001a38 <HAL_GetTick>
10003196:	1bc0      	subs	r0, r0, r7
10003198:	2801      	cmp	r0, #1
1000319a:	d9f5      	bls.n	10003188 <HAL_DAC_ConfigChannel+0xb8>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
1000319c:	6923      	ldr	r3, [r4, #16]
1000319e:	f043 0308 	orr.w	r3, r3, #8
100031a2:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
100031a4:	2003      	movs	r0, #3
100031a6:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
100031a8:	e7da      	b.n	10003160 <HAL_DAC_ConfigChannel+0x90>
      HAL_Delay(1);
100031aa:	2001      	movs	r0, #1
100031ac:	f7fe fc4a 	bl	10001a44 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
100031b0:	6823      	ldr	r3, [r4, #0]
100031b2:	69ea      	ldr	r2, [r5, #28]
100031b4:	641a      	str	r2, [r3, #64]	; 0x40
100031b6:	e005      	b.n	100031c4 <HAL_DAC_ConfigChannel+0xf4>
      HAL_Delay(1U);
100031b8:	2001      	movs	r0, #1
100031ba:	f7fe fc43 	bl	10001a44 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
100031be:	6823      	ldr	r3, [r4, #0]
100031c0:	69ea      	ldr	r2, [r5, #28]
100031c2:	645a      	str	r2, [r3, #68]	; 0x44
    hdac->Instance->SHHR = (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << Channel;
100031c4:	6a2b      	ldr	r3, [r5, #32]
100031c6:	6822      	ldr	r2, [r4, #0]
100031c8:	40b3      	lsls	r3, r6
100031ca:	6493      	str	r3, [r2, #72]	; 0x48
    hdac->Instance->SHRR = (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << Channel;
100031cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
100031ce:	6822      	ldr	r2, [r4, #0]
100031d0:	40b3      	lsls	r3, r6
100031d2:	64d3      	str	r3, [r2, #76]	; 0x4c
100031d4:	e78b      	b.n	100030ee <HAL_DAC_ConfigChannel+0x1e>
    tmpreg1 = hdac->Instance->CCR;
100031d6:	6821      	ldr	r1, [r4, #0]
100031d8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << Channel);
100031da:	221f      	movs	r2, #31
100031dc:	40b2      	lsls	r2, r6
100031de:	ea23 0202 	bic.w	r2, r3, r2
    tmpreg2 = sConfig->DAC_TrimmingValue;
100031e2:	69ab      	ldr	r3, [r5, #24]
    tmpreg1 |= tmpreg2 << Channel;
100031e4:	40b3      	lsls	r3, r6
100031e6:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
100031e8:	638b      	str	r3, [r1, #56]	; 0x38
100031ea:	e783      	b.n	100030f4 <HAL_DAC_ConfigChannel+0x24>
    tmpreg1 |= DAC_CR_HFSEL;
100031ec:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
100031f0:	e7a8      	b.n	10003144 <HAL_DAC_ConfigChannel+0x74>
      pclk1freq = HAL_RCC_GetPCLK1Freq();
100031f2:	f001 fd79 	bl	10004ce8 <HAL_RCC_GetPCLK1Freq>
      if (pclk1freq > HFSEL_ENABLE_THRESHOLD_80MHZ)
100031f6:	4b06      	ldr	r3, [pc, #24]	; (10003210 <HAL_DAC_ConfigChannel+0x140>)
100031f8:	4298      	cmp	r0, r3
100031fa:	d902      	bls.n	10003202 <HAL_DAC_ConfigChannel+0x132>
        tmpreg1 |= DAC_CR_HFSEL;
100031fc:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
10003200:	e7a0      	b.n	10003144 <HAL_DAC_ConfigChannel+0x74>
        tmpreg1 &= ~(DAC_CR_HFSEL);
10003202:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
10003206:	e79d      	b.n	10003144 <HAL_DAC_ConfigChannel+0x74>
  __HAL_LOCK(hdac);
10003208:	2002      	movs	r0, #2
1000320a:	e7a9      	b.n	10003160 <HAL_DAC_ConfigChannel+0x90>
1000320c:	20008000 	.word	0x20008000
10003210:	04c4b400 	.word	0x04c4b400

10003214 <HAL_EXTI_SetConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
10003214:	2800      	cmp	r0, #0
10003216:	d074      	beq.n	10003302 <HAL_EXTI_SetConfigLine+0xee>
10003218:	2900      	cmp	r1, #0
1000321a:	d074      	beq.n	10003306 <HAL_EXTI_SetConfigLine+0xf2>
{
1000321c:	b570      	push	{r4, r5, r6, lr}

  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
1000321e:	680b      	ldr	r3, [r1, #0]
10003220:	6003      	str	r3, [r0, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
10003222:	f3c3 4001 	ubfx	r0, r3, #16, #2
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
10003226:	f003 0c1f 	and.w	ip, r3, #31
  maskline = (1uL << linepos);
1000322a:	2201      	movs	r2, #1
1000322c:	fa02 f20c 	lsl.w	r2, r2, ip

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x0u)
10003230:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
10003234:	d01c      	beq.n	10003270 <HAL_EXTI_SetConfigLine+0x5c>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
10003236:	ea4f 1e40 	mov.w	lr, r0, lsl #5
1000323a:	f10e 44a0 	add.w	r4, lr, #1342177280	; 0x50000000
1000323e:	f504 4450 	add.w	r4, r4, #53248	; 0xd000
    regval = *regaddr;
10003242:	6825      	ldr	r5, [r4, #0]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x0u)
10003244:	688e      	ldr	r6, [r1, #8]
10003246:	f016 0f01 	tst.w	r6, #1
1000324a:	d036      	beq.n	100032ba <HAL_EXTI_SetConfigLine+0xa6>
    {
      regval |= maskline;
1000324c:	4315      	orrs	r5, r2
    {
      regval &= ~maskline;
    }

    /* Store rising trigger mode */
    *regaddr = regval;
1000324e:	6025      	str	r5, [r4, #0]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
10003250:	4e2f      	ldr	r6, [pc, #188]	; (10003310 <HAL_EXTI_SetConfigLine+0xfc>)
    regval = *regaddr;
10003252:	f85e 4006 	ldr.w	r4, [lr, r6]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x0u)
10003256:	688d      	ldr	r5, [r1, #8]
10003258:	f015 0f02 	tst.w	r5, #2
1000325c:	d030      	beq.n	100032c0 <HAL_EXTI_SetConfigLine+0xac>
    {
      regval |= maskline;
1000325e:	4314      	orrs	r4, r2
    {
      regval &= ~maskline;
    }

    /* Store falling trigger mode */
    *regaddr = regval;
10003260:	f84e 4006 	str.w	r4, [lr, r6]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
10003264:	680c      	ldr	r4, [r1, #0]
10003266:	f004 64c0 	and.w	r4, r4, #100663296	; 0x6000000
1000326a:	f1b4 6fc0 	cmp.w	r4, #100663296	; 0x6000000
1000326e:	d02a      	beq.n	100032c6 <HAL_EXTI_SetConfigLine+0xb2>
    }
  }


  /*Set Interrupt And Event Mask for Core 1 if configuration for Core 1 given into parameter mode */
  if ((pExtiConfig->Mode & EXTI_MODE_C1) != 0x0u)
10003270:	684b      	ldr	r3, [r1, #4]
10003272:	f013 0f10 	tst.w	r3, #16
10003276:	d00a      	beq.n	1000328e <HAL_EXTI_SetConfigLine+0x7a>
  {
    regaddr = (&EXTI->C1IMR1 + (EXTI_MODE_OFFSET * offset));
10003278:	ea4f 1c00 	mov.w	ip, r0, lsl #4
1000327c:	4d25      	ldr	r5, [pc, #148]	; (10003314 <HAL_EXTI_SetConfigLine+0x100>)

    regval = *regaddr;
1000327e:	f85c 4005 	ldr.w	r4, [ip, r5]

    /* Mask or set line */
    if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x0u)
10003282:	f013 0f01 	tst.w	r3, #1
10003286:	d033      	beq.n	100032f0 <HAL_EXTI_SetConfigLine+0xdc>
    {
      regval |= maskline;
10003288:	4314      	orrs	r4, r2
    {
      regval &= ~maskline;
    }

    /* Store interrupt mode */
    *regaddr = regval;
1000328a:	f84c 4005 	str.w	r4, [ip, r5]
  }

  /*Set Interrupt And Event Mask for Core 2 if configuration for Core 2 given into parameter mode  */
  if ((pExtiConfig->Mode & EXTI_MODE_C2) != 0x0u)
1000328e:	684c      	ldr	r4, [r1, #4]
10003290:	f014 0f20 	tst.w	r4, #32
10003294:	d039      	beq.n	1000330a <HAL_EXTI_SetConfigLine+0xf6>
  {
    regaddr = (&EXTI->C2IMR1 + (EXTI_MODE_OFFSET * offset));
10003296:	0103      	lsls	r3, r0, #4
10003298:	4d1f      	ldr	r5, [pc, #124]	; (10003318 <HAL_EXTI_SetConfigLine+0x104>)

    regval = *regaddr;
1000329a:	5958      	ldr	r0, [r3, r5]

    /* Mask or set line */
    if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x0u)
1000329c:	f014 0f01 	tst.w	r4, #1
100032a0:	d029      	beq.n	100032f6 <HAL_EXTI_SetConfigLine+0xe2>
    {
      regval |= maskline;
100032a2:	4310      	orrs	r0, r2
    {
      regval &= ~maskline;
    }

    /* Store interrupt mode */
    *regaddr = regval;
100032a4:	5158      	str	r0, [r3, r5]

    /* The event mode cannot be configured if the line does not support it */
    assert_param(((pExtiConfig->Line & EXTI_EVENT) == EXTI_EVENT) || ((pExtiConfig->Mode & EXTI_MODE_EVENT) != EXTI_MODE_EVENT));

    regaddr = (&EXTI->C2EMR1 + (EXTI_MODE_OFFSET * offset));
100032a6:	4c1d      	ldr	r4, [pc, #116]	; (1000331c <HAL_EXTI_SetConfigLine+0x108>)

    regval = *regaddr;
100032a8:	5918      	ldr	r0, [r3, r4]

    /* Mask or set line */
    if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x0u)
100032aa:	6849      	ldr	r1, [r1, #4]
100032ac:	f011 0f02 	tst.w	r1, #2
100032b0:	d024      	beq.n	100032fc <HAL_EXTI_SetConfigLine+0xe8>
    {
      regval |= maskline;
100032b2:	4302      	orrs	r2, r0
    {
      regval &= ~maskline;
    }

    /* Store event mode */
    *regaddr = regval;
100032b4:	511a      	str	r2, [r3, r4]
  }

  return HAL_OK;
100032b6:	2000      	movs	r0, #0
100032b8:	e028      	b.n	1000330c <HAL_EXTI_SetConfigLine+0xf8>
      regval &= ~maskline;
100032ba:	ea25 0502 	bic.w	r5, r5, r2
100032be:	e7c6      	b.n	1000324e <HAL_EXTI_SetConfigLine+0x3a>
      regval &= ~maskline;
100032c0:	ea24 0402 	bic.w	r4, r4, r2
100032c4:	e7cc      	b.n	10003260 <HAL_EXTI_SetConfigLine+0x4c>
      regval = EXTI->EXTICR[linepos >> 2u];
100032c6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
100032ca:	4e15      	ldr	r6, [pc, #84]	; (10003320 <HAL_EXTI_SetConfigLine+0x10c>)
100032cc:	f10c 0c18 	add.w	ip, ip, #24
100032d0:	f856 502c 	ldr.w	r5, [r6, ip, lsl #2]
      regval &= ~(EXTI_EXTICR1_EXTI0 << (EXTI_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
100032d4:	f003 0303 	and.w	r3, r3, #3
100032d8:	00db      	lsls	r3, r3, #3
100032da:	240f      	movs	r4, #15
100032dc:	409c      	lsls	r4, r3
100032de:	ea25 0504 	bic.w	r5, r5, r4
      regval |= (pExtiConfig->GPIOSel << (EXTI_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
100032e2:	68cc      	ldr	r4, [r1, #12]
100032e4:	fa04 f303 	lsl.w	r3, r4, r3
100032e8:	432b      	orrs	r3, r5
      EXTI->EXTICR[linepos >> 2u] = regval;
100032ea:	f846 302c 	str.w	r3, [r6, ip, lsl #2]
100032ee:	e7bf      	b.n	10003270 <HAL_EXTI_SetConfigLine+0x5c>
      regval &= ~maskline;
100032f0:	ea24 0402 	bic.w	r4, r4, r2
100032f4:	e7c9      	b.n	1000328a <HAL_EXTI_SetConfigLine+0x76>
      regval &= ~maskline;
100032f6:	ea20 0002 	bic.w	r0, r0, r2
100032fa:	e7d3      	b.n	100032a4 <HAL_EXTI_SetConfigLine+0x90>
      regval &= ~maskline;
100032fc:	ea20 0202 	bic.w	r2, r0, r2
10003300:	e7d8      	b.n	100032b4 <HAL_EXTI_SetConfigLine+0xa0>
    return HAL_ERROR;
10003302:	2001      	movs	r0, #1
10003304:	4770      	bx	lr
10003306:	2001      	movs	r0, #1
}
10003308:	4770      	bx	lr
  return HAL_OK;
1000330a:	2000      	movs	r0, #0
}
1000330c:	bd70      	pop	{r4, r5, r6, pc}
1000330e:	bf00      	nop
10003310:	5000d004 	.word	0x5000d004
10003314:	5000d080 	.word	0x5000d080
10003318:	5000d0c0 	.word	0x5000d0c0
1000331c:	5000d0c4 	.word	0x5000d0c4
10003320:	5000d000 	.word	0x5000d000

10003324 <HAL_EXTI_ClearConfigLine>:
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if (hexti == NULL)
10003324:	2800      	cmp	r0, #0
10003326:	d047      	beq.n	100033b8 <HAL_EXTI_ClearConfigLine+0x94>
{
10003328:	b570      	push	{r4, r5, r6, lr}
1000332a:	4684      	mov	ip, r0

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
1000332c:	6804      	ldr	r4, [r0, #0]
1000332e:	f3c4 4101 	ubfx	r1, r4, #16, #2
  linepos = (hexti->Line & EXTI_PIN_MASK);
10003332:	f004 0e1f 	and.w	lr, r4, #31
  maskline = (1uL << linepos);
10003336:	2201      	movs	r2, #1
10003338:	fa02 f20e 	lsl.w	r2, r2, lr

  /* 1] Clear interrupt mode */
  regaddr = (&EXTI->C1IMR1 + (EXTI_MODE_OFFSET * offset));
1000333c:	010b      	lsls	r3, r1, #4
1000333e:	4e20      	ldr	r6, [pc, #128]	; (100033c0 <HAL_EXTI_ClearConfigLine+0x9c>)
  regval = (*regaddr & ~maskline);
10003340:	5998      	ldr	r0, [r3, r6]
10003342:	43d5      	mvns	r5, r2
10003344:	ea20 0002 	bic.w	r0, r0, r2
  *regaddr = regval;
10003348:	5198      	str	r0, [r3, r6]

  regaddr = (&EXTI->C2IMR1 + (EXTI_MODE_OFFSET * offset));
1000334a:	3640      	adds	r6, #64	; 0x40
  regval = (*regaddr & ~maskline);
1000334c:	5998      	ldr	r0, [r3, r6]
1000334e:	ea20 0002 	bic.w	r0, r0, r2
  *regaddr = regval;
10003352:	5198      	str	r0, [r3, r6]

  /* 2] Clear event mode */
  regaddr = (&EXTI->C2EMR1 + (EXTI_MODE_OFFSET * offset));
10003354:	3604      	adds	r6, #4
  regval = (*regaddr & ~maskline);
10003356:	5998      	ldr	r0, [r3, r6]
10003358:	ea20 0202 	bic.w	r2, r0, r2
  *regaddr = regval;
1000335c:	519a      	str	r2, [r3, r6]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x0u)
1000335e:	f8dc 3000 	ldr.w	r3, [ip]
10003362:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
10003366:	d029      	beq.n	100033bc <HAL_EXTI_ClearConfigLine+0x98>
  {
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
10003368:	0149      	lsls	r1, r1, #5
1000336a:	f101 43a0 	add.w	r3, r1, #1342177280	; 0x50000000
1000336e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    regval = (*regaddr & ~maskline);
10003372:	681a      	ldr	r2, [r3, #0]
10003374:	402a      	ands	r2, r5
    *regaddr = regval;
10003376:	601a      	str	r2, [r3, #0]

    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
10003378:	4b12      	ldr	r3, [pc, #72]	; (100033c4 <HAL_EXTI_ClearConfigLine+0xa0>)
    regval = (*regaddr & ~maskline);
1000337a:	58ca      	ldr	r2, [r1, r3]
1000337c:	4015      	ands	r5, r2
    *regaddr = regval;
1000337e:	50cd      	str	r5, [r1, r3]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
10003380:	f8dc 3000 	ldr.w	r3, [ip]
10003384:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
10003388:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
1000338c:	d001      	beq.n	10003392 <HAL_EXTI_ClearConfigLine+0x6e>
      regval &= ~(EXTI_EXTICR1_EXTI0 << (EXTI_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
      EXTI->EXTICR[linepos >> 2u] = regval;
    }
  }

  return HAL_OK;
1000338e:	2000      	movs	r0, #0
10003390:	e015      	b.n	100033be <HAL_EXTI_ClearConfigLine+0x9a>
      regval = EXTI->EXTICR[linepos >> 2u];
10003392:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
10003396:	490c      	ldr	r1, [pc, #48]	; (100033c8 <HAL_EXTI_ClearConfigLine+0xa4>)
10003398:	f10e 0e18 	add.w	lr, lr, #24
1000339c:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
      regval &= ~(EXTI_EXTICR1_EXTI0 << (EXTI_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
100033a0:	f004 0403 	and.w	r4, r4, #3
100033a4:	00e4      	lsls	r4, r4, #3
100033a6:	220f      	movs	r2, #15
100033a8:	fa02 f404 	lsl.w	r4, r2, r4
100033ac:	ea23 0404 	bic.w	r4, r3, r4
      EXTI->EXTICR[linepos >> 2u] = regval;
100033b0:	f841 402e 	str.w	r4, [r1, lr, lsl #2]
  return HAL_OK;
100033b4:	2000      	movs	r0, #0
100033b6:	e002      	b.n	100033be <HAL_EXTI_ClearConfigLine+0x9a>
    return HAL_ERROR;
100033b8:	2001      	movs	r0, #1
}
100033ba:	4770      	bx	lr
  return HAL_OK;
100033bc:	2000      	movs	r0, #0
}
100033be:	bd70      	pop	{r4, r5, r6, pc}
100033c0:	5000d080 	.word	0x5000d080
100033c4:	5000d004 	.word	0x5000d004
100033c8:	5000d000 	.word	0x5000d000

100033cc <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
100033cc:	2901      	cmp	r1, #1
100033ce:	d008      	beq.n	100033e2 <HAL_EXTI_RegisterCallback+0x16>
100033d0:	2902      	cmp	r1, #2
100033d2:	d009      	beq.n	100033e8 <HAL_EXTI_RegisterCallback+0x1c>
100033d4:	b109      	cbz	r1, 100033da <HAL_EXTI_RegisterCallback+0xe>
100033d6:	2001      	movs	r0, #1
      status = HAL_ERROR;
      break;
  }

  return status;
}
100033d8:	4770      	bx	lr
      hexti->RisingCallback = pPendingCbfn;
100033da:	6042      	str	r2, [r0, #4]
      hexti->FallingCallback = pPendingCbfn;
100033dc:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
100033de:	4608      	mov	r0, r1
      break;
100033e0:	4770      	bx	lr
      hexti->RisingCallback = pPendingCbfn;
100033e2:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
100033e4:	2000      	movs	r0, #0
      break;
100033e6:	4770      	bx	lr
      hexti->FallingCallback = pPendingCbfn;
100033e8:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
100033ea:	2000      	movs	r0, #0
      break;
100033ec:	4770      	bx	lr
	...

100033f0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
100033f0:	b570      	push	{r4, r5, r6, lr}
100033f2:	4606      	mov	r6, r0
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
100033f4:	6805      	ldr	r5, [r0, #0]
100033f6:	f3c5 4401 	ubfx	r4, r5, #16, #2
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
100033fa:	f005 051f 	and.w	r5, r5, #31
100033fe:	2301      	movs	r3, #1
10003400:	fa03 f505 	lsl.w	r5, r3, r5

  /* Get rising edge pending bit  */
  regaddr = (&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
10003404:	0164      	lsls	r4, r4, #5
10003406:	4b08      	ldr	r3, [pc, #32]	; (10003428 <HAL_EXTI_IRQHandler+0x38>)
  regval = (*regaddr & maskline);
10003408:	58e2      	ldr	r2, [r4, r3]

  if (regval != 0x0u)
1000340a:	422a      	tst	r2, r5
1000340c:	d003      	beq.n	10003416 <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
1000340e:	50e5      	str	r5, [r4, r3]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
10003410:	6843      	ldr	r3, [r0, #4]
10003412:	b103      	cbz	r3, 10003416 <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->RisingCallback();
10003414:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
10003416:	4b05      	ldr	r3, [pc, #20]	; (1000342c <HAL_EXTI_IRQHandler+0x3c>)
  regval = (*regaddr & maskline);
10003418:	58e2      	ldr	r2, [r4, r3]

  if (regval != 0x0u)
1000341a:	422a      	tst	r2, r5
1000341c:	d003      	beq.n	10003426 <HAL_EXTI_IRQHandler+0x36>
  {
    /* Clear pending bit */
    *regaddr = maskline;
1000341e:	50e5      	str	r5, [r4, r3]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
10003420:	68b3      	ldr	r3, [r6, #8]
10003422:	b103      	cbz	r3, 10003426 <HAL_EXTI_IRQHandler+0x36>
    {
      hexti->FallingCallback();
10003424:	4798      	blx	r3
    }
  }
}
10003426:	bd70      	pop	{r4, r5, r6, pc}
10003428:	5000d00c 	.word	0x5000d00c
1000342c:	5000d010 	.word	0x5000d010

10003430 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10003430:	2300      	movs	r3, #0
10003432:	2b0f      	cmp	r3, #15
10003434:	f200 80e4 	bhi.w	10003600 <HAL_GPIO_Init+0x1d0>
{
10003438:	b5f0      	push	{r4, r5, r6, r7, lr}
1000343a:	e03d      	b.n	100034b8 <HAL_GPIO_Init+0x88>
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        temp = EXTI->EXTICR[position >> 2U];
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
1000343c:	220b      	movs	r2, #11
1000343e:	e000      	b.n	10003442 <HAL_GPIO_Init+0x12>
10003440:	2200      	movs	r2, #0
10003442:	40aa      	lsls	r2, r5
10003444:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2U] = temp;
10003446:	4d6f      	ldr	r5, [pc, #444]	; (10003604 <HAL_GPIO_Init+0x1d4>)
10003448:	3418      	adds	r4, #24
1000344a:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
1000344e:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
        temp &= ~((uint32_t)iocurrent);
10003452:	ea6f 020c 	mvn.w	r2, ip
10003456:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
1000345a:	684e      	ldr	r6, [r1, #4]
1000345c:	f416 3f80 	tst.w	r6, #65536	; 0x10000
10003460:	d001      	beq.n	10003466 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
10003462:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;
10003466:	4c67      	ldr	r4, [pc, #412]	; (10003604 <HAL_GPIO_Init+0x1d4>)
10003468:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0

        temp = EXTI_CurrentCPU->EMR1;
1000346c:	f8d4 40c4 	ldr.w	r4, [r4, #196]	; 0xc4
        temp &= ~((uint32_t)iocurrent);
10003470:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10003474:	684e      	ldr	r6, [r1, #4]
10003476:	f416 3f00 	tst.w	r6, #131072	; 0x20000
1000347a:	d001      	beq.n	10003480 <HAL_GPIO_Init+0x50>
        {
          temp |= iocurrent;
1000347c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI_CurrentCPU->EMR1 = temp;
10003480:	4c60      	ldr	r4, [pc, #384]	; (10003604 <HAL_GPIO_Init+0x1d4>)
10003482:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10003486:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
10003488:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
1000348c:	684e      	ldr	r6, [r1, #4]
1000348e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
10003492:	d001      	beq.n	10003498 <HAL_GPIO_Init+0x68>
        {
          temp |= iocurrent;
10003494:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR1 = temp;
10003498:	4c5a      	ldr	r4, [pc, #360]	; (10003604 <HAL_GPIO_Init+0x1d4>)
1000349a:	6025      	str	r5, [r4, #0]

        temp = EXTI->FTSR1;
1000349c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
1000349e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
100034a0:	684d      	ldr	r5, [r1, #4]
100034a2:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
100034a6:	d001      	beq.n	100034ac <HAL_GPIO_Init+0x7c>
        {
          temp |= iocurrent;
100034a8:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR1 = temp;
100034ac:	4c55      	ldr	r4, [pc, #340]	; (10003604 <HAL_GPIO_Init+0x1d4>)
100034ae:	6062      	str	r2, [r4, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
100034b0:	3301      	adds	r3, #1
100034b2:	2b0f      	cmp	r3, #15
100034b4:	f200 80a3 	bhi.w	100035fe <HAL_GPIO_Init+0x1ce>
    ioposition = ((uint32_t)0x01) << position;
100034b8:	2201      	movs	r2, #1
100034ba:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
100034bc:	680c      	ldr	r4, [r1, #0]
100034be:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
100034c2:	ea32 0404 	bics.w	r4, r2, r4
100034c6:	d1f3      	bne.n	100034b0 <HAL_GPIO_Init+0x80>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100034c8:	684c      	ldr	r4, [r1, #4]
100034ca:	2c02      	cmp	r4, #2
100034cc:	d001      	beq.n	100034d2 <HAL_GPIO_Init+0xa2>
100034ce:	2c12      	cmp	r4, #18
100034d0:	d110      	bne.n	100034f4 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->AFR[position >> 3];
100034d2:	08dd      	lsrs	r5, r3, #3
100034d4:	3508      	adds	r5, #8
100034d6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
100034da:	f003 0407 	and.w	r4, r3, #7
100034de:	00a6      	lsls	r6, r4, #2
100034e0:	240f      	movs	r4, #15
100034e2:	40b4      	lsls	r4, r6
100034e4:	ea27 0e04 	bic.w	lr, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
100034e8:	690c      	ldr	r4, [r1, #16]
100034ea:	40b4      	lsls	r4, r6
100034ec:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
100034f0:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
100034f4:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
100034f6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
100034fa:	2403      	movs	r4, #3
100034fc:	fa04 f40e 	lsl.w	r4, r4, lr
10003500:	43e5      	mvns	r5, r4
10003502:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10003506:	684c      	ldr	r4, [r1, #4]
10003508:	f004 0403 	and.w	r4, r4, #3
1000350c:	fa04 f40e 	lsl.w	r4, r4, lr
10003510:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
10003512:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10003514:	684c      	ldr	r4, [r1, #4]
10003516:	1e66      	subs	r6, r4, #1
10003518:	2e01      	cmp	r6, #1
1000351a:	d903      	bls.n	10003524 <HAL_GPIO_Init+0xf4>
1000351c:	2c11      	cmp	r4, #17
1000351e:	d001      	beq.n	10003524 <HAL_GPIO_Init+0xf4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10003520:	2c12      	cmp	r4, #18
10003522:	d10f      	bne.n	10003544 <HAL_GPIO_Init+0x114>
        temp = GPIOx->OSPEEDR;
10003524:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10003526:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
10003528:	68cc      	ldr	r4, [r1, #12]
1000352a:	fa04 f40e 	lsl.w	r4, r4, lr
1000352e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
10003530:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
10003532:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10003534:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10003538:	684c      	ldr	r4, [r1, #4]
1000353a:	f3c4 1400 	ubfx	r4, r4, #4, #1
1000353e:	409c      	lsls	r4, r3
10003540:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
10003542:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
10003544:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10003546:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
10003548:	688a      	ldr	r2, [r1, #8]
1000354a:	fa02 f20e 	lsl.w	r2, r2, lr
1000354e:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
10003550:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10003552:	684a      	ldr	r2, [r1, #4]
10003554:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
10003558:	d0aa      	beq.n	100034b0 <HAL_GPIO_Init+0x80>
        temp = EXTI->EXTICR[position >> 2U];
1000355a:	089c      	lsrs	r4, r3, #2
1000355c:	f104 0518 	add.w	r5, r4, #24
10003560:	4a28      	ldr	r2, [pc, #160]	; (10003604 <HAL_GPIO_Init+0x1d4>)
10003562:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10003566:	f003 0203 	and.w	r2, r3, #3
1000356a:	00d5      	lsls	r5, r2, #3
1000356c:	22ff      	movs	r2, #255	; 0xff
1000356e:	40aa      	lsls	r2, r5
10003570:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10003574:	4a24      	ldr	r2, [pc, #144]	; (10003608 <HAL_GPIO_Init+0x1d8>)
10003576:	4290      	cmp	r0, r2
10003578:	f43f af62 	beq.w	10003440 <HAL_GPIO_Init+0x10>
1000357c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
10003580:	4290      	cmp	r0, r2
10003582:	d028      	beq.n	100035d6 <HAL_GPIO_Init+0x1a6>
10003584:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
10003588:	4290      	cmp	r0, r2
1000358a:	d026      	beq.n	100035da <HAL_GPIO_Init+0x1aa>
1000358c:	f1b0 2f50 	cmp.w	r0, #1342197760	; 0x50005000
10003590:	d025      	beq.n	100035de <HAL_GPIO_Init+0x1ae>
10003592:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
10003596:	4290      	cmp	r0, r2
10003598:	d023      	beq.n	100035e2 <HAL_GPIO_Init+0x1b2>
1000359a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1000359e:	4290      	cmp	r0, r2
100035a0:	d021      	beq.n	100035e6 <HAL_GPIO_Init+0x1b6>
100035a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
100035a6:	4290      	cmp	r0, r2
100035a8:	d01f      	beq.n	100035ea <HAL_GPIO_Init+0x1ba>
100035aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
100035ae:	4290      	cmp	r0, r2
100035b0:	d01d      	beq.n	100035ee <HAL_GPIO_Init+0x1be>
100035b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
100035b6:	4290      	cmp	r0, r2
100035b8:	d01b      	beq.n	100035f2 <HAL_GPIO_Init+0x1c2>
100035ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
100035be:	4290      	cmp	r0, r2
100035c0:	d019      	beq.n	100035f6 <HAL_GPIO_Init+0x1c6>
100035c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
100035c6:	4290      	cmp	r0, r2
100035c8:	d017      	beq.n	100035fa <HAL_GPIO_Init+0x1ca>
100035ca:	4a10      	ldr	r2, [pc, #64]	; (1000360c <HAL_GPIO_Init+0x1dc>)
100035cc:	4290      	cmp	r0, r2
100035ce:	f43f af35 	beq.w	1000343c <HAL_GPIO_Init+0xc>
100035d2:	2219      	movs	r2, #25
100035d4:	e735      	b.n	10003442 <HAL_GPIO_Init+0x12>
100035d6:	2201      	movs	r2, #1
100035d8:	e733      	b.n	10003442 <HAL_GPIO_Init+0x12>
100035da:	2202      	movs	r2, #2
100035dc:	e731      	b.n	10003442 <HAL_GPIO_Init+0x12>
100035de:	2203      	movs	r2, #3
100035e0:	e72f      	b.n	10003442 <HAL_GPIO_Init+0x12>
100035e2:	2204      	movs	r2, #4
100035e4:	e72d      	b.n	10003442 <HAL_GPIO_Init+0x12>
100035e6:	2205      	movs	r2, #5
100035e8:	e72b      	b.n	10003442 <HAL_GPIO_Init+0x12>
100035ea:	2206      	movs	r2, #6
100035ec:	e729      	b.n	10003442 <HAL_GPIO_Init+0x12>
100035ee:	2207      	movs	r2, #7
100035f0:	e727      	b.n	10003442 <HAL_GPIO_Init+0x12>
100035f2:	2208      	movs	r2, #8
100035f4:	e725      	b.n	10003442 <HAL_GPIO_Init+0x12>
100035f6:	2209      	movs	r2, #9
100035f8:	e723      	b.n	10003442 <HAL_GPIO_Init+0x12>
100035fa:	220a      	movs	r2, #10
100035fc:	e721      	b.n	10003442 <HAL_GPIO_Init+0x12>
      }
    }
  }
}
100035fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003600:	4770      	bx	lr
10003602:	bf00      	nop
10003604:	5000d000 	.word	0x5000d000
10003608:	50002000 	.word	0x50002000
1000360c:	54004000 	.word	0x54004000

10003610 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10003610:	2300      	movs	r3, #0
10003612:	2b0f      	cmp	r3, #15
10003614:	f200 80a8 	bhi.w	10003768 <HAL_GPIO_DeInit+0x158>
{
10003618:	b5f0      	push	{r4, r5, r6, r7, lr}
1000361a:	e02d      	b.n	10003678 <HAL_GPIO_DeInit+0x68>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = EXTI->EXTICR[position >> 2];
      tmp &= (((uint32_t)0xFF) << (8 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (8 * (position & 0x03))))
1000361c:	250b      	movs	r5, #11
1000361e:	e000      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
10003620:	2500      	movs	r5, #0
10003622:	fa05 fc0c 	lsl.w	ip, r5, ip
10003626:	45a4      	cmp	ip, r4
10003628:	d07f      	beq.n	1000372a <HAL_GPIO_DeInit+0x11a>
        EXTI->EXTICR[position >> 2] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODER0 << (position * 2));
1000362a:	6804      	ldr	r4, [r0, #0]
1000362c:	005d      	lsls	r5, r3, #1
1000362e:	f04f 0c03 	mov.w	ip, #3
10003632:	fa0c fc05 	lsl.w	ip, ip, r5
10003636:	ea44 040c 	orr.w	r4, r4, ip
1000363a:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
1000363c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
10003640:	f10e 0e08 	add.w	lr, lr, #8
10003644:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
10003648:	f003 0507 	and.w	r5, r3, #7
1000364c:	00ae      	lsls	r6, r5, #2
1000364e:	250f      	movs	r5, #15
10003650:	40b5      	lsls	r5, r6
10003652:	ea24 0405 	bic.w	r4, r4, r5
10003656:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
1000365a:	6884      	ldr	r4, [r0, #8]
1000365c:	ea24 040c 	bic.w	r4, r4, ip
10003660:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
10003662:	6844      	ldr	r4, [r0, #4]
10003664:	ea24 0202 	bic.w	r2, r4, r2
10003668:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
1000366a:	68c2      	ldr	r2, [r0, #12]
1000366c:	ea22 020c 	bic.w	r2, r2, ip
10003670:	60c2      	str	r2, [r0, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
10003672:	3301      	adds	r3, #1
10003674:	2b0f      	cmp	r3, #15
10003676:	d876      	bhi.n	10003766 <HAL_GPIO_DeInit+0x156>
    ioposition = ((uint32_t)0x01) << position;
10003678:	2201      	movs	r2, #1
1000367a:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
1000367c:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
10003680:	ea32 0401 	bics.w	r4, r2, r1
10003684:	d1f5      	bne.n	10003672 <HAL_GPIO_DeInit+0x62>
      tmp = EXTI->EXTICR[position >> 2];
10003686:	ea4f 0e93 	mov.w	lr, r3, lsr #2
1000368a:	f10e 0518 	add.w	r5, lr, #24
1000368e:	4c37      	ldr	r4, [pc, #220]	; (1000376c <HAL_GPIO_DeInit+0x15c>)
10003690:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (((uint32_t)0xFF) << (8 * (position & 0x03)));
10003694:	f003 0c03 	and.w	ip, r3, #3
10003698:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
1000369c:	25ff      	movs	r5, #255	; 0xff
1000369e:	fa05 f70c 	lsl.w	r7, r5, ip
100036a2:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (8 * (position & 0x03))))
100036a4:	4d32      	ldr	r5, [pc, #200]	; (10003770 <HAL_GPIO_DeInit+0x160>)
100036a6:	42a8      	cmp	r0, r5
100036a8:	d0ba      	beq.n	10003620 <HAL_GPIO_DeInit+0x10>
100036aa:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
100036ae:	42a8      	cmp	r0, r5
100036b0:	d027      	beq.n	10003702 <HAL_GPIO_DeInit+0xf2>
100036b2:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
100036b6:	42a8      	cmp	r0, r5
100036b8:	d025      	beq.n	10003706 <HAL_GPIO_DeInit+0xf6>
100036ba:	f1b0 2f50 	cmp.w	r0, #1342197760	; 0x50005000
100036be:	d024      	beq.n	1000370a <HAL_GPIO_DeInit+0xfa>
100036c0:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
100036c4:	42a8      	cmp	r0, r5
100036c6:	d022      	beq.n	1000370e <HAL_GPIO_DeInit+0xfe>
100036c8:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
100036cc:	42a8      	cmp	r0, r5
100036ce:	d020      	beq.n	10003712 <HAL_GPIO_DeInit+0x102>
100036d0:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
100036d4:	42a8      	cmp	r0, r5
100036d6:	d01e      	beq.n	10003716 <HAL_GPIO_DeInit+0x106>
100036d8:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
100036dc:	42a8      	cmp	r0, r5
100036de:	d01c      	beq.n	1000371a <HAL_GPIO_DeInit+0x10a>
100036e0:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
100036e4:	42a8      	cmp	r0, r5
100036e6:	d01a      	beq.n	1000371e <HAL_GPIO_DeInit+0x10e>
100036e8:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
100036ec:	42a8      	cmp	r0, r5
100036ee:	d018      	beq.n	10003722 <HAL_GPIO_DeInit+0x112>
100036f0:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
100036f4:	42a8      	cmp	r0, r5
100036f6:	d016      	beq.n	10003726 <HAL_GPIO_DeInit+0x116>
100036f8:	4d1e      	ldr	r5, [pc, #120]	; (10003774 <HAL_GPIO_DeInit+0x164>)
100036fa:	42a8      	cmp	r0, r5
100036fc:	d08e      	beq.n	1000361c <HAL_GPIO_DeInit+0xc>
100036fe:	2519      	movs	r5, #25
10003700:	e78f      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
10003702:	2501      	movs	r5, #1
10003704:	e78d      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
10003706:	2502      	movs	r5, #2
10003708:	e78b      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
1000370a:	2503      	movs	r5, #3
1000370c:	e789      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
1000370e:	2504      	movs	r5, #4
10003710:	e787      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
10003712:	2505      	movs	r5, #5
10003714:	e785      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
10003716:	2506      	movs	r5, #6
10003718:	e783      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
1000371a:	2507      	movs	r5, #7
1000371c:	e781      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
1000371e:	2508      	movs	r5, #8
10003720:	e77f      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
10003722:	2509      	movs	r5, #9
10003724:	e77d      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
10003726:	250a      	movs	r5, #10
10003728:	e77b      	b.n	10003622 <HAL_GPIO_DeInit+0x12>
        EXTI_CurrentCPU->IMR1 &= ~((uint32_t)iocurrent);
1000372a:	4d10      	ldr	r5, [pc, #64]	; (1000376c <HAL_GPIO_DeInit+0x15c>)
1000372c:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
10003730:	ea24 0406 	bic.w	r4, r4, r6
10003734:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
        EXTI_CurrentCPU->EMR1 &= ~((uint32_t)iocurrent);
10003738:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
1000373c:	ea24 0406 	bic.w	r4, r4, r6
10003740:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
10003744:	682c      	ldr	r4, [r5, #0]
10003746:	ea24 0406 	bic.w	r4, r4, r6
1000374a:	602c      	str	r4, [r5, #0]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
1000374c:	686c      	ldr	r4, [r5, #4]
1000374e:	ea24 0606 	bic.w	r6, r4, r6
10003752:	606e      	str	r6, [r5, #4]
        EXTI->EXTICR[position >> 2] &= ~tmp;
10003754:	f10e 0418 	add.w	r4, lr, #24
10003758:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
1000375c:	ea26 0707 	bic.w	r7, r6, r7
10003760:	f845 7024 	str.w	r7, [r5, r4, lsl #2]
10003764:	e761      	b.n	1000362a <HAL_GPIO_DeInit+0x1a>
    }
  }
}
10003766:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003768:	4770      	bx	lr
1000376a:	bf00      	nop
1000376c:	5000d000 	.word	0x5000d000
10003770:	50002000 	.word	0x50002000
10003774:	54004000 	.word	0x54004000

10003778 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10003778:	b10a      	cbz	r2, 1000377e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
1000377a:	6181      	str	r1, [r0, #24]
1000377c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
1000377e:	0409      	lsls	r1, r1, #16
10003780:	6181      	str	r1, [r0, #24]
  }
}
10003782:	4770      	bx	lr

10003784 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
10003784:	6943      	ldr	r3, [r0, #20]
10003786:	420b      	tst	r3, r1
10003788:	d001      	beq.n	1000378e <HAL_GPIO_TogglePin+0xa>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
1000378a:	6281      	str	r1, [r0, #40]	; 0x28
1000378c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
1000378e:	6181      	str	r1, [r0, #24]
  }
}
10003790:	4770      	bx	lr
	...

10003794 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
10003794:	3020      	adds	r0, #32
10003796:	f04f 4398 	mov.w	r3, #1275068416	; 0x4c000000
1000379a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
1000379e:	4b03      	ldr	r3, [pc, #12]	; (100037ac <HAL_HSEM_FastTake+0x18>)
100037a0:	429a      	cmp	r2, r3
100037a2:	d001      	beq.n	100037a8 <HAL_HSEM_FastTake+0x14>
    return HAL_OK;
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
100037a4:	2001      	movs	r0, #1
100037a6:	4770      	bx	lr
    return HAL_OK;
100037a8:	2000      	movs	r0, #0
}
100037aa:	4770      	bx	lr
100037ac:	80000200 	.word	0x80000200

100037b0 <HAL_HSEM_Release>:
  /* Check the parameters */
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
100037b0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
100037b4:	f04f 4398 	mov.w	r3, #1275068416	; 0x4c000000
100037b8:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

}
100037bc:	4770      	bx	lr

100037be <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
100037be:	6803      	ldr	r3, [r0, #0]
100037c0:	699a      	ldr	r2, [r3, #24]
100037c2:	f012 0f02 	tst.w	r2, #2
100037c6:	d001      	beq.n	100037cc <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
100037c8:	2200      	movs	r2, #0
100037ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
100037cc:	6803      	ldr	r3, [r0, #0]
100037ce:	699a      	ldr	r2, [r3, #24]
100037d0:	f012 0f01 	tst.w	r2, #1
100037d4:	d103      	bne.n	100037de <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
100037d6:	699a      	ldr	r2, [r3, #24]
100037d8:	f042 0201 	orr.w	r2, r2, #1
100037dc:	619a      	str	r2, [r3, #24]
  }
}
100037de:	4770      	bx	lr

100037e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
100037e0:	b410      	push	{r4}
100037e2:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
100037e4:	f3c1 0109 	ubfx	r1, r1, #0, #10
100037e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
100037ec:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
100037ee:	4321      	orrs	r1, r4
100037f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
100037f4:	6802      	ldr	r2, [r0, #0]
100037f6:	6853      	ldr	r3, [r2, #4]
100037f8:	0d64      	lsrs	r4, r4, #21
100037fa:	f404 6480 	and.w	r4, r4, #1024	; 0x400
100037fe:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
10003802:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
10003806:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
1000380a:	f044 0403 	orr.w	r4, r4, #3
1000380e:	ea23 0404 	bic.w	r4, r3, r4
10003812:	4321      	orrs	r1, r4
10003814:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
10003816:	f85d 4b04 	ldr.w	r4, [sp], #4
1000381a:	4770      	bx	lr

1000381c <I2C_IsErrorOccurred>:
{
1000381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10003820:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
10003822:	6803      	ldr	r3, [r0, #0]
10003824:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
10003826:	f017 0710 	ands.w	r7, r7, #16
1000382a:	d04c      	beq.n	100038c6 <I2C_IsErrorOccurred+0xaa>
1000382c:	460e      	mov	r6, r1
1000382e:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10003830:	2210      	movs	r2, #16
10003832:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
10003834:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
10003836:	6823      	ldr	r3, [r4, #0]
10003838:	6998      	ldr	r0, [r3, #24]
1000383a:	f010 0f20 	tst.w	r0, #32
1000383e:	d13b      	bne.n	100038b8 <I2C_IsErrorOccurred+0x9c>
10003840:	2d00      	cmp	r5, #0
10003842:	d139      	bne.n	100038b8 <I2C_IsErrorOccurred+0x9c>
      if (Timeout != HAL_MAX_DELAY)
10003844:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
10003848:	d0f5      	beq.n	10003836 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
1000384a:	f7fe f8f5 	bl	10001a38 <HAL_GetTick>
1000384e:	eba0 0008 	sub.w	r0, r0, r8
10003852:	42b0      	cmp	r0, r6
10003854:	d801      	bhi.n	1000385a <I2C_IsErrorOccurred+0x3e>
10003856:	2e00      	cmp	r6, #0
10003858:	d1ed      	bne.n	10003836 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
1000385a:	6821      	ldr	r1, [r4, #0]
1000385c:	684b      	ldr	r3, [r1, #4]
1000385e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
10003862:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
10003866:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
10003868:	6988      	ldr	r0, [r1, #24]
1000386a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
1000386e:	d002      	beq.n	10003876 <I2C_IsErrorOccurred+0x5a>
10003870:	b90b      	cbnz	r3, 10003876 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
10003872:	2a20      	cmp	r2, #32
10003874:	d118      	bne.n	100038a8 <I2C_IsErrorOccurred+0x8c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10003876:	6823      	ldr	r3, [r4, #0]
10003878:	699b      	ldr	r3, [r3, #24]
1000387a:	f013 0f20 	tst.w	r3, #32
1000387e:	d1da      	bne.n	10003836 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
10003880:	f7fe f8da 	bl	10001a38 <HAL_GetTick>
10003884:	eba0 0008 	sub.w	r0, r0, r8
10003888:	2819      	cmp	r0, #25
1000388a:	d9f4      	bls.n	10003876 <I2C_IsErrorOccurred+0x5a>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
1000388c:	6c63      	ldr	r3, [r4, #68]	; 0x44
1000388e:	f043 0320 	orr.w	r3, r3, #32
10003892:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
10003894:	2320      	movs	r3, #32
10003896:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
1000389a:	2300      	movs	r3, #0
1000389c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
100038a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
100038a4:	2501      	movs	r5, #1
100038a6:	e7e6      	b.n	10003876 <I2C_IsErrorOccurred+0x5a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
100038a8:	684b      	ldr	r3, [r1, #4]
100038aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
100038ae:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
100038b0:	f7fe f8c2 	bl	10001a38 <HAL_GetTick>
100038b4:	4680      	mov	r8, r0
100038b6:	e7de      	b.n	10003876 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
100038b8:	2d00      	cmp	r5, #0
100038ba:	d140      	bne.n	1000393e <I2C_IsErrorOccurred+0x122>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100038bc:	2220      	movs	r2, #32
100038be:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
100038c0:	2704      	movs	r7, #4
    status = HAL_ERROR;
100038c2:	2501      	movs	r5, #1
100038c4:	e000      	b.n	100038c8 <I2C_IsErrorOccurred+0xac>
  HAL_StatusTypeDef status = HAL_OK;
100038c6:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
100038c8:	6822      	ldr	r2, [r4, #0]
100038ca:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
100038cc:	f413 7f80 	tst.w	r3, #256	; 0x100
100038d0:	d005      	beq.n	100038de <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
100038d2:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
100038d6:	f44f 7180 	mov.w	r1, #256	; 0x100
100038da:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
100038dc:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
100038de:	f413 6f80 	tst.w	r3, #1024	; 0x400
100038e2:	d006      	beq.n	100038f2 <I2C_IsErrorOccurred+0xd6>
    error_code |= HAL_I2C_ERROR_OVR;
100038e4:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
100038e8:	6822      	ldr	r2, [r4, #0]
100038ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
100038ee:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
100038f0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
100038f2:	f413 7f00 	tst.w	r3, #512	; 0x200
100038f6:	d024      	beq.n	10003942 <I2C_IsErrorOccurred+0x126>
    error_code |= HAL_I2C_ERROR_ARLO;
100038f8:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
100038fc:	6823      	ldr	r3, [r4, #0]
100038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
10003902:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
10003904:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
10003906:	4620      	mov	r0, r4
10003908:	f7ff ff59 	bl	100037be <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
1000390c:	6822      	ldr	r2, [r4, #0]
1000390e:	6853      	ldr	r3, [r2, #4]
10003910:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
10003914:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
10003918:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
1000391c:	f023 0301 	bic.w	r3, r3, #1
10003920:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
10003922:	6c63      	ldr	r3, [r4, #68]	; 0x44
10003924:	431f      	orrs	r7, r3
10003926:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
10003928:	2320      	movs	r3, #32
1000392a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
1000392e:	2300      	movs	r3, #0
10003930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
10003934:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
10003938:	4628      	mov	r0, r5
1000393a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
1000393e:	2704      	movs	r7, #4
10003940:	e7c2      	b.n	100038c8 <I2C_IsErrorOccurred+0xac>
  if (status != HAL_OK)
10003942:	2d00      	cmp	r5, #0
10003944:	d0f8      	beq.n	10003938 <I2C_IsErrorOccurred+0x11c>
10003946:	e7de      	b.n	10003906 <I2C_IsErrorOccurred+0xea>

10003948 <I2C_WaitOnTXISFlagUntilTimeout>:
{
10003948:	b570      	push	{r4, r5, r6, lr}
1000394a:	4604      	mov	r4, r0
1000394c:	460d      	mov	r5, r1
1000394e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
10003950:	6823      	ldr	r3, [r4, #0]
10003952:	699b      	ldr	r3, [r3, #24]
10003954:	f013 0f02 	tst.w	r3, #2
10003958:	d11d      	bne.n	10003996 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
1000395a:	4632      	mov	r2, r6
1000395c:	4629      	mov	r1, r5
1000395e:	4620      	mov	r0, r4
10003960:	f7ff ff5c 	bl	1000381c <I2C_IsErrorOccurred>
10003964:	b9c8      	cbnz	r0, 1000399a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
10003966:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1000396a:	d0f1      	beq.n	10003950 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1000396c:	f7fe f864 	bl	10001a38 <HAL_GetTick>
10003970:	1b80      	subs	r0, r0, r6
10003972:	42a8      	cmp	r0, r5
10003974:	d801      	bhi.n	1000397a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
10003976:	2d00      	cmp	r5, #0
10003978:	d1ea      	bne.n	10003950 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
1000397a:	6c63      	ldr	r3, [r4, #68]	; 0x44
1000397c:	f043 0320 	orr.w	r3, r3, #32
10003980:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
10003982:	2320      	movs	r3, #32
10003984:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
10003988:	2300      	movs	r3, #0
1000398a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
1000398e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
10003992:	2001      	movs	r0, #1
10003994:	e000      	b.n	10003998 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
10003996:	2000      	movs	r0, #0
}
10003998:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
1000399a:	2001      	movs	r0, #1
1000399c:	e7fc      	b.n	10003998 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

1000399e <I2C_WaitOnFlagUntilTimeout>:
{
1000399e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100039a2:	4606      	mov	r6, r0
100039a4:	4688      	mov	r8, r1
100039a6:	4617      	mov	r7, r2
100039a8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
100039aa:	6834      	ldr	r4, [r6, #0]
100039ac:	69a4      	ldr	r4, [r4, #24]
100039ae:	ea38 0304 	bics.w	r3, r8, r4
100039b2:	bf0c      	ite	eq
100039b4:	f04f 0c01 	moveq.w	ip, #1
100039b8:	f04f 0c00 	movne.w	ip, #0
100039bc:	45bc      	cmp	ip, r7
100039be:	d118      	bne.n	100039f2 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
100039c0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
100039c4:	d0f1      	beq.n	100039aa <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
100039c6:	f7fe f837 	bl	10001a38 <HAL_GetTick>
100039ca:	9b06      	ldr	r3, [sp, #24]
100039cc:	1ac0      	subs	r0, r0, r3
100039ce:	42a8      	cmp	r0, r5
100039d0:	d801      	bhi.n	100039d6 <I2C_WaitOnFlagUntilTimeout+0x38>
100039d2:	2d00      	cmp	r5, #0
100039d4:	d1e9      	bne.n	100039aa <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
100039d6:	6c73      	ldr	r3, [r6, #68]	; 0x44
100039d8:	f043 0320 	orr.w	r3, r3, #32
100039dc:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
100039de:	2320      	movs	r3, #32
100039e0:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
100039e4:	2300      	movs	r3, #0
100039e6:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
100039ea:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
100039ee:	2001      	movs	r0, #1
100039f0:	e000      	b.n	100039f4 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
100039f2:	2000      	movs	r0, #0
}
100039f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

100039f8 <I2C_RequestMemoryWrite>:
{
100039f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100039fc:	b082      	sub	sp, #8
100039fe:	4604      	mov	r4, r0
10003a00:	4690      	mov	r8, r2
10003a02:	461d      	mov	r5, r3
10003a04:	9e08      	ldr	r6, [sp, #32]
10003a06:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
10003a08:	4b19      	ldr	r3, [pc, #100]	; (10003a70 <I2C_RequestMemoryWrite+0x78>)
10003a0a:	9300      	str	r3, [sp, #0]
10003a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10003a10:	b2ea      	uxtb	r2, r5
10003a12:	f7ff fee5 	bl	100037e0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10003a16:	463a      	mov	r2, r7
10003a18:	4631      	mov	r1, r6
10003a1a:	4620      	mov	r0, r4
10003a1c:	f7ff ff94 	bl	10003948 <I2C_WaitOnTXISFlagUntilTimeout>
10003a20:	b9f8      	cbnz	r0, 10003a62 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10003a22:	2d01      	cmp	r5, #1
10003a24:	d10e      	bne.n	10003a44 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10003a26:	6823      	ldr	r3, [r4, #0]
10003a28:	fa5f f288 	uxtb.w	r2, r8
10003a2c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
10003a2e:	9700      	str	r7, [sp, #0]
10003a30:	4633      	mov	r3, r6
10003a32:	2200      	movs	r2, #0
10003a34:	2180      	movs	r1, #128	; 0x80
10003a36:	4620      	mov	r0, r4
10003a38:	f7ff ffb1 	bl	1000399e <I2C_WaitOnFlagUntilTimeout>
10003a3c:	b9a8      	cbnz	r0, 10003a6a <I2C_RequestMemoryWrite+0x72>
}
10003a3e:	b002      	add	sp, #8
10003a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10003a44:	6823      	ldr	r3, [r4, #0]
10003a46:	ea4f 2218 	mov.w	r2, r8, lsr #8
10003a4a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10003a4c:	463a      	mov	r2, r7
10003a4e:	4631      	mov	r1, r6
10003a50:	4620      	mov	r0, r4
10003a52:	f7ff ff79 	bl	10003948 <I2C_WaitOnTXISFlagUntilTimeout>
10003a56:	b930      	cbnz	r0, 10003a66 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10003a58:	6823      	ldr	r3, [r4, #0]
10003a5a:	fa5f f288 	uxtb.w	r2, r8
10003a5e:	629a      	str	r2, [r3, #40]	; 0x28
10003a60:	e7e5      	b.n	10003a2e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
10003a62:	2001      	movs	r0, #1
10003a64:	e7eb      	b.n	10003a3e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
10003a66:	2001      	movs	r0, #1
10003a68:	e7e9      	b.n	10003a3e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
10003a6a:	2001      	movs	r0, #1
10003a6c:	e7e7      	b.n	10003a3e <I2C_RequestMemoryWrite+0x46>
10003a6e:	bf00      	nop
10003a70:	80002000 	.word	0x80002000

10003a74 <I2C_RequestMemoryRead>:
{
10003a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10003a78:	b082      	sub	sp, #8
10003a7a:	4604      	mov	r4, r0
10003a7c:	4690      	mov	r8, r2
10003a7e:	461d      	mov	r5, r3
10003a80:	9e08      	ldr	r6, [sp, #32]
10003a82:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
10003a84:	4b18      	ldr	r3, [pc, #96]	; (10003ae8 <I2C_RequestMemoryRead+0x74>)
10003a86:	9300      	str	r3, [sp, #0]
10003a88:	2300      	movs	r3, #0
10003a8a:	b2ea      	uxtb	r2, r5
10003a8c:	f7ff fea8 	bl	100037e0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10003a90:	463a      	mov	r2, r7
10003a92:	4631      	mov	r1, r6
10003a94:	4620      	mov	r0, r4
10003a96:	f7ff ff57 	bl	10003948 <I2C_WaitOnTXISFlagUntilTimeout>
10003a9a:	b9f8      	cbnz	r0, 10003adc <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10003a9c:	2d01      	cmp	r5, #1
10003a9e:	d10e      	bne.n	10003abe <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10003aa0:	6823      	ldr	r3, [r4, #0]
10003aa2:	fa5f f288 	uxtb.w	r2, r8
10003aa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
10003aa8:	9700      	str	r7, [sp, #0]
10003aaa:	4633      	mov	r3, r6
10003aac:	2200      	movs	r2, #0
10003aae:	2140      	movs	r1, #64	; 0x40
10003ab0:	4620      	mov	r0, r4
10003ab2:	f7ff ff74 	bl	1000399e <I2C_WaitOnFlagUntilTimeout>
10003ab6:	b9a8      	cbnz	r0, 10003ae4 <I2C_RequestMemoryRead+0x70>
}
10003ab8:	b002      	add	sp, #8
10003aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10003abe:	6823      	ldr	r3, [r4, #0]
10003ac0:	ea4f 2218 	mov.w	r2, r8, lsr #8
10003ac4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
10003ac6:	463a      	mov	r2, r7
10003ac8:	4631      	mov	r1, r6
10003aca:	4620      	mov	r0, r4
10003acc:	f7ff ff3c 	bl	10003948 <I2C_WaitOnTXISFlagUntilTimeout>
10003ad0:	b930      	cbnz	r0, 10003ae0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10003ad2:	6823      	ldr	r3, [r4, #0]
10003ad4:	fa5f f288 	uxtb.w	r2, r8
10003ad8:	629a      	str	r2, [r3, #40]	; 0x28
10003ada:	e7e5      	b.n	10003aa8 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
10003adc:	2001      	movs	r0, #1
10003ade:	e7eb      	b.n	10003ab8 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
10003ae0:	2001      	movs	r0, #1
10003ae2:	e7e9      	b.n	10003ab8 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
10003ae4:	2001      	movs	r0, #1
10003ae6:	e7e7      	b.n	10003ab8 <I2C_RequestMemoryRead+0x44>
10003ae8:	80002000 	.word	0x80002000

10003aec <I2C_WaitOnSTOPFlagUntilTimeout>:
{
10003aec:	b570      	push	{r4, r5, r6, lr}
10003aee:	4605      	mov	r5, r0
10003af0:	460c      	mov	r4, r1
10003af2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
10003af4:	682b      	ldr	r3, [r5, #0]
10003af6:	699b      	ldr	r3, [r3, #24]
10003af8:	f013 0f20 	tst.w	r3, #32
10003afc:	d11a      	bne.n	10003b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
10003afe:	4632      	mov	r2, r6
10003b00:	4621      	mov	r1, r4
10003b02:	4628      	mov	r0, r5
10003b04:	f7ff fe8a 	bl	1000381c <I2C_IsErrorOccurred>
10003b08:	b9b0      	cbnz	r0, 10003b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10003b0a:	f7fd ff95 	bl	10001a38 <HAL_GetTick>
10003b0e:	1b80      	subs	r0, r0, r6
10003b10:	42a0      	cmp	r0, r4
10003b12:	d801      	bhi.n	10003b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
10003b14:	2c00      	cmp	r4, #0
10003b16:	d1ed      	bne.n	10003af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10003b18:	6c6b      	ldr	r3, [r5, #68]	; 0x44
10003b1a:	f043 0320 	orr.w	r3, r3, #32
10003b1e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
10003b20:	2320      	movs	r3, #32
10003b22:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
10003b26:	2300      	movs	r3, #0
10003b28:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
10003b2c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
10003b30:	2001      	movs	r0, #1
}
10003b32:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
10003b34:	2000      	movs	r0, #0
10003b36:	e7fc      	b.n	10003b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
10003b38:	2001      	movs	r0, #1
10003b3a:	e7fa      	b.n	10003b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

10003b3c <HAL_I2C_MspInit>:
}
10003b3c:	4770      	bx	lr

10003b3e <HAL_I2C_Init>:
  if (hi2c == NULL)
10003b3e:	2800      	cmp	r0, #0
10003b40:	d059      	beq.n	10003bf6 <HAL_I2C_Init+0xb8>
{
10003b42:	b510      	push	{r4, lr}
10003b44:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
10003b46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
10003b4a:	2b00      	cmp	r3, #0
10003b4c:	d043      	beq.n	10003bd6 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
10003b4e:	2324      	movs	r3, #36	; 0x24
10003b50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
10003b54:	6822      	ldr	r2, [r4, #0]
10003b56:	6813      	ldr	r3, [r2, #0]
10003b58:	f023 0301 	bic.w	r3, r3, #1
10003b5c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
10003b5e:	6863      	ldr	r3, [r4, #4]
10003b60:	6822      	ldr	r2, [r4, #0]
10003b62:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
10003b66:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
10003b68:	6822      	ldr	r2, [r4, #0]
10003b6a:	6893      	ldr	r3, [r2, #8]
10003b6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
10003b70:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
10003b72:	68e3      	ldr	r3, [r4, #12]
10003b74:	2b01      	cmp	r3, #1
10003b76:	d033      	beq.n	10003be0 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
10003b78:	68a3      	ldr	r3, [r4, #8]
10003b7a:	6822      	ldr	r2, [r4, #0]
10003b7c:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
10003b80:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10003b82:	68e3      	ldr	r3, [r4, #12]
10003b84:	2b02      	cmp	r3, #2
10003b86:	d031      	beq.n	10003bec <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
10003b88:	6822      	ldr	r2, [r4, #0]
10003b8a:	6853      	ldr	r3, [r2, #4]
10003b8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
10003b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
10003b94:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
10003b96:	6822      	ldr	r2, [r4, #0]
10003b98:	68d3      	ldr	r3, [r2, #12]
10003b9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
10003b9e:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
10003ba0:	6923      	ldr	r3, [r4, #16]
10003ba2:	6962      	ldr	r2, [r4, #20]
10003ba4:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
10003ba6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
10003ba8:	6822      	ldr	r2, [r4, #0]
10003baa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
10003bae:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
10003bb0:	69e3      	ldr	r3, [r4, #28]
10003bb2:	6a21      	ldr	r1, [r4, #32]
10003bb4:	6822      	ldr	r2, [r4, #0]
10003bb6:	430b      	orrs	r3, r1
10003bb8:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
10003bba:	6822      	ldr	r2, [r4, #0]
10003bbc:	6813      	ldr	r3, [r2, #0]
10003bbe:	f043 0301 	orr.w	r3, r3, #1
10003bc2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10003bc4:	2000      	movs	r0, #0
10003bc6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
10003bc8:	2320      	movs	r3, #32
10003bca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
10003bce:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
10003bd0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
10003bd4:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
10003bd6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
10003bda:	f7ff ffaf 	bl	10003b3c <HAL_I2C_MspInit>
10003bde:	e7b6      	b.n	10003b4e <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
10003be0:	68a3      	ldr	r3, [r4, #8]
10003be2:	6822      	ldr	r2, [r4, #0]
10003be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
10003be8:	6093      	str	r3, [r2, #8]
10003bea:	e7ca      	b.n	10003b82 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
10003bec:	6823      	ldr	r3, [r4, #0]
10003bee:	f44f 6200 	mov.w	r2, #2048	; 0x800
10003bf2:	605a      	str	r2, [r3, #4]
10003bf4:	e7c8      	b.n	10003b88 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
10003bf6:	2001      	movs	r0, #1
}
10003bf8:	4770      	bx	lr

10003bfa <HAL_I2C_Mem_Write>:
{
10003bfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10003bfe:	b083      	sub	sp, #12
10003c00:	460e      	mov	r6, r1
10003c02:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
10003c06:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
10003c08:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
10003c0c:	b2c9      	uxtb	r1, r1
10003c0e:	2920      	cmp	r1, #32
10003c10:	f040 80bb 	bne.w	10003d8a <HAL_I2C_Mem_Write+0x190>
10003c14:	4604      	mov	r4, r0
10003c16:	4690      	mov	r8, r2
10003c18:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
10003c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003c1c:	b1cb      	cbz	r3, 10003c52 <HAL_I2C_Mem_Write+0x58>
10003c1e:	f1ba 0f00 	cmp.w	sl, #0
10003c22:	d016      	beq.n	10003c52 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
10003c24:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
10003c28:	2b01      	cmp	r3, #1
10003c2a:	f000 80b2 	beq.w	10003d92 <HAL_I2C_Mem_Write+0x198>
10003c2e:	f04f 0b01 	mov.w	fp, #1
10003c32:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
10003c36:	f7fd feff 	bl	10001a38 <HAL_GetTick>
10003c3a:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
10003c3c:	9000      	str	r0, [sp, #0]
10003c3e:	2319      	movs	r3, #25
10003c40:	465a      	mov	r2, fp
10003c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
10003c46:	4620      	mov	r0, r4
10003c48:	f7ff fea9 	bl	1000399e <I2C_WaitOnFlagUntilTimeout>
10003c4c:	b130      	cbz	r0, 10003c5c <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
10003c4e:	2001      	movs	r0, #1
10003c50:	e09c      	b.n	10003d8c <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10003c52:	f44f 7300 	mov.w	r3, #512	; 0x200
10003c56:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
10003c58:	2001      	movs	r0, #1
10003c5a:	e097      	b.n	10003d8c <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
10003c5c:	2321      	movs	r3, #33	; 0x21
10003c5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
10003c62:	2340      	movs	r3, #64	; 0x40
10003c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10003c68:	2300      	movs	r3, #0
10003c6a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
10003c6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10003c6e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
10003c70:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
10003c74:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
10003c76:	9701      	str	r7, [sp, #4]
10003c78:	9500      	str	r5, [sp, #0]
10003c7a:	464b      	mov	r3, r9
10003c7c:	4642      	mov	r2, r8
10003c7e:	4631      	mov	r1, r6
10003c80:	4620      	mov	r0, r4
10003c82:	f7ff feb9 	bl	100039f8 <I2C_RequestMemoryWrite>
10003c86:	b970      	cbnz	r0, 10003ca6 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10003c88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
10003c8a:	b29b      	uxth	r3, r3
10003c8c:	2bff      	cmp	r3, #255	; 0xff
10003c8e:	d90f      	bls.n	10003cb0 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
10003c90:	22ff      	movs	r2, #255	; 0xff
10003c92:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
10003c94:	2300      	movs	r3, #0
10003c96:	9300      	str	r3, [sp, #0]
10003c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10003c9c:	4631      	mov	r1, r6
10003c9e:	4620      	mov	r0, r4
10003ca0:	f7ff fd9e 	bl	100037e0 <I2C_TransferConfig>
10003ca4:	e021      	b.n	10003cea <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
10003ca6:	2300      	movs	r3, #0
10003ca8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
10003cac:	4658      	mov	r0, fp
10003cae:	e06d      	b.n	10003d8c <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
10003cb0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
10003cb2:	b292      	uxth	r2, r2
10003cb4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
10003cb6:	2300      	movs	r3, #0
10003cb8:	9300      	str	r3, [sp, #0]
10003cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
10003cbe:	b2d2      	uxtb	r2, r2
10003cc0:	4631      	mov	r1, r6
10003cc2:	4620      	mov	r0, r4
10003cc4:	f7ff fd8c 	bl	100037e0 <I2C_TransferConfig>
10003cc8:	e00f      	b.n	10003cea <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
10003cca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
10003ccc:	b292      	uxth	r2, r2
10003cce:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
10003cd0:	2300      	movs	r3, #0
10003cd2:	9300      	str	r3, [sp, #0]
10003cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
10003cd8:	b2d2      	uxtb	r2, r2
10003cda:	4631      	mov	r1, r6
10003cdc:	4620      	mov	r0, r4
10003cde:	f7ff fd7f 	bl	100037e0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
10003ce2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
10003ce4:	b29b      	uxth	r3, r3
10003ce6:	2b00      	cmp	r3, #0
10003ce8:	d033      	beq.n	10003d52 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
10003cea:	463a      	mov	r2, r7
10003cec:	4629      	mov	r1, r5
10003cee:	4620      	mov	r0, r4
10003cf0:	f7ff fe2a 	bl	10003948 <I2C_WaitOnTXISFlagUntilTimeout>
10003cf4:	2800      	cmp	r0, #0
10003cf6:	d14e      	bne.n	10003d96 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10003cf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
10003cfa:	6823      	ldr	r3, [r4, #0]
10003cfc:	7812      	ldrb	r2, [r2, #0]
10003cfe:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
10003d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
10003d02:	3301      	adds	r3, #1
10003d04:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
10003d06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
10003d08:	b29b      	uxth	r3, r3
10003d0a:	3b01      	subs	r3, #1
10003d0c:	b29b      	uxth	r3, r3
10003d0e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
10003d10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
10003d12:	3b01      	subs	r3, #1
10003d14:	b29b      	uxth	r3, r3
10003d16:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10003d18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
10003d1a:	b292      	uxth	r2, r2
10003d1c:	2a00      	cmp	r2, #0
10003d1e:	d0e0      	beq.n	10003ce2 <HAL_I2C_Mem_Write+0xe8>
10003d20:	2b00      	cmp	r3, #0
10003d22:	d1de      	bne.n	10003ce2 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
10003d24:	9700      	str	r7, [sp, #0]
10003d26:	462b      	mov	r3, r5
10003d28:	2200      	movs	r2, #0
10003d2a:	2180      	movs	r1, #128	; 0x80
10003d2c:	4620      	mov	r0, r4
10003d2e:	f7ff fe36 	bl	1000399e <I2C_WaitOnFlagUntilTimeout>
10003d32:	bb90      	cbnz	r0, 10003d9a <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
10003d34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
10003d36:	b29b      	uxth	r3, r3
10003d38:	2bff      	cmp	r3, #255	; 0xff
10003d3a:	d9c6      	bls.n	10003cca <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
10003d3c:	22ff      	movs	r2, #255	; 0xff
10003d3e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
10003d40:	2300      	movs	r3, #0
10003d42:	9300      	str	r3, [sp, #0]
10003d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10003d48:	4631      	mov	r1, r6
10003d4a:	4620      	mov	r0, r4
10003d4c:	f7ff fd48 	bl	100037e0 <I2C_TransferConfig>
10003d50:	e7c7      	b.n	10003ce2 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
10003d52:	463a      	mov	r2, r7
10003d54:	4629      	mov	r1, r5
10003d56:	4620      	mov	r0, r4
10003d58:	f7ff fec8 	bl	10003aec <I2C_WaitOnSTOPFlagUntilTimeout>
10003d5c:	b9f8      	cbnz	r0, 10003d9e <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10003d5e:	6823      	ldr	r3, [r4, #0]
10003d60:	2220      	movs	r2, #32
10003d62:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
10003d64:	6821      	ldr	r1, [r4, #0]
10003d66:	684b      	ldr	r3, [r1, #4]
10003d68:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
10003d6c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
10003d70:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
10003d74:	f023 0301 	bic.w	r3, r3, #1
10003d78:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
10003d7a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
10003d7e:	2300      	movs	r3, #0
10003d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
10003d84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
10003d88:	e000      	b.n	10003d8c <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
10003d8a:	2002      	movs	r0, #2
}
10003d8c:	b003      	add	sp, #12
10003d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
10003d92:	2002      	movs	r0, #2
10003d94:	e7fa      	b.n	10003d8c <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
10003d96:	2001      	movs	r0, #1
10003d98:	e7f8      	b.n	10003d8c <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
10003d9a:	2001      	movs	r0, #1
10003d9c:	e7f6      	b.n	10003d8c <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
10003d9e:	2001      	movs	r0, #1
10003da0:	e7f4      	b.n	10003d8c <HAL_I2C_Mem_Write+0x192>
	...

10003da4 <HAL_I2C_Mem_Read>:
{
10003da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10003da8:	b083      	sub	sp, #12
10003daa:	460e      	mov	r6, r1
10003dac:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
10003db0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
10003db2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
10003db6:	b2c9      	uxtb	r1, r1
10003db8:	2920      	cmp	r1, #32
10003dba:	f040 80bc 	bne.w	10003f36 <HAL_I2C_Mem_Read+0x192>
10003dbe:	4604      	mov	r4, r0
10003dc0:	4690      	mov	r8, r2
10003dc2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
10003dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10003dc6:	b1cb      	cbz	r3, 10003dfc <HAL_I2C_Mem_Read+0x58>
10003dc8:	f1ba 0f00 	cmp.w	sl, #0
10003dcc:	d016      	beq.n	10003dfc <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
10003dce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
10003dd2:	2b01      	cmp	r3, #1
10003dd4:	f000 80b3 	beq.w	10003f3e <HAL_I2C_Mem_Read+0x19a>
10003dd8:	f04f 0b01 	mov.w	fp, #1
10003ddc:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
10003de0:	f7fd fe2a 	bl	10001a38 <HAL_GetTick>
10003de4:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
10003de6:	9000      	str	r0, [sp, #0]
10003de8:	2319      	movs	r3, #25
10003dea:	465a      	mov	r2, fp
10003dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
10003df0:	4620      	mov	r0, r4
10003df2:	f7ff fdd4 	bl	1000399e <I2C_WaitOnFlagUntilTimeout>
10003df6:	b130      	cbz	r0, 10003e06 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
10003df8:	2001      	movs	r0, #1
10003dfa:	e09d      	b.n	10003f38 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10003dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
10003e00:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
10003e02:	2001      	movs	r0, #1
10003e04:	e098      	b.n	10003f38 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
10003e06:	2322      	movs	r3, #34	; 0x22
10003e08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
10003e0c:	2340      	movs	r3, #64	; 0x40
10003e0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10003e12:	2300      	movs	r3, #0
10003e14:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
10003e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10003e18:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
10003e1a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
10003e1e:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
10003e20:	9701      	str	r7, [sp, #4]
10003e22:	9500      	str	r5, [sp, #0]
10003e24:	464b      	mov	r3, r9
10003e26:	4642      	mov	r2, r8
10003e28:	4631      	mov	r1, r6
10003e2a:	4620      	mov	r0, r4
10003e2c:	f7ff fe22 	bl	10003a74 <I2C_RequestMemoryRead>
10003e30:	b970      	cbnz	r0, 10003e50 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10003e32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
10003e34:	b29b      	uxth	r3, r3
10003e36:	2bff      	cmp	r3, #255	; 0xff
10003e38:	d90f      	bls.n	10003e5a <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
10003e3a:	22ff      	movs	r2, #255	; 0xff
10003e3c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
10003e3e:	4b44      	ldr	r3, [pc, #272]	; (10003f50 <HAL_I2C_Mem_Read+0x1ac>)
10003e40:	9300      	str	r3, [sp, #0]
10003e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10003e46:	4631      	mov	r1, r6
10003e48:	4620      	mov	r0, r4
10003e4a:	f7ff fcc9 	bl	100037e0 <I2C_TransferConfig>
10003e4e:	e021      	b.n	10003e94 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
10003e50:	2300      	movs	r3, #0
10003e52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
10003e56:	4658      	mov	r0, fp
10003e58:	e06e      	b.n	10003f38 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
10003e5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
10003e5c:	b292      	uxth	r2, r2
10003e5e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
10003e60:	4b3b      	ldr	r3, [pc, #236]	; (10003f50 <HAL_I2C_Mem_Read+0x1ac>)
10003e62:	9300      	str	r3, [sp, #0]
10003e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
10003e68:	b2d2      	uxtb	r2, r2
10003e6a:	4631      	mov	r1, r6
10003e6c:	4620      	mov	r0, r4
10003e6e:	f7ff fcb7 	bl	100037e0 <I2C_TransferConfig>
10003e72:	e00f      	b.n	10003e94 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
10003e74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
10003e76:	b292      	uxth	r2, r2
10003e78:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
10003e7a:	2300      	movs	r3, #0
10003e7c:	9300      	str	r3, [sp, #0]
10003e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
10003e82:	b2d2      	uxtb	r2, r2
10003e84:	4631      	mov	r1, r6
10003e86:	4620      	mov	r0, r4
10003e88:	f7ff fcaa 	bl	100037e0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
10003e8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
10003e8e:	b29b      	uxth	r3, r3
10003e90:	2b00      	cmp	r3, #0
10003e92:	d034      	beq.n	10003efe <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
10003e94:	9700      	str	r7, [sp, #0]
10003e96:	462b      	mov	r3, r5
10003e98:	2200      	movs	r2, #0
10003e9a:	2104      	movs	r1, #4
10003e9c:	4620      	mov	r0, r4
10003e9e:	f7ff fd7e 	bl	1000399e <I2C_WaitOnFlagUntilTimeout>
10003ea2:	2800      	cmp	r0, #0
10003ea4:	d14d      	bne.n	10003f42 <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10003ea6:	6823      	ldr	r3, [r4, #0]
10003ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10003eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
10003eac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
10003eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
10003eb0:	3301      	adds	r3, #1
10003eb2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
10003eb4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
10003eb6:	3a01      	subs	r2, #1
10003eb8:	b292      	uxth	r2, r2
10003eba:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
10003ebc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
10003ebe:	b29b      	uxth	r3, r3
10003ec0:	3b01      	subs	r3, #1
10003ec2:	b29b      	uxth	r3, r3
10003ec4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10003ec6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
10003ec8:	b29b      	uxth	r3, r3
10003eca:	2b00      	cmp	r3, #0
10003ecc:	d0de      	beq.n	10003e8c <HAL_I2C_Mem_Read+0xe8>
10003ece:	2a00      	cmp	r2, #0
10003ed0:	d1dc      	bne.n	10003e8c <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
10003ed2:	9700      	str	r7, [sp, #0]
10003ed4:	462b      	mov	r3, r5
10003ed6:	2180      	movs	r1, #128	; 0x80
10003ed8:	4620      	mov	r0, r4
10003eda:	f7ff fd60 	bl	1000399e <I2C_WaitOnFlagUntilTimeout>
10003ede:	bb90      	cbnz	r0, 10003f46 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
10003ee0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
10003ee2:	b29b      	uxth	r3, r3
10003ee4:	2bff      	cmp	r3, #255	; 0xff
10003ee6:	d9c5      	bls.n	10003e74 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
10003ee8:	22ff      	movs	r2, #255	; 0xff
10003eea:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
10003eec:	2300      	movs	r3, #0
10003eee:	9300      	str	r3, [sp, #0]
10003ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
10003ef4:	4631      	mov	r1, r6
10003ef6:	4620      	mov	r0, r4
10003ef8:	f7ff fc72 	bl	100037e0 <I2C_TransferConfig>
10003efc:	e7c6      	b.n	10003e8c <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
10003efe:	463a      	mov	r2, r7
10003f00:	4629      	mov	r1, r5
10003f02:	4620      	mov	r0, r4
10003f04:	f7ff fdf2 	bl	10003aec <I2C_WaitOnSTOPFlagUntilTimeout>
10003f08:	b9f8      	cbnz	r0, 10003f4a <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10003f0a:	6823      	ldr	r3, [r4, #0]
10003f0c:	2220      	movs	r2, #32
10003f0e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
10003f10:	6821      	ldr	r1, [r4, #0]
10003f12:	684b      	ldr	r3, [r1, #4]
10003f14:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
10003f18:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
10003f1c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
10003f20:	f023 0301 	bic.w	r3, r3, #1
10003f24:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
10003f26:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
10003f2a:	2300      	movs	r3, #0
10003f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
10003f30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
10003f34:	e000      	b.n	10003f38 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
10003f36:	2002      	movs	r0, #2
}
10003f38:	b003      	add	sp, #12
10003f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
10003f3e:	2002      	movs	r0, #2
10003f40:	e7fa      	b.n	10003f38 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
10003f42:	2001      	movs	r0, #1
10003f44:	e7f8      	b.n	10003f38 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
10003f46:	2001      	movs	r0, #1
10003f48:	e7f6      	b.n	10003f38 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
10003f4a:	2001      	movs	r0, #1
10003f4c:	e7f4      	b.n	10003f38 <HAL_I2C_Mem_Read+0x194>
10003f4e:	bf00      	nop
10003f50:	80002400 	.word	0x80002400

10003f54 <HAL_I2C_IsDeviceReady>:
{
10003f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
10003f58:	b085      	sub	sp, #20
10003f5a:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
10003f5c:	2300      	movs	r3, #0
10003f5e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
10003f60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
10003f64:	b2db      	uxtb	r3, r3
10003f66:	2b20      	cmp	r3, #32
10003f68:	f040 809e 	bne.w	100040a8 <HAL_I2C_IsDeviceReady+0x154>
10003f6c:	4606      	mov	r6, r0
10003f6e:	4689      	mov	r9, r1
10003f70:	4690      	mov	r8, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
10003f72:	6803      	ldr	r3, [r0, #0]
10003f74:	699b      	ldr	r3, [r3, #24]
10003f76:	f413 4f00 	tst.w	r3, #32768	; 0x8000
10003f7a:	f040 8097 	bne.w	100040ac <HAL_I2C_IsDeviceReady+0x158>
    __HAL_LOCK(hi2c);
10003f7e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
10003f82:	2b01      	cmp	r3, #1
10003f84:	f000 8094 	beq.w	100040b0 <HAL_I2C_IsDeviceReady+0x15c>
10003f88:	2301      	movs	r3, #1
10003f8a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
10003f8e:	2324      	movs	r3, #36	; 0x24
10003f90:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10003f94:	2300      	movs	r3, #0
10003f96:	6443      	str	r3, [r0, #68]	; 0x44
10003f98:	e044      	b.n	10004024 <HAL_I2C_IsDeviceReady+0xd0>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
10003f9a:	f3c9 0309 	ubfx	r3, r9, #0, #10
10003f9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
10003fa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
10003fa6:	e044      	b.n	10004032 <HAL_I2C_IsDeviceReady+0xde>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
10003fa8:	6833      	ldr	r3, [r6, #0]
10003faa:	699c      	ldr	r4, [r3, #24]
10003fac:	f3c4 1440 	ubfx	r4, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
10003fb0:	699b      	ldr	r3, [r3, #24]
10003fb2:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
10003fb6:	b9c4      	cbnz	r4, 10003fea <HAL_I2C_IsDeviceReady+0x96>
10003fb8:	b9bb      	cbnz	r3, 10003fea <HAL_I2C_IsDeviceReady+0x96>
        if (Timeout != HAL_MAX_DELAY)
10003fba:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
10003fbe:	d0f3      	beq.n	10003fa8 <HAL_I2C_IsDeviceReady+0x54>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
10003fc0:	f7fd fd3a 	bl	10001a38 <HAL_GetTick>
10003fc4:	1bc0      	subs	r0, r0, r7
10003fc6:	42a8      	cmp	r0, r5
10003fc8:	d801      	bhi.n	10003fce <HAL_I2C_IsDeviceReady+0x7a>
10003fca:	2d00      	cmp	r5, #0
10003fcc:	d1ec      	bne.n	10003fa8 <HAL_I2C_IsDeviceReady+0x54>
            hi2c->State = HAL_I2C_STATE_READY;
10003fce:	2320      	movs	r3, #32
10003fd0:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10003fd4:	6c73      	ldr	r3, [r6, #68]	; 0x44
10003fd6:	f043 0320 	orr.w	r3, r3, #32
10003fda:	6473      	str	r3, [r6, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
10003fdc:	2300      	movs	r3, #0
10003fde:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
            return HAL_ERROR;
10003fe2:	2001      	movs	r0, #1
}
10003fe4:	b005      	add	sp, #20
10003fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
10003fea:	6833      	ldr	r3, [r6, #0]
10003fec:	699b      	ldr	r3, [r3, #24]
10003fee:	f013 0f10 	tst.w	r3, #16
10003ff2:	d02b      	beq.n	1000404c <HAL_I2C_IsDeviceReady+0xf8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
10003ff4:	9700      	str	r7, [sp, #0]
10003ff6:	462b      	mov	r3, r5
10003ff8:	2200      	movs	r2, #0
10003ffa:	2120      	movs	r1, #32
10003ffc:	4630      	mov	r0, r6
10003ffe:	f7ff fcce 	bl	1000399e <I2C_WaitOnFlagUntilTimeout>
10004002:	2800      	cmp	r0, #0
10004004:	d158      	bne.n	100040b8 <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10004006:	6833      	ldr	r3, [r6, #0]
10004008:	2210      	movs	r2, #16
1000400a:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1000400c:	6833      	ldr	r3, [r6, #0]
1000400e:	2220      	movs	r2, #32
10004010:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
10004012:	9b03      	ldr	r3, [sp, #12]
10004014:	4543      	cmp	r3, r8
10004016:	d02a      	beq.n	1000406e <HAL_I2C_IsDeviceReady+0x11a>
      I2C_Trials++;
10004018:	9b03      	ldr	r3, [sp, #12]
1000401a:	3301      	adds	r3, #1
1000401c:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
1000401e:	9b03      	ldr	r3, [sp, #12]
10004020:	4543      	cmp	r3, r8
10004022:	d235      	bcs.n	10004090 <HAL_I2C_IsDeviceReady+0x13c>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
10004024:	68f3      	ldr	r3, [r6, #12]
10004026:	2b01      	cmp	r3, #1
10004028:	d0b7      	beq.n	10003f9a <HAL_I2C_IsDeviceReady+0x46>
1000402a:	f3c9 0309 	ubfx	r3, r9, #0, #10
1000402e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
10004032:	6832      	ldr	r2, [r6, #0]
10004034:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
10004036:	f7fd fcff 	bl	10001a38 <HAL_GetTick>
1000403a:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
1000403c:	6833      	ldr	r3, [r6, #0]
1000403e:	699c      	ldr	r4, [r3, #24]
10004040:	f3c4 1440 	ubfx	r4, r4, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
10004044:	699b      	ldr	r3, [r3, #24]
10004046:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
1000404a:	e7b4      	b.n	10003fb6 <HAL_I2C_IsDeviceReady+0x62>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
1000404c:	9700      	str	r7, [sp, #0]
1000404e:	462b      	mov	r3, r5
10004050:	2200      	movs	r2, #0
10004052:	2120      	movs	r1, #32
10004054:	4630      	mov	r0, r6
10004056:	f7ff fca2 	bl	1000399e <I2C_WaitOnFlagUntilTimeout>
1000405a:	bb58      	cbnz	r0, 100040b4 <HAL_I2C_IsDeviceReady+0x160>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1000405c:	6832      	ldr	r2, [r6, #0]
1000405e:	2320      	movs	r3, #32
10004060:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
10004062:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
10004066:	2300      	movs	r3, #0
10004068:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_OK;
1000406c:	e7ba      	b.n	10003fe4 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
1000406e:	6832      	ldr	r2, [r6, #0]
10004070:	6853      	ldr	r3, [r2, #4]
10004072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
10004076:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
10004078:	9700      	str	r7, [sp, #0]
1000407a:	462b      	mov	r3, r5
1000407c:	2200      	movs	r2, #0
1000407e:	2120      	movs	r1, #32
10004080:	4630      	mov	r0, r6
10004082:	f7ff fc8c 	bl	1000399e <I2C_WaitOnFlagUntilTimeout>
10004086:	b9c8      	cbnz	r0, 100040bc <HAL_I2C_IsDeviceReady+0x168>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10004088:	6833      	ldr	r3, [r6, #0]
1000408a:	2220      	movs	r2, #32
1000408c:	61da      	str	r2, [r3, #28]
1000408e:	e7c3      	b.n	10004018 <HAL_I2C_IsDeviceReady+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
10004090:	2320      	movs	r3, #32
10004092:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
10004096:	6c73      	ldr	r3, [r6, #68]	; 0x44
10004098:	f043 0320 	orr.w	r3, r3, #32
1000409c:	6473      	str	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
1000409e:	2300      	movs	r3, #0
100040a0:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
100040a4:	2001      	movs	r0, #1
100040a6:	e79d      	b.n	10003fe4 <HAL_I2C_IsDeviceReady+0x90>
    return HAL_BUSY;
100040a8:	2002      	movs	r0, #2
100040aa:	e79b      	b.n	10003fe4 <HAL_I2C_IsDeviceReady+0x90>
      return HAL_BUSY;
100040ac:	2002      	movs	r0, #2
100040ae:	e799      	b.n	10003fe4 <HAL_I2C_IsDeviceReady+0x90>
    __HAL_LOCK(hi2c);
100040b0:	2002      	movs	r0, #2
100040b2:	e797      	b.n	10003fe4 <HAL_I2C_IsDeviceReady+0x90>
          return HAL_ERROR;
100040b4:	2001      	movs	r0, #1
100040b6:	e795      	b.n	10003fe4 <HAL_I2C_IsDeviceReady+0x90>
          return HAL_ERROR;
100040b8:	2001      	movs	r0, #1
100040ba:	e793      	b.n	10003fe4 <HAL_I2C_IsDeviceReady+0x90>
          return HAL_ERROR;
100040bc:	2001      	movs	r0, #1
100040be:	e791      	b.n	10003fe4 <HAL_I2C_IsDeviceReady+0x90>

100040c0 <HAL_I2C_GetState>:
  return hi2c->State;
100040c0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
100040c4:	4770      	bx	lr

100040c6 <HAL_IPCC_RxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
100040c6:	4770      	bx	lr

100040c8 <HAL_IPCC_TxCallback>:
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
100040c8:	4770      	bx	lr
	...

100040cc <HAL_IPCC_GetChannelStatus>:
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
100040cc:	b95a      	cbnz	r2, 100040e6 <HAL_IPCC_GetChannelStatus+0x1a>
    channel_state = (currentInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100040ce:	4b0a      	ldr	r3, [pc, #40]	; (100040f8 <HAL_IPCC_GetChannelStatus+0x2c>)
100040d0:	69d8      	ldr	r0, [r3, #28]
100040d2:	f001 010f 	and.w	r1, r1, #15
100040d6:	2301      	movs	r3, #1
100040d8:	fa03 f101 	lsl.w	r1, r3, r1
100040dc:	4008      	ands	r0, r1
}
100040de:	3800      	subs	r0, #0
100040e0:	bf18      	it	ne
100040e2:	2001      	movne	r0, #1
100040e4:	4770      	bx	lr
    channel_state = (otherInstance->SR) & (IPCC_SR_CH1F_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100040e6:	4b04      	ldr	r3, [pc, #16]	; (100040f8 <HAL_IPCC_GetChannelStatus+0x2c>)
100040e8:	68d8      	ldr	r0, [r3, #12]
100040ea:	f001 010f 	and.w	r1, r1, #15
100040ee:	2301      	movs	r3, #1
100040f0:	fa03 f101 	lsl.w	r1, r3, r1
100040f4:	4008      	ands	r0, r1
100040f6:	e7f2      	b.n	100040de <HAL_IPCC_GetChannelStatus+0x12>
100040f8:	4c001000 	.word	0x4c001000

100040fc <HAL_IPCC_RX_IRQHandler>:
{
100040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100040fe:	4607      	mov	r7, r0
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
10004100:	4a10      	ldr	r2, [pc, #64]	; (10004144 <HAL_IPCC_RX_IRQHandler+0x48>)
10004102:	6956      	ldr	r6, [r2, #20]
10004104:	43f6      	mvns	r6, r6
10004106:	f006 033f 	and.w	r3, r6, #63	; 0x3f
  irqmask = irqmask & otherInstance->SR;
1000410a:	68d6      	ldr	r6, [r2, #12]
1000410c:	401e      	ands	r6, r3
  uint32_t ch_count = 0U;
1000410e:	2500      	movs	r5, #0
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10004110:	e006      	b.n	10004120 <HAL_IPCC_RX_IRQHandler+0x24>
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
10004112:	2201      	movs	r2, #1
10004114:	4629      	mov	r1, r5
10004116:	4638      	mov	r0, r7
10004118:	4798      	blx	r3
      irqmask = irqmask & ~(bit_pos);
1000411a:	ea26 0604 	bic.w	r6, r6, r4
    ch_count++;
1000411e:	3501      	adds	r5, #1
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
10004120:	b17e      	cbz	r6, 10004142 <HAL_IPCC_RX_IRQHandler+0x46>
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
10004122:	f005 030f 	and.w	r3, r5, #15
10004126:	2401      	movs	r4, #1
10004128:	409c      	lsls	r4, r3
    if ((irqmask & bit_pos) != 0U)
1000412a:	4226      	tst	r6, r4
1000412c:	d0f7      	beq.n	1000411e <HAL_IPCC_RX_IRQHandler+0x22>
      currentInstance->MR |= bit_pos;
1000412e:	4a05      	ldr	r2, [pc, #20]	; (10004144 <HAL_IPCC_RX_IRQHandler+0x48>)
10004130:	6953      	ldr	r3, [r2, #20]
10004132:	4323      	orrs	r3, r4
10004134:	6153      	str	r3, [r2, #20]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
10004136:	eb07 0385 	add.w	r3, r7, r5, lsl #2
1000413a:	685b      	ldr	r3, [r3, #4]
1000413c:	2b00      	cmp	r3, #0
1000413e:	d1e8      	bne.n	10004112 <HAL_IPCC_RX_IRQHandler+0x16>
10004140:	e7eb      	b.n	1000411a <HAL_IPCC_RX_IRQHandler+0x1e>
}
10004142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10004144:	4c001000 	.word	0x4c001000

10004148 <IPCC_UnmaskInterrupt>:
#if defined(CORE_CM4)
  IPCC_CommonTypeDef *currentInstance = IPCC_C2;
#else
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
#endif
  if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10004148:	b959      	cbnz	r1, 10004162 <IPCC_UnmaskInterrupt+0x1a>
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
1000414a:	490b      	ldr	r1, [pc, #44]	; (10004178 <IPCC_UnmaskInterrupt+0x30>)
1000414c:	694b      	ldr	r3, [r1, #20]
1000414e:	f000 000f 	and.w	r0, r0, #15
10004152:	f44f 3280 	mov.w	r2, #65536	; 0x10000
10004156:	fa02 f000 	lsl.w	r0, r2, r0
1000415a:	ea23 0000 	bic.w	r0, r3, r0
1000415e:	6148      	str	r0, [r1, #20]
10004160:	4770      	bx	lr
  }
  else
  {
    /* Unmask interrupt */
    currentInstance->MR &= ~(IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
10004162:	4905      	ldr	r1, [pc, #20]	; (10004178 <IPCC_UnmaskInterrupt+0x30>)
10004164:	694b      	ldr	r3, [r1, #20]
10004166:	f000 000f 	and.w	r0, r0, #15
1000416a:	2201      	movs	r2, #1
1000416c:	fa02 f000 	lsl.w	r0, r2, r0
10004170:	ea23 0000 	bic.w	r0, r3, r0
10004174:	6148      	str	r0, [r1, #20]
  }
}
10004176:	4770      	bx	lr
10004178:	4c001000 	.word	0x4c001000

1000417c <HAL_IPCC_ActivateNotification>:
  if (hipcc != NULL)
1000417c:	b378      	cbz	r0, 100041de <HAL_IPCC_ActivateNotification+0x62>
{
1000417e:	b510      	push	{r4, lr}
10004180:	460c      	mov	r4, r1
10004182:	4686      	mov	lr, r0
    if (hipcc->State == HAL_IPCC_STATE_READY)
10004184:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
10004188:	fa5f fc8c 	uxtb.w	ip, ip
1000418c:	f1bc 0f01 	cmp.w	ip, #1
10004190:	d001      	beq.n	10004196 <HAL_IPCC_ActivateNotification+0x1a>
      err = HAL_ERROR;
10004192:	2001      	movs	r0, #1
}
10004194:	bd10      	pop	{r4, pc}
      if (ChannelDir == IPCC_CHANNEL_DIR_TX)
10004196:	b982      	cbnz	r2, 100041ba <HAL_IPCC_ActivateNotification+0x3e>
        hipcc->ChannelCallbackTx[ChannelIndex] = cb;
10004198:	3106      	adds	r1, #6
1000419a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
1000419e:	604b      	str	r3, [r1, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1FM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100041a0:	f004 010f 	and.w	r1, r4, #15
100041a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
100041a8:	fa03 f101 	lsl.w	r1, r3, r1
100041ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
100041ae:	430b      	orrs	r3, r1
100041b0:	6343      	str	r3, [r0, #52]	; 0x34
      if (ChannelDir == IPCC_CHANNEL_DIR_RX)
100041b2:	2a01      	cmp	r2, #1
100041b4:	d00d      	beq.n	100041d2 <HAL_IPCC_ActivateNotification+0x56>
  HAL_StatusTypeDef err = HAL_OK;
100041b6:	2000      	movs	r0, #0
100041b8:	e7ec      	b.n	10004194 <HAL_IPCC_ActivateNotification+0x18>
        hipcc->ChannelCallbackRx[ChannelIndex] = cb;
100041ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
100041be:	604b      	str	r3, [r1, #4]
        hipcc->callbackRequest |= (IPCC_MR_CH1OM_Msk << (ChannelIndex & CHANNEL_INDEX_Msk));
100041c0:	f004 010f 	and.w	r1, r4, #15
100041c4:	2301      	movs	r3, #1
100041c6:	fa03 f101 	lsl.w	r1, r3, r1
100041ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
100041cc:	430b      	orrs	r3, r1
100041ce:	6343      	str	r3, [r0, #52]	; 0x34
100041d0:	e7ef      	b.n	100041b2 <HAL_IPCC_ActivateNotification+0x36>
        IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
100041d2:	4611      	mov	r1, r2
100041d4:	4620      	mov	r0, r4
100041d6:	f7ff ffb7 	bl	10004148 <IPCC_UnmaskInterrupt>
  HAL_StatusTypeDef err = HAL_OK;
100041da:	2000      	movs	r0, #0
100041dc:	e7da      	b.n	10004194 <HAL_IPCC_ActivateNotification+0x18>
    err = HAL_ERROR;
100041de:	2001      	movs	r0, #1
}
100041e0:	4770      	bx	lr
	...

100041e4 <HAL_IPCC_NotifyCPU>:
  if (hipcc->State == HAL_IPCC_STATE_READY)
100041e4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
100041e8:	b2db      	uxtb	r3, r3
100041ea:	2b01      	cmp	r3, #1
100041ec:	d001      	beq.n	100041f2 <HAL_IPCC_NotifyCPU+0xe>
    err = HAL_ERROR;
100041ee:	2001      	movs	r0, #1
}
100041f0:	4770      	bx	lr
{
100041f2:	b510      	push	{r4, lr}
100041f4:	468c      	mov	ip, r1
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
100041f6:	4b0c      	ldr	r3, [pc, #48]	; (10004228 <HAL_IPCC_NotifyCPU+0x44>)
100041f8:	6999      	ldr	r1, [r3, #24]
100041fa:	b962      	cbnz	r2, 10004216 <HAL_IPCC_NotifyCPU+0x32>
100041fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
10004200:	f00c 040f 	and.w	r4, ip, #15
10004204:	40a3      	lsls	r3, r4
10004206:	4319      	orrs	r1, r3
10004208:	4c07      	ldr	r4, [pc, #28]	; (10004228 <HAL_IPCC_NotifyCPU+0x44>)
1000420a:	61a1      	str	r1, [r4, #24]
    if ((hipcc->callbackRequest & mask) == mask)
1000420c:	6b41      	ldr	r1, [r0, #52]	; 0x34
1000420e:	438b      	bics	r3, r1
10004210:	d003      	beq.n	1000421a <HAL_IPCC_NotifyCPU+0x36>
  HAL_StatusTypeDef err = HAL_OK;
10004212:	2000      	movs	r0, #0
}
10004214:	bd10      	pop	{r4, pc}
    currentInstance->SCR |= ((ChannelDir == IPCC_CHANNEL_DIR_TX) ? IPCC_SCR_CH1S : IPCC_SCR_CH1C) << (ChannelIndex & CHANNEL_INDEX_Msk) ;
10004216:	2301      	movs	r3, #1
10004218:	e7f2      	b.n	10004200 <HAL_IPCC_NotifyCPU+0x1c>
      IPCC_UnmaskInterrupt(ChannelIndex, ChannelDir);
1000421a:	4611      	mov	r1, r2
1000421c:	4660      	mov	r0, ip
1000421e:	f7ff ff93 	bl	10004148 <IPCC_UnmaskInterrupt>
  HAL_StatusTypeDef err = HAL_OK;
10004222:	2000      	movs	r0, #0
10004224:	e7f6      	b.n	10004214 <HAL_IPCC_NotifyCPU+0x30>
10004226:	bf00      	nop
10004228:	4c001000 	.word	0x4c001000

1000422c <IPCC_SetDefaultCallbacks>:
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
1000422c:	2300      	movs	r3, #0
1000422e:	e009      	b.n	10004244 <IPCC_SetDefaultCallbacks+0x18>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
10004230:	eb00 0283 	add.w	r2, r0, r3, lsl #2
10004234:	4905      	ldr	r1, [pc, #20]	; (1000424c <IPCC_SetDefaultCallbacks+0x20>)
10004236:	6051      	str	r1, [r2, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
10004238:	1d9a      	adds	r2, r3, #6
1000423a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
1000423e:	4904      	ldr	r1, [pc, #16]	; (10004250 <IPCC_SetDefaultCallbacks+0x24>)
10004240:	6051      	str	r1, [r2, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
10004242:	3301      	adds	r3, #1
10004244:	2b05      	cmp	r3, #5
10004246:	d9f3      	bls.n	10004230 <IPCC_SetDefaultCallbacks+0x4>
  }
}
10004248:	4770      	bx	lr
1000424a:	bf00      	nop
1000424c:	100040c7 	.word	0x100040c7
10004250:	100040c9 	.word	0x100040c9

10004254 <IPCC_Reset_Register>:
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
10004254:	2300      	movs	r3, #0
10004256:	6003      	str	r3, [r0, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
10004258:	f04f 133f 	mov.w	r3, #4128831	; 0x3f003f
1000425c:	6043      	str	r3, [r0, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
1000425e:	233f      	movs	r3, #63	; 0x3f
10004260:	6083      	str	r3, [r0, #8]
}
10004262:	4770      	bx	lr

10004264 <HAL_IPCC_Init>:
  if (hipcc != NULL)
10004264:	b1c0      	cbz	r0, 10004298 <HAL_IPCC_Init+0x34>
{
10004266:	b510      	push	{r4, lr}
10004268:	4604      	mov	r4, r0
    if (hipcc->State == HAL_IPCC_STATE_RESET)
1000426a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
1000426e:	b183      	cbz	r3, 10004292 <HAL_IPCC_Init+0x2e>
    IPCC_Reset_Register(currentInstance);
10004270:	480a      	ldr	r0, [pc, #40]	; (1000429c <HAL_IPCC_Init+0x38>)
10004272:	f7ff ffef 	bl	10004254 <IPCC_Reset_Register>
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
10004276:	4a0a      	ldr	r2, [pc, #40]	; (100042a0 <HAL_IPCC_Init+0x3c>)
10004278:	6913      	ldr	r3, [r2, #16]
1000427a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
1000427e:	6113      	str	r3, [r2, #16]
    IPCC_SetDefaultCallbacks(hipcc);
10004280:	4620      	mov	r0, r4
10004282:	f7ff ffd3 	bl	1000422c <IPCC_SetDefaultCallbacks>
    hipcc->callbackRequest = 0;
10004286:	2000      	movs	r0, #0
10004288:	6360      	str	r0, [r4, #52]	; 0x34
    hipcc->State = HAL_IPCC_STATE_READY;
1000428a:	2301      	movs	r3, #1
1000428c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
10004290:	bd10      	pop	{r4, pc}
      HAL_IPCC_MspInit(hipcc);
10004292:	f7fc ffc9 	bl	10001228 <HAL_IPCC_MspInit>
10004296:	e7eb      	b.n	10004270 <HAL_IPCC_Init+0xc>
    err = HAL_ERROR;
10004298:	2001      	movs	r0, #1
}
1000429a:	4770      	bx	lr
1000429c:	4c001010 	.word	0x4c001010
100042a0:	4c001000 	.word	0x4c001000

100042a4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
100042a4:	4a02      	ldr	r2, [pc, #8]	; (100042b0 <HAL_PWR_EnableBkUpAccess+0xc>)
100042a6:	6813      	ldr	r3, [r2, #0]
100042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100042ac:	6013      	str	r3, [r2, #0]
}
100042ae:	4770      	bx	lr
100042b0:	50001000 	.word	0x50001000

100042b4 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

#ifdef CORE_CM4
  /* Ensure CM4 do not enter to CSTOP mode */
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
100042b4:	4a06      	ldr	r2, [pc, #24]	; (100042d0 <HAL_PWR_EnterSLEEPMode+0x1c>)
100042b6:	6913      	ldr	r3, [r2, #16]
100042b8:	f023 0304 	bic.w	r3, r3, #4
100042bc:	6113      	str	r3, [r2, #16]
#endif

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
100042be:	2901      	cmp	r1, #1
100042c0:	d003      	beq.n	100042ca <HAL_PWR_EnterSLEEPMode+0x16>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
100042c2:	bf40      	sev
    __WFE();
100042c4:	bf20      	wfe
    __WFE();
100042c6:	bf20      	wfe
  }
}
100042c8:	4770      	bx	lr
    __WFI();
100042ca:	bf30      	wfi
100042cc:	4770      	bx	lr
100042ce:	bf00      	nop
100042d0:	e000ed00 	.word	0xe000ed00

100042d4 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
100042d4:	b538      	push	{r3, r4, r5, lr}
100042d6:	4605      	mov	r5, r0

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
100042d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042dc:	f44f 7280 	mov.w	r2, #256	; 0x100
100042e0:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100042e2:	f7fd fba9 	bl	10001a38 <HAL_GetTick>
100042e6:	4604      	mov	r4, r0

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100042e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042ec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100042f0:	f413 7f80 	tst.w	r3, #256	; 0x100
100042f4:	d006      	beq.n	10004304 <HAL_RCC_HSEConfig+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100042f6:	f7fd fb9f 	bl	10001a38 <HAL_GetTick>
100042fa:	1b00      	subs	r0, r0, r4
100042fc:	2864      	cmp	r0, #100	; 0x64
100042fe:	d9f3      	bls.n	100042e8 <HAL_RCC_HSEConfig+0x14>
    {
      return HAL_TIMEOUT;
10004300:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
10004302:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10004304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004308:	f44f 6290 	mov.w	r2, #1152	; 0x480
1000430c:	611a      	str	r2, [r3, #16]
  if (State != RCC_HSE_OFF)
1000430e:	b37d      	cbz	r5, 10004370 <HAL_RCC_HSEConfig+0x9c>
    if (State == RCC_HSE_BYPASS)
10004310:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
10004314:	d019      	beq.n	1000434a <HAL_RCC_HSEConfig+0x76>
    else if (State == RCC_HSE_BYPASS_DIG)
10004316:	f5b5 6fb0 	cmp.w	r5, #1408	; 0x580
1000431a:	d01c      	beq.n	10004356 <HAL_RCC_HSEConfig+0x82>
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
1000431c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004320:	68d3      	ldr	r3, [r2, #12]
10004322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10004326:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
10004328:	f7fd fb86 	bl	10001a38 <HAL_GetTick>
1000432c:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000432e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004332:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004336:	f413 7f80 	tst.w	r3, #256	; 0x100
1000433a:	d117      	bne.n	1000436c <HAL_RCC_HSEConfig+0x98>
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000433c:	f7fd fb7c 	bl	10001a38 <HAL_GetTick>
10004340:	1b00      	subs	r0, r0, r4
10004342:	2864      	cmp	r0, #100	; 0x64
10004344:	d9f3      	bls.n	1000432e <HAL_RCC_HSEConfig+0x5a>
        return HAL_TIMEOUT;
10004346:	2003      	movs	r0, #3
10004348:	e7db      	b.n	10004302 <HAL_RCC_HSEConfig+0x2e>
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000434a:	461a      	mov	r2, r3
1000434c:	68db      	ldr	r3, [r3, #12]
1000434e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10004352:	60d3      	str	r3, [r2, #12]
10004354:	e7e2      	b.n	1000431c <HAL_RCC_HSEConfig+0x48>
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10004356:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000435a:	68da      	ldr	r2, [r3, #12]
1000435c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
10004360:	60da      	str	r2, [r3, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10004362:	68da      	ldr	r2, [r3, #12]
10004364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
10004368:	60da      	str	r2, [r3, #12]
1000436a:	e7d7      	b.n	1000431c <HAL_RCC_HSEConfig+0x48>
  return HAL_OK;
1000436c:	2000      	movs	r0, #0
1000436e:	e7c8      	b.n	10004302 <HAL_RCC_HSEConfig+0x2e>
10004370:	2000      	movs	r0, #0
10004372:	e7c6      	b.n	10004302 <HAL_RCC_HSEConfig+0x2e>

10004374 <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10004374:	b538      	push	{r3, r4, r5, lr}
10004376:	4605      	mov	r5, r0

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10004378:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000437c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
10004380:	f023 0301 	bic.w	r3, r3, #1
10004384:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10004388:	f7fd fb56 	bl	10001a38 <HAL_GetTick>
1000438c:	4604      	mov	r4, r0

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000438e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004392:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004396:	f013 0f04 	tst.w	r3, #4
1000439a:	d008      	beq.n	100043ae <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000439c:	f7fd fb4c 	bl	10001a38 <HAL_GetTick>
100043a0:	1b00      	subs	r0, r0, r4
100043a2:	f241 3388 	movw	r3, #5000	; 0x1388
100043a6:	4298      	cmp	r0, r3
100043a8:	d9f1      	bls.n	1000438e <HAL_RCC_LSEConfig+0x1a>
    {
      return HAL_TIMEOUT;
100043aa:	2003      	movs	r0, #3
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
}
100043ac:	bd38      	pop	{r3, r4, r5, pc}
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
100043ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043b2:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
100043b6:	f023 030a 	bic.w	r3, r3, #10
100043ba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
  if (State != RCC_LSE_OFF)
100043be:	b3b5      	cbz	r5, 1000442e <HAL_RCC_LSEConfig+0xba>
    if (State == RCC_LSE_BYPASS)
100043c0:	2d03      	cmp	r5, #3
100043c2:	d01c      	beq.n	100043fe <HAL_RCC_LSEConfig+0x8a>
    else if (State == RCC_LSE_BYPASS_DIG)
100043c4:	2d0b      	cmp	r5, #11
100043c6:	d021      	beq.n	1000440c <HAL_RCC_LSEConfig+0x98>
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100043c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043cc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
100043d0:	f043 0301 	orr.w	r3, r3, #1
100043d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    tickstart = HAL_GetTick();
100043d8:	f7fd fb2e 	bl	10001a38 <HAL_GetTick>
100043dc:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100043de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100043e6:	f013 0f04 	tst.w	r3, #4
100043ea:	d11e      	bne.n	1000442a <HAL_RCC_LSEConfig+0xb6>
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100043ec:	f7fd fb24 	bl	10001a38 <HAL_GetTick>
100043f0:	1b00      	subs	r0, r0, r4
100043f2:	f241 3388 	movw	r3, #5000	; 0x1388
100043f6:	4298      	cmp	r0, r3
100043f8:	d9f1      	bls.n	100043de <HAL_RCC_LSEConfig+0x6a>
        return HAL_TIMEOUT;
100043fa:	2003      	movs	r0, #3
100043fc:	e7d6      	b.n	100043ac <HAL_RCC_LSEConfig+0x38>
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100043fe:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
10004402:	f043 0302 	orr.w	r3, r3, #2
10004406:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
1000440a:	e7dd      	b.n	100043c8 <HAL_RCC_LSEConfig+0x54>
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
1000440c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004410:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10004414:	f042 0208 	orr.w	r2, r2, #8
10004418:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
1000441c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10004420:	f042 0202 	orr.w	r2, r2, #2
10004424:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
10004428:	e7ce      	b.n	100043c8 <HAL_RCC_LSEConfig+0x54>
  return HAL_OK;
1000442a:	2000      	movs	r0, #0
1000442c:	e7be      	b.n	100043ac <HAL_RCC_LSEConfig+0x38>
1000442e:	2000      	movs	r0, #0
10004430:	e7bc      	b.n	100043ac <HAL_RCC_LSEConfig+0x38>
	...

10004434 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10004434:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10004436:	6803      	ldr	r3, [r0, #0]
10004438:	2b00      	cmp	r3, #0
1000443a:	f000 811d 	beq.w	10004678 <RCC_PLL1_Config+0x244>
1000443e:	4604      	mov	r4, r0
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10004440:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004444:	6a12      	ldr	r2, [r2, #32]
10004446:	f002 0203 	and.w	r2, r2, #3
1000444a:	2a02      	cmp	r2, #2
1000444c:	d028      	beq.n	100044a0 <RCC_PLL1_Config+0x6c>
1000444e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004452:	6a12      	ldr	r2, [r2, #32]
10004454:	f002 0203 	and.w	r2, r2, #3
10004458:	2a03      	cmp	r2, #3
1000445a:	d028      	beq.n	100044ae <RCC_PLL1_Config+0x7a>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
1000445c:	2b02      	cmp	r3, #2
1000445e:	d02d      	beq.n	100044bc <RCC_PLL1_Config+0x88>
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004460:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004464:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
10004468:	f022 0270 	bic.w	r2, r2, #112	; 0x70
1000446c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
10004470:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
10004474:	f022 0201 	bic.w	r2, r2, #1
10004478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000447c:	f7fd fadc 	bl	10001a38 <HAL_GetTick>
10004480:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10004482:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000448a:	f013 0f02 	tst.w	r3, #2
1000448e:	f000 80f1 	beq.w	10004674 <RCC_PLL1_Config+0x240>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004492:	f7fd fad1 	bl	10001a38 <HAL_GetTick>
10004496:	1b00      	subs	r0, r0, r4
10004498:	2864      	cmp	r0, #100	; 0x64
1000449a:	d9f2      	bls.n	10004482 <RCC_PLL1_Config+0x4e>
          {
            return HAL_TIMEOUT;
1000449c:	2003      	movs	r0, #3
1000449e:	e0ec      	b.n	1000467a <RCC_PLL1_Config+0x246>
    if (!__IS_PLL1_IN_USE()) /* If not used then */
100044a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100044a4:	6a12      	ldr	r2, [r2, #32]
100044a6:	2a00      	cmp	r2, #0
100044a8:	dad1      	bge.n	1000444e <RCC_PLL1_Config+0x1a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100044aa:	2001      	movs	r0, #1
100044ac:	e0e5      	b.n	1000467a <RCC_PLL1_Config+0x246>
    if (!__IS_PLL1_IN_USE()) /* If not used then */
100044ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100044b2:	6a12      	ldr	r2, [r2, #32]
100044b4:	2a00      	cmp	r2, #0
100044b6:	dad1      	bge.n	1000445c <RCC_PLL1_Config+0x28>
      return HAL_ERROR;
100044b8:	2001      	movs	r0, #1
100044ba:	e0de      	b.n	1000467a <RCC_PLL1_Config+0x246>
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100044bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044c0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
100044c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
100044c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        __HAL_RCC_PLL1_DISABLE();
100044cc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
100044d0:	f022 0201 	bic.w	r2, r2, #1
100044d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        tickstart = HAL_GetTick();
100044d8:	f7fd faae 	bl	10001a38 <HAL_GetTick>
100044dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100044de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100044e6:	f013 0f02 	tst.w	r3, #2
100044ea:	d006      	beq.n	100044fa <RCC_PLL1_Config+0xc6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100044ec:	f7fd faa4 	bl	10001a38 <HAL_GetTick>
100044f0:	1b43      	subs	r3, r0, r5
100044f2:	2b64      	cmp	r3, #100	; 0x64
100044f4:	d9f3      	bls.n	100044de <RCC_PLL1_Config+0xaa>
            return HAL_TIMEOUT;
100044f6:	2003      	movs	r0, #3
100044f8:	e0bf      	b.n	1000467a <RCC_PLL1_Config+0x246>
        if (__IS_PLL2_IN_USE())
100044fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004500:	f003 0307 	and.w	r3, r3, #7
10004504:	2b02      	cmp	r3, #2
10004506:	d013      	beq.n	10004530 <RCC_PLL1_Config+0xfc>
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10004508:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000450c:	6a93      	ldr	r3, [r2, #40]	; 0x28
1000450e:	f023 0303 	bic.w	r3, r3, #3
10004512:	6861      	ldr	r1, [r4, #4]
10004514:	430b      	orrs	r3, r1
10004516:	6293      	str	r3, [r2, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10004518:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000451e:	2b00      	cmp	r3, #0
10004520:	db15      	blt.n	1000454e <RCC_PLL1_Config+0x11a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004522:	f7fd fa89 	bl	10001a38 <HAL_GetTick>
10004526:	1b40      	subs	r0, r0, r5
10004528:	2864      	cmp	r0, #100	; 0x64
1000452a:	d9f5      	bls.n	10004518 <RCC_PLL1_Config+0xe4>
            return HAL_TIMEOUT;
1000452c:	2003      	movs	r0, #3
1000452e:	e0a4      	b.n	1000467a <RCC_PLL1_Config+0x246>
        if (__IS_PLL2_IN_USE())
10004530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004536:	2b00      	cmp	r3, #0
10004538:	dae6      	bge.n	10004508 <RCC_PLL1_Config+0xd4>
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000453a:	6862      	ldr	r2, [r4, #4]
1000453c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004542:	f003 0303 	and.w	r3, r3, #3
10004546:	429a      	cmp	r2, r3
10004548:	d0e6      	beq.n	10004518 <RCC_PLL1_Config+0xe4>
            return HAL_ERROR;
1000454a:	2001      	movs	r0, #1
1000454c:	e095      	b.n	1000467a <RCC_PLL1_Config+0x246>
        __HAL_RCC_PLL1_CONFIG(
1000454e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004552:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
10004556:	4b49      	ldr	r3, [pc, #292]	; (1000467c <RCC_PLL1_Config+0x248>)
10004558:	4013      	ands	r3, r2
1000455a:	68e2      	ldr	r2, [r4, #12]
1000455c:	3a01      	subs	r2, #1
1000455e:	68a0      	ldr	r0, [r4, #8]
10004560:	3801      	subs	r0, #1
10004562:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
10004566:	4313      	orrs	r3, r2
10004568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
1000456c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
10004570:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10004574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10004578:	6922      	ldr	r2, [r4, #16]
1000457a:	3a01      	subs	r2, #1
1000457c:	6960      	ldr	r0, [r4, #20]
1000457e:	3801      	subs	r0, #1
10004580:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
10004584:	69a0      	ldr	r0, [r4, #24]
10004586:	3801      	subs	r0, #1
10004588:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
1000458c:	4313      	orrs	r3, r2
1000458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
10004592:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
10004596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000459a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000459e:	6a63      	ldr	r3, [r4, #36]	; 0x24
100045a0:	2b02      	cmp	r3, #2
100045a2:	d000      	beq.n	100045a6 <RCC_PLL1_Config+0x172>
100045a4:	bbab      	cbnz	r3, 10004612 <RCC_PLL1_Config+0x1de>
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
100045a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045aa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
100045ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100045b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100045b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
100045ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045be:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
100045c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100045c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100045ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
100045cc:	2b02      	cmp	r3, #2
100045ce:	d02e      	beq.n	1000462e <RCC_PLL1_Config+0x1fa>
          __HAL_RCC_PLL1_SSMODE_DISABLE();
100045d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045d4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
100045d8:	f023 0304 	bic.w	r3, r3, #4
100045dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        __HAL_RCC_PLL1_ENABLE();
100045e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045e4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
100045e8:	f043 0301 	orr.w	r3, r3, #1
100045ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        tickstart = HAL_GetTick();
100045f0:	f7fd fa22 	bl	10001a38 <HAL_GetTick>
100045f4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100045f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100045fe:	f013 0f02 	tst.w	r3, #2
10004602:	d12d      	bne.n	10004660 <RCC_PLL1_Config+0x22c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10004604:	f7fd fa18 	bl	10001a38 <HAL_GetTick>
10004608:	1b00      	subs	r0, r0, r4
1000460a:	2864      	cmp	r0, #100	; 0x64
1000460c:	d9f3      	bls.n	100045f6 <RCC_PLL1_Config+0x1c2>
            return HAL_TIMEOUT;
1000460e:	2003      	movs	r0, #3
10004610:	e033      	b.n	1000467a <RCC_PLL1_Config+0x246>
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10004612:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004616:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
1000461a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000461e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10004622:	6a21      	ldr	r1, [r4, #32]
10004624:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
10004628:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
1000462c:	e7c5      	b.n	100045ba <RCC_PLL1_Config+0x186>
          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
1000462e:	4611      	mov	r1, r2
10004630:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
10004634:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
10004638:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1000463a:	6b20      	ldr	r0, [r4, #48]	; 0x30
1000463c:	4303      	orrs	r3, r0
1000463e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
10004640:	4303      	orrs	r3, r0
10004642:	6b60      	ldr	r0, [r4, #52]	; 0x34
10004644:	4303      	orrs	r3, r0
10004646:	6ba0      	ldr	r0, [r4, #56]	; 0x38
10004648:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1000464c:	4313      	orrs	r3, r2
1000464e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
          __HAL_RCC_PLL1_SSMODE_ENABLE();
10004652:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
10004656:	f043 0304 	orr.w	r3, r3, #4
1000465a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
1000465e:	e7bf      	b.n	100045e0 <RCC_PLL1_Config+0x1ac>
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10004660:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004664:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
10004668:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000466c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    }
  }
  return HAL_OK;
10004670:	2000      	movs	r0, #0
10004672:	e002      	b.n	1000467a <RCC_PLL1_Config+0x246>
10004674:	2000      	movs	r0, #0
10004676:	e000      	b.n	1000467a <RCC_PLL1_Config+0x246>
10004678:	2000      	movs	r0, #0

}
1000467a:	bd38      	pop	{r3, r4, r5, pc}
1000467c:	ffc0fe00 	.word	0xffc0fe00

10004680 <RCC_MPUConfig>:
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10004680:	6803      	ldr	r3, [r0, #0]
10004682:	2b03      	cmp	r3, #3
10004684:	d848      	bhi.n	10004718 <RCC_MPUConfig+0x98>
10004686:	e8df f003 	tbb	[pc, r3]
1000468a:	0b02      	.short	0x0b02
1000468c:	1d14      	.short	0x1d14
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000468e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004692:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004696:	f013 0f01 	tst.w	r3, #1
1000469a:	d122      	bne.n	100046e2 <RCC_MPUConfig+0x62>
      {
        return HAL_ERROR;
1000469c:	2001      	movs	r0, #1
1000469e:	4770      	bx	lr
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100046a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046a4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100046a8:	f413 7f80 	tst.w	r3, #256	; 0x100
100046ac:	d119      	bne.n	100046e2 <RCC_MPUConfig+0x62>
      {
        return HAL_ERROR;
100046ae:	2001      	movs	r0, #1
100046b0:	4770      	bx	lr
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100046b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100046ba:	f013 0f02 	tst.w	r3, #2
100046be:	d110      	bne.n	100046e2 <RCC_MPUConfig+0x62>
      {
        return HAL_ERROR;
100046c0:	2001      	movs	r0, #1
100046c2:	4770      	bx	lr
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100046c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100046cc:	f013 0f02 	tst.w	r3, #2
100046d0:	d024      	beq.n	1000471c <RCC_MPUConfig+0x9c>
      {
        return HAL_ERROR;
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
100046d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100046d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
100046d8:	f023 0307 	bic.w	r3, r3, #7
100046dc:	6841      	ldr	r1, [r0, #4]
100046de:	430b      	orrs	r3, r1
100046e0:	62d3      	str	r3, [r2, #44]	; 0x2c
{
100046e2:	b510      	push	{r4, lr}
      return HAL_ERROR;
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100046e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100046e8:	6a13      	ldr	r3, [r2, #32]
100046ea:	f023 0303 	bic.w	r3, r3, #3
100046ee:	6801      	ldr	r1, [r0, #0]
100046f0:	430b      	orrs	r3, r1
100046f2:	6213      	str	r3, [r2, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100046f4:	f7fd f9a0 	bl	10001a38 <HAL_GetTick>
100046f8:	4604      	mov	r4, r0

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100046fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100046fe:	6a1b      	ldr	r3, [r3, #32]
10004700:	2b00      	cmp	r3, #0
10004702:	db07      	blt.n	10004714 <RCC_MPUConfig+0x94>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004704:	f7fd f998 	bl	10001a38 <HAL_GetTick>
10004708:	1b00      	subs	r0, r0, r4
1000470a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
1000470e:	d9f4      	bls.n	100046fa <RCC_MPUConfig+0x7a>
    {
      return HAL_TIMEOUT;
10004710:	2003      	movs	r0, #3
10004712:	e000      	b.n	10004716 <RCC_MPUConfig+0x96>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10004714:	2000      	movs	r0, #0
}
10004716:	bd10      	pop	{r4, pc}
  switch (RCC_MPUInitStruct->MPU_Clock)
10004718:	2001      	movs	r0, #1
1000471a:	4770      	bx	lr
        return HAL_ERROR;
1000471c:	2001      	movs	r0, #1
}
1000471e:	4770      	bx	lr

10004720 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10004720:	b538      	push	{r3, r4, r5, lr}
10004722:	4604      	mov	r4, r0

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10004724:	6803      	ldr	r3, [r0, #0]
10004726:	2b01      	cmp	r3, #1
10004728:	d025      	beq.n	10004776 <RCC_AXISSConfig+0x56>
1000472a:	2b02      	cmp	r3, #2
1000472c:	d02c      	beq.n	10004788 <RCC_AXISSConfig+0x68>
1000472e:	b1cb      	cbz	r3, 10004764 <RCC_AXISSConfig+0x44>
      break;

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10004730:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004734:	6a4a      	ldr	r2, [r1, #36]	; 0x24
10004736:	f022 0207 	bic.w	r2, r2, #7
1000473a:	4313      	orrs	r3, r2
1000473c:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
1000473e:	6823      	ldr	r3, [r4, #0]
10004740:	2b03      	cmp	r3, #3
10004742:	d02a      	beq.n	1000479a <RCC_AXISSConfig+0x7a>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10004744:	f7fd f978 	bl	10001a38 <HAL_GetTick>
10004748:	4605      	mov	r5, r0

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000474a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004750:	2b00      	cmp	r3, #0
10004752:	db32      	blt.n	100047ba <RCC_AXISSConfig+0x9a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004754:	f7fd f970 	bl	10001a38 <HAL_GetTick>
10004758:	1b43      	subs	r3, r0, r5
1000475a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000475e:	d9f4      	bls.n	1000474a <RCC_AXISSConfig+0x2a>
      {
        return HAL_TIMEOUT;
10004760:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
10004762:	bd38      	pop	{r3, r4, r5, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10004764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004768:	f8d2 2808 	ldr.w	r2, [r2, #2056]	; 0x808
1000476c:	f012 0f01 	tst.w	r2, #1
10004770:	d1de      	bne.n	10004730 <RCC_AXISSConfig+0x10>
        return HAL_ERROR;
10004772:	2001      	movs	r0, #1
10004774:	e7f5      	b.n	10004762 <RCC_AXISSConfig+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10004776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000477a:	f8d2 2808 	ldr.w	r2, [r2, #2056]	; 0x808
1000477e:	f412 7f80 	tst.w	r2, #256	; 0x100
10004782:	d1d5      	bne.n	10004730 <RCC_AXISSConfig+0x10>
        return HAL_ERROR;
10004784:	2001      	movs	r0, #1
10004786:	e7ec      	b.n	10004762 <RCC_AXISSConfig+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10004788:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000478c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
10004790:	f012 0f02 	tst.w	r2, #2
10004794:	d1cc      	bne.n	10004730 <RCC_AXISSConfig+0x10>
        return HAL_ERROR;
10004796:	2001      	movs	r0, #1
10004798:	e7e3      	b.n	10004762 <RCC_AXISSConfig+0x42>
    tickstart = HAL_GetTick();
1000479a:	f7fd f94d 	bl	10001a38 <HAL_GetTick>
1000479e:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100047a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100047a6:	2b00      	cmp	r3, #0
100047a8:	da07      	bge.n	100047ba <RCC_AXISSConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100047aa:	f7fd f945 	bl	10001a38 <HAL_GetTick>
100047ae:	1b43      	subs	r3, r0, r5
100047b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100047b4:	d9f4      	bls.n	100047a0 <RCC_AXISSConfig+0x80>
        return HAL_TIMEOUT;
100047b6:	2003      	movs	r0, #3
100047b8:	e7d3      	b.n	10004762 <RCC_AXISSConfig+0x42>
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
100047ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100047be:	6b13      	ldr	r3, [r2, #48]	; 0x30
100047c0:	f023 0307 	bic.w	r3, r3, #7
100047c4:	6861      	ldr	r1, [r4, #4]
100047c6:	430b      	orrs	r3, r1
100047c8:	6313      	str	r3, [r2, #48]	; 0x30
  tickstart = HAL_GetTick();
100047ca:	f7fd f935 	bl	10001a38 <HAL_GetTick>
100047ce:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100047d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100047d6:	2b00      	cmp	r3, #0
100047d8:	db07      	blt.n	100047ea <RCC_AXISSConfig+0xca>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100047da:	f7fd f92d 	bl	10001a38 <HAL_GetTick>
100047de:	1b00      	subs	r0, r0, r4
100047e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
100047e4:	d9f4      	bls.n	100047d0 <RCC_AXISSConfig+0xb0>
      return HAL_TIMEOUT;
100047e6:	2003      	movs	r0, #3
100047e8:	e7bb      	b.n	10004762 <RCC_AXISSConfig+0x42>
  return HAL_OK;
100047ea:	2000      	movs	r0, #0
100047ec:	e7b9      	b.n	10004762 <RCC_AXISSConfig+0x42>
	...

100047f0 <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
100047f0:	b500      	push	{lr}
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
  float fracn1, pll2vco = 0;

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
100047f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100047f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
100047f8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
100047fc:	f3c3 4305 	ubfx	r3, r3, #16, #6
10004800:	f103 0e01 	add.w	lr, r3, #1
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
10004804:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
10004808:	f3c3 4c00 	ubfx	ip, r3, #16, #1
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
1000480c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
10004810:	f3c3 03cc 	ubfx	r3, r3, #3, #13
10004814:	fb0c f303 	mul.w	r3, ip, r3
10004818:	ee07 3a10 	vmov	s14, r3
1000481c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
10004820:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
10004824:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004828:	3301      	adds	r3, #1
1000482a:	ee07 3a90 	vmov	s15, r3
1000482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004832:	eddf 6a34 	vldr	s13, [pc, #208]	; 10004904 <HAL_RCC_GetPLL2ClockFreq+0x114>
10004836:	ee27 7a26 	vmul.f32	s14, s14, s13
1000483a:	ee77 7a87 	vadd.f32	s15, s15, s14
  switch (pllsource)
1000483e:	f011 0103 	ands.w	r1, r1, #3
10004842:	d034      	beq.n	100048ae <HAL_RCC_GetPLL2ClockFreq+0xbe>
10004844:	2901      	cmp	r1, #1
10004846:	d053      	beq.n	100048f0 <HAL_RCC_GetPLL2ClockFreq+0x100>
10004848:	eddf 7a2f 	vldr	s15, [pc, #188]	; 10004908 <HAL_RCC_GetPLL2ClockFreq+0x118>
    default:
      pll2vco = 0;
      break;
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
1000484c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004850:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
10004854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004858:	3301      	adds	r3, #1
1000485a:	ee07 3a10 	vmov	s14, r3
1000485e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004862:	eec7 6a87 	vdiv.f32	s13, s15, s14
10004866:	eefc 6ae6 	vcvt.u32.f32	s13, s13
1000486a:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
1000486e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
10004872:	f3c3 2306 	ubfx	r3, r3, #8, #7
10004876:	3301      	adds	r3, #1
10004878:	ee07 3a10 	vmov	s14, r3
1000487c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004880:	eec7 6a87 	vdiv.f32	s13, s15, s14
10004884:	eefc 6ae6 	vcvt.u32.f32	s13, s13
10004888:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
1000488c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
10004890:	f3c3 4306 	ubfx	r3, r3, #16, #7
10004894:	3301      	adds	r3, #1
10004896:	ee07 3a10 	vmov	s14, r3
1000489a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1000489e:	eec7 6a87 	vdiv.f32	s13, s15, s14
100048a2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
100048a6:	edc0 6a02 	vstr	s13, [r0, #8]
}
100048aa:	f85d fb04 	ldr.w	pc, [sp], #4
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100048ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048b2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100048b6:	f013 0f04 	tst.w	r3, #4
100048ba:	d00f      	beq.n	100048dc <HAL_RCC_GetPLL2ClockFreq+0xec>
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100048bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048c0:	699a      	ldr	r2, [r3, #24]
100048c2:	f002 0203 	and.w	r2, r2, #3
100048c6:	4b11      	ldr	r3, [pc, #68]	; (1000490c <HAL_RCC_GetPLL2ClockFreq+0x11c>)
100048c8:	40d3      	lsrs	r3, r2
        pll2vco *= (float)(hsivalue / pll2m);
100048ca:	fbb3 f3fe 	udiv	r3, r3, lr
100048ce:	ee07 3a10 	vmov	s14, r3
100048d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
100048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
100048da:	e7b7      	b.n	1000484c <HAL_RCC_GetPLL2ClockFreq+0x5c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
100048dc:	4b0b      	ldr	r3, [pc, #44]	; (1000490c <HAL_RCC_GetPLL2ClockFreq+0x11c>)
100048de:	fbb3 f3fe 	udiv	r3, r3, lr
100048e2:	ee07 3a10 	vmov	s14, r3
100048e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
100048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
100048ee:	e7ad      	b.n	1000484c <HAL_RCC_GetPLL2ClockFreq+0x5c>
      pll2vco *= (float)(HSE_VALUE / pll2m);
100048f0:	4b07      	ldr	r3, [pc, #28]	; (10004910 <HAL_RCC_GetPLL2ClockFreq+0x120>)
100048f2:	fbb3 f3fe 	udiv	r3, r3, lr
100048f6:	ee07 3a10 	vmov	s14, r3
100048fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
100048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
      break;
10004902:	e7a3      	b.n	1000484c <HAL_RCC_GetPLL2ClockFreq+0x5c>
10004904:	39000000 	.word	0x39000000
10004908:	00000000 	.word	0x00000000
1000490c:	03d09000 	.word	0x03d09000
10004910:	016e3600 	.word	0x016e3600

10004914 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10004914:	b500      	push	{lr}
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
  float fracn1, pll3vco = 0;

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10004916:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000491a:	f8d2 1820 	ldr.w	r1, [r2, #2080]	; 0x820
1000491e:	f001 0103 	and.w	r1, r1, #3
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10004922:	f8d2 3884 	ldr.w	r3, [r2, #2180]	; 0x884
10004926:	f3c3 4305 	ubfx	r3, r3, #16, #6
1000492a:	f103 0e01 	add.w	lr, r3, #1
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
1000492e:	f8d2 388c 	ldr.w	r3, [r2, #2188]	; 0x88c
10004932:	f3c3 4c00 	ubfx	ip, r3, #16, #1
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10004936:	f8d2 388c 	ldr.w	r3, [r2, #2188]	; 0x88c
1000493a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
1000493e:	fb0c f303 	mul.w	r3, ip, r3
10004942:	ee07 3a10 	vmov	s14, r3
10004946:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
1000494a:	f8d2 3884 	ldr.w	r3, [r2, #2180]	; 0x884
1000494e:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004952:	3301      	adds	r3, #1
10004954:	ee07 3a90 	vmov	s15, r3
10004958:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000495c:	eddf 6a39 	vldr	s13, [pc, #228]	; 10004a44 <HAL_RCC_GetPLL3ClockFreq+0x130>
10004960:	ee27 7a26 	vmul.f32	s14, s14, s13
10004964:	ee77 7a87 	vadd.f32	s15, s15, s14
  switch (pllsource)
10004968:	2903      	cmp	r1, #3
1000496a:	d83a      	bhi.n	100049e2 <HAL_RCC_GetPLL3ClockFreq+0xce>
1000496c:	e8df f001 	tbb	[pc, r1]
10004970:	372d2302 	.word	0x372d2302
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004974:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004978:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000497c:	f013 0f04 	tst.w	r3, #4
10004980:	d00f      	beq.n	100049a2 <HAL_RCC_GetPLL3ClockFreq+0x8e>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004982:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004986:	699a      	ldr	r2, [r3, #24]
10004988:	f002 0203 	and.w	r2, r2, #3
1000498c:	4b2e      	ldr	r3, [pc, #184]	; (10004a48 <HAL_RCC_GetPLL3ClockFreq+0x134>)
1000498e:	40d3      	lsrs	r3, r2
        pll3vco *= (float)(hsivalue / pll3m);
10004990:	fbb3 f3fe 	udiv	r3, r3, lr
10004994:	ee07 3a10 	vmov	s14, r3
10004998:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1000499c:	ee67 7a87 	vmul.f32	s15, s15, s14
100049a0:	e01f      	b.n	100049e2 <HAL_RCC_GetPLL3ClockFreq+0xce>
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
100049a2:	4b29      	ldr	r3, [pc, #164]	; (10004a48 <HAL_RCC_GetPLL3ClockFreq+0x134>)
100049a4:	fbb3 f3fe 	udiv	r3, r3, lr
100049a8:	ee07 3a10 	vmov	s14, r3
100049ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
100049b0:	ee67 7a87 	vmul.f32	s15, s15, s14
100049b4:	e015      	b.n	100049e2 <HAL_RCC_GetPLL3ClockFreq+0xce>
      }
      break;

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
100049b6:	4b25      	ldr	r3, [pc, #148]	; (10004a4c <HAL_RCC_GetPLL3ClockFreq+0x138>)
100049b8:	fbb3 f3fe 	udiv	r3, r3, lr
100049bc:	ee07 3a10 	vmov	s14, r3
100049c0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
100049c4:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
100049c8:	e00b      	b.n	100049e2 <HAL_RCC_GetPLL3ClockFreq+0xce>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
100049ca:	4b21      	ldr	r3, [pc, #132]	; (10004a50 <HAL_RCC_GetPLL3ClockFreq+0x13c>)
100049cc:	fbb3 f3fe 	udiv	r3, r3, lr
100049d0:	ee07 3a10 	vmov	s14, r3
100049d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
100049d8:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
100049dc:	e001      	b.n	100049e2 <HAL_RCC_GetPLL3ClockFreq+0xce>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
100049de:	eddf 7a1d 	vldr	s15, [pc, #116]	; 10004a54 <HAL_RCC_GetPLL3ClockFreq+0x140>
      break;
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
100049e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049e6:	f8d2 3888 	ldr.w	r3, [r2, #2184]	; 0x888
100049ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100049ee:	3301      	adds	r3, #1
100049f0:	ee07 3a10 	vmov	s14, r3
100049f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
100049f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
100049fc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
10004a00:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10004a04:	f8d2 3888 	ldr.w	r3, [r2, #2184]	; 0x888
10004a08:	f3c3 2306 	ubfx	r3, r3, #8, #7
10004a0c:	3301      	adds	r3, #1
10004a0e:	ee07 3a10 	vmov	s14, r3
10004a12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004a16:	eec7 6a87 	vdiv.f32	s13, s15, s14
10004a1a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
10004a1e:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10004a22:	f8d2 3888 	ldr.w	r3, [r2, #2184]	; 0x888
10004a26:	f3c3 4306 	ubfx	r3, r3, #16, #7
10004a2a:	3301      	adds	r3, #1
10004a2c:	ee07 3a10 	vmov	s14, r3
10004a30:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004a34:	eec7 6a87 	vdiv.f32	s13, s15, s14
10004a38:	eefc 6ae6 	vcvt.u32.f32	s13, s13
10004a3c:	edc0 6a02 	vstr	s13, [r0, #8]
}
10004a40:	f85d fb04 	ldr.w	pc, [sp], #4
10004a44:	39000000 	.word	0x39000000
10004a48:	03d09000 	.word	0x03d09000
10004a4c:	016e3600 	.word	0x016e3600
10004a50:	003d0900 	.word	0x003d0900
10004a54:	00000000 	.word	0x00000000

10004a58 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
10004a58:	b500      	push	{lr}
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
  float fracn1, pll4vco = 0;

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
10004a5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004a5e:	f8d2 1824 	ldr.w	r1, [r2, #2084]	; 0x824
10004a62:	f001 0103 	and.w	r1, r1, #3
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10004a66:	f8d2 3898 	ldr.w	r3, [r2, #2200]	; 0x898
10004a6a:	f3c3 4305 	ubfx	r3, r3, #16, #6
10004a6e:	f103 0e01 	add.w	lr, r3, #1
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
10004a72:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	; 0x8a0
10004a76:	f3c3 4c00 	ubfx	ip, r3, #16, #1
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
10004a7a:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	; 0x8a0
10004a7e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
10004a82:	fb0c f303 	mul.w	r3, ip, r3
10004a86:	ee07 3a10 	vmov	s14, r3
10004a8a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10004a8e:	f8d2 3898 	ldr.w	r3, [r2, #2200]	; 0x898
10004a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
10004a96:	3301      	adds	r3, #1
10004a98:	ee07 3a90 	vmov	s15, r3
10004a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10004aa0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 10004b98 <HAL_RCC_GetPLL4ClockFreq+0x140>
10004aa4:	ee27 7a26 	vmul.f32	s14, s14, s13
10004aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
  switch (pllsource)
10004aac:	2903      	cmp	r1, #3
10004aae:	d82d      	bhi.n	10004b0c <HAL_RCC_GetPLL4ClockFreq+0xb4>
10004ab0:	e8df f001 	tbb	[pc, r1]
10004ab4:	675d2302 	.word	0x675d2302
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004ab8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004abc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004ac0:	f013 0f04 	tst.w	r3, #4
10004ac4:	d00f      	beq.n	10004ae6 <HAL_RCC_GetPLL4ClockFreq+0x8e>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004ac6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004aca:	699a      	ldr	r2, [r3, #24]
10004acc:	f002 0203 	and.w	r2, r2, #3
10004ad0:	4b32      	ldr	r3, [pc, #200]	; (10004b9c <HAL_RCC_GetPLL4ClockFreq+0x144>)
10004ad2:	40d3      	lsrs	r3, r2
        pll4vco *= (float)(hsivalue / pll4m);
10004ad4:	fbb3 f3fe 	udiv	r3, r3, lr
10004ad8:	ee07 3a10 	vmov	s14, r3
10004adc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004ae0:	ee67 7a87 	vmul.f32	s15, s15, s14
10004ae4:	e012      	b.n	10004b0c <HAL_RCC_GetPLL4ClockFreq+0xb4>
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
10004ae6:	4b2d      	ldr	r3, [pc, #180]	; (10004b9c <HAL_RCC_GetPLL4ClockFreq+0x144>)
10004ae8:	fbb3 f3fe 	udiv	r3, r3, lr
10004aec:	ee07 3a10 	vmov	s14, r3
10004af0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004af4:	ee67 7a87 	vmul.f32	s15, s15, s14
10004af8:	e008      	b.n	10004b0c <HAL_RCC_GetPLL4ClockFreq+0xb4>
      }
      break;

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
10004afa:	4b29      	ldr	r3, [pc, #164]	; (10004ba0 <HAL_RCC_GetPLL4ClockFreq+0x148>)
10004afc:	fbb3 f3fe 	udiv	r3, r3, lr
10004b00:	ee07 3a10 	vmov	s14, r3
10004b04:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004b08:	ee67 7a87 	vmul.f32	s15, s15, s14
    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
      break;
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
10004b0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b10:	f8d2 389c 	ldr.w	r3, [r2, #2204]	; 0x89c
10004b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10004b18:	3301      	adds	r3, #1
10004b1a:	ee07 3a10 	vmov	s14, r3
10004b1e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004b22:	eec7 6a87 	vdiv.f32	s13, s15, s14
10004b26:	eefc 6ae6 	vcvt.u32.f32	s13, s13
10004b2a:	edc0 6a00 	vstr	s13, [r0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
10004b2e:	f8d2 389c 	ldr.w	r3, [r2, #2204]	; 0x89c
10004b32:	f3c3 2306 	ubfx	r3, r3, #8, #7
10004b36:	3301      	adds	r3, #1
10004b38:	ee07 3a10 	vmov	s14, r3
10004b3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004b40:	eec7 6a87 	vdiv.f32	s13, s15, s14
10004b44:	eefc 6ae6 	vcvt.u32.f32	s13, s13
10004b48:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
10004b4c:	f8d2 389c 	ldr.w	r3, [r2, #2204]	; 0x89c
10004b50:	f3c3 4306 	ubfx	r3, r3, #16, #7
10004b54:	3301      	adds	r3, #1
10004b56:	ee07 3a10 	vmov	s14, r3
10004b5a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004b5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
10004b62:	eefc 6ae6 	vcvt.u32.f32	s13, s13
10004b66:	edc0 6a02 	vstr	s13, [r0, #8]
}
10004b6a:	f85d fb04 	ldr.w	pc, [sp], #4
      pll4vco *= (float)(CSI_VALUE / pll4m);
10004b6e:	4b0d      	ldr	r3, [pc, #52]	; (10004ba4 <HAL_RCC_GetPLL4ClockFreq+0x14c>)
10004b70:	fbb3 f3fe 	udiv	r3, r3, lr
10004b74:	ee07 3a10 	vmov	s14, r3
10004b78:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
10004b80:	e7c4      	b.n	10004b0c <HAL_RCC_GetPLL4ClockFreq+0xb4>
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
10004b82:	4b09      	ldr	r3, [pc, #36]	; (10004ba8 <HAL_RCC_GetPLL4ClockFreq+0x150>)
10004b84:	fbb3 f3fe 	udiv	r3, r3, lr
10004b88:	ee07 3a10 	vmov	s14, r3
10004b8c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
10004b90:	ee67 7a87 	vmul.f32	s15, s15, s14
      break;
10004b94:	e7ba      	b.n	10004b0c <HAL_RCC_GetPLL4ClockFreq+0xb4>
10004b96:	bf00      	nop
10004b98:	39000000 	.word	0x39000000
10004b9c:	03d09000 	.word	0x03d09000
10004ba0:	016e3600 	.word	0x016e3600
10004ba4:	003d0900 	.word	0x003d0900
10004ba8:	00bb8000 	.word	0x00bb8000

10004bac <RCC_GetCKPERFreq>:
  */
uint32_t RCC_GetCKPERFreq(void)
{
  uint32_t ckperclocksource = 0, frequency = 0;

  ckperclocksource = __HAL_RCC_GET_CKPER_SOURCE();
10004bac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004bb0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0

  if (ckperclocksource == RCC_CKPERCLKSOURCE_HSI)
10004bb4:	f013 0303 	ands.w	r3, r3, #3
10004bb8:	d007      	beq.n	10004bca <RCC_GetCKPERFreq+0x1e>
  {
    /* In Case the main PLL Source is HSI */
    frequency = HSI_VALUE;
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_CSI)
10004bba:	2b01      	cmp	r3, #1
10004bbc:	d007      	beq.n	10004bce <RCC_GetCKPERFreq+0x22>
  {
    /* In Case the main PLL Source is CSI */
    frequency = CSI_VALUE;
  }

  else if (ckperclocksource == RCC_CKPERCLKSOURCE_HSE)
10004bbe:	2b02      	cmp	r3, #2
10004bc0:	d001      	beq.n	10004bc6 <RCC_GetCKPERFreq+0x1a>
    /* In Case the main PLL Source is HSE */
    frequency = HSE_VALUE;
  }
  else
  {
    frequency = 0;
10004bc2:	2000      	movs	r0, #0
  }

  return frequency;
}
10004bc4:	4770      	bx	lr
    frequency = HSE_VALUE;
10004bc6:	4803      	ldr	r0, [pc, #12]	; (10004bd4 <RCC_GetCKPERFreq+0x28>)
10004bc8:	4770      	bx	lr
    frequency = HSI_VALUE;
10004bca:	4803      	ldr	r0, [pc, #12]	; (10004bd8 <RCC_GetCKPERFreq+0x2c>)
10004bcc:	4770      	bx	lr
    frequency = CSI_VALUE;
10004bce:	4803      	ldr	r0, [pc, #12]	; (10004bdc <RCC_GetCKPERFreq+0x30>)
10004bd0:	4770      	bx	lr
10004bd2:	bf00      	nop
10004bd4:	016e3600 	.word	0x016e3600
10004bd8:	03d09000 	.word	0x03d09000
10004bdc:	003d0900 	.word	0x003d0900

10004be0 <HAL_RCC_GetAXISSFreq>:
uint32_t HAL_RCC_GetAXISSFreq()
{
  uint32_t axissfreq = 0;
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
10004be0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004be6:	f003 0307 	and.w	r3, r3, #7
10004bea:	2b01      	cmp	r3, #1
10004bec:	d01c      	beq.n	10004c28 <HAL_RCC_GetAXISSFreq+0x48>
10004bee:	2b02      	cmp	r3, #2
10004bf0:	d002      	beq.n	10004bf8 <HAL_RCC_GetAXISSFreq+0x18>
10004bf2:	b153      	cbz	r3, 10004c0a <HAL_RCC_GetAXISSFreq+0x2a>
      axissfreq = HSE_VALUE;
      break;

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
10004bf4:	2000      	movs	r0, #0
10004bf6:	4770      	bx	lr
{
10004bf8:	b500      	push	{lr}
10004bfa:	b085      	sub	sp, #20
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10004bfc:	a801      	add	r0, sp, #4
10004bfe:	f7ff fdf7 	bl	100047f0 <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
10004c02:	9801      	ldr	r0, [sp, #4]
      break;
  }

  return axissfreq;
}
10004c04:	b005      	add	sp, #20
10004c06:	f85d fb04 	ldr.w	pc, [sp], #4
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10004c0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c0e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004c12:	f013 0f04 	tst.w	r3, #4
10004c16:	d009      	beq.n	10004c2c <HAL_RCC_GetAXISSFreq+0x4c>
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004c18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c1c:	699b      	ldr	r3, [r3, #24]
10004c1e:	f003 0303 	and.w	r3, r3, #3
10004c22:	4803      	ldr	r0, [pc, #12]	; (10004c30 <HAL_RCC_GetAXISSFreq+0x50>)
10004c24:	40d8      	lsrs	r0, r3
10004c26:	4770      	bx	lr
  switch (__HAL_RCC_GET_AXIS_SOURCE())
10004c28:	4802      	ldr	r0, [pc, #8]	; (10004c34 <HAL_RCC_GetAXISSFreq+0x54>)
10004c2a:	4770      	bx	lr
        axissfreq = HSI_VALUE;
10004c2c:	4800      	ldr	r0, [pc, #0]	; (10004c30 <HAL_RCC_GetAXISSFreq+0x50>)
}
10004c2e:	4770      	bx	lr
10004c30:	03d09000 	.word	0x03d09000
10004c34:	016e3600 	.word	0x016e3600

10004c38 <HAL_RCC_GetACLKFreq>:
{
10004c38:	b510      	push	{r4, lr}
  axidiv = __HAL_RCC_GET_AXI_DIV();
10004c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10004c40:	f003 0007 	and.w	r0, r3, #7
  if (axidiv > RCC_AXI_DIV4)
10004c44:	f013 0f04 	tst.w	r3, #4
10004c48:	d000      	beq.n	10004c4c <HAL_RCC_GetACLKFreq+0x14>
    axidiv = RCC_AXI_DIV4;
10004c4a:	2003      	movs	r0, #3
  axidiv += 1;
10004c4c:	1c44      	adds	r4, r0, #1
  return HAL_RCC_GetAXISSFreq() / axidiv;
10004c4e:	f7ff ffc7 	bl	10004be0 <HAL_RCC_GetAXISSFreq>
}
10004c52:	fbb0 f0f4 	udiv	r0, r0, r4
10004c56:	bd10      	pop	{r4, pc}

10004c58 <HAL_RCC_GetPCLK5Freq>:
{
10004c58:	b510      	push	{r4, lr}
  apb5div = __HAL_RCC_GET_APB5_DIV();
10004c5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c5e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
10004c60:	f004 0407 	and.w	r4, r4, #7
  if (apb5div > RCC_APB5_DIV16)
10004c64:	2c04      	cmp	r4, #4
10004c66:	d900      	bls.n	10004c6a <HAL_RCC_GetPCLK5Freq+0x12>
    apb5div = RCC_APB5_DIV16;
10004c68:	2404      	movs	r4, #4
  return (HAL_RCC_GetACLKFreq() >> apb5div);
10004c6a:	f7ff ffe5 	bl	10004c38 <HAL_RCC_GetACLKFreq>
}
10004c6e:	40e0      	lsrs	r0, r4
10004c70:	bd10      	pop	{r4, pc}

10004c72 <HAL_RCC_GetHCLK6Freq>:
{
10004c72:	b508      	push	{r3, lr}
  return HAL_RCC_GetACLKFreq();
10004c74:	f7ff ffe0 	bl	10004c38 <HAL_RCC_GetACLKFreq>
}
10004c78:	bd08      	pop	{r3, pc}
	...

10004c7c <HAL_RCC_GetMCUSSFreq>:
uint32_t HAL_RCC_GetMCUSSFreq()
{
  uint32_t mcussfreq = 0;
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10004c7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004c82:	f003 0303 	and.w	r3, r3, #3
10004c86:	2b03      	cmp	r3, #3
10004c88:	d803      	bhi.n	10004c92 <HAL_RCC_GetMCUSSFreq+0x16>
10004c8a:	e8df f003 	tbb	[pc, r3]
10004c8e:	170d      	.short	0x170d
10004c90:	0415      	.short	0x0415
10004c92:	2000      	movs	r0, #0
10004c94:	4770      	bx	lr
{
10004c96:	b500      	push	{lr}
10004c98:	b085      	sub	sp, #20
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10004c9a:	a801      	add	r0, sp, #4
10004c9c:	f7ff fe3a 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10004ca0:	9801      	ldr	r0, [sp, #4]
      mcussfreq = CSI_VALUE;
      break;
  }

  return mcussfreq;
}
10004ca2:	b005      	add	sp, #20
10004ca4:	f85d fb04 	ldr.w	pc, [sp], #4
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10004ca8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cac:	699b      	ldr	r3, [r3, #24]
10004cae:	f003 0303 	and.w	r3, r3, #3
10004cb2:	4803      	ldr	r0, [pc, #12]	; (10004cc0 <HAL_RCC_GetMCUSSFreq+0x44>)
10004cb4:	40d8      	lsrs	r0, r3
      break;
10004cb6:	4770      	bx	lr
      mcussfreq = CSI_VALUE;
10004cb8:	4802      	ldr	r0, [pc, #8]	; (10004cc4 <HAL_RCC_GetMCUSSFreq+0x48>)
      break;
10004cba:	4770      	bx	lr
      mcussfreq = HSE_VALUE;
10004cbc:	4802      	ldr	r0, [pc, #8]	; (10004cc8 <HAL_RCC_GetMCUSSFreq+0x4c>)
}
10004cbe:	4770      	bx	lr
10004cc0:	03d09000 	.word	0x03d09000
10004cc4:	003d0900 	.word	0x003d0900
10004cc8:	016e3600 	.word	0x016e3600

10004ccc <HAL_RCC_GetMCUFreq>:
{
10004ccc:	b510      	push	{r4, lr}
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10004cce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cd2:	f8d3 4830 	ldr.w	r4, [r3, #2096]	; 0x830
10004cd6:	f004 040f 	and.w	r4, r4, #15
  if (mcudiv > RCC_MCU_DIV512)
10004cda:	2c09      	cmp	r4, #9
10004cdc:	d900      	bls.n	10004ce0 <HAL_RCC_GetMCUFreq+0x14>
    mcudiv = RCC_MCU_DIV512;
10004cde:	2409      	movs	r4, #9
  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10004ce0:	f7ff ffcc 	bl	10004c7c <HAL_RCC_GetMCUSSFreq>
}
10004ce4:	40e0      	lsrs	r0, r4
10004ce6:	bd10      	pop	{r4, pc}

10004ce8 <HAL_RCC_GetPCLK1Freq>:
{
10004ce8:	b510      	push	{r4, lr}
  apb1div = __HAL_RCC_GET_APB1_DIV();
10004cea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cee:	f8d3 4834 	ldr.w	r4, [r3, #2100]	; 0x834
10004cf2:	f004 0407 	and.w	r4, r4, #7
  if (apb1div > RCC_APB1_DIV16)
10004cf6:	2c04      	cmp	r4, #4
10004cf8:	d900      	bls.n	10004cfc <HAL_RCC_GetPCLK1Freq+0x14>
    apb1div = RCC_APB1_DIV16;
10004cfa:	2404      	movs	r4, #4
  return (HAL_RCC_GetMCUFreq() >> apb1div);
10004cfc:	f7ff ffe6 	bl	10004ccc <HAL_RCC_GetMCUFreq>
}
10004d00:	40e0      	lsrs	r0, r4
10004d02:	bd10      	pop	{r4, pc}

10004d04 <HAL_RCC_GetPCLK2Freq>:
{
10004d04:	b510      	push	{r4, lr}
  apb2div = __HAL_RCC_GET_APB2_DIV();
10004d06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d0a:	f8d3 4838 	ldr.w	r4, [r3, #2104]	; 0x838
10004d0e:	f004 0407 	and.w	r4, r4, #7
  if (apb2div > RCC_APB2_DIV16)
10004d12:	2c04      	cmp	r4, #4
10004d14:	d900      	bls.n	10004d18 <HAL_RCC_GetPCLK2Freq+0x14>
    apb2div = RCC_APB2_DIV16;
10004d16:	2404      	movs	r4, #4
  return (HAL_RCC_GetMCUFreq() >> apb2div);
10004d18:	f7ff ffd8 	bl	10004ccc <HAL_RCC_GetMCUFreq>
}
10004d1c:	40e0      	lsrs	r0, r4
10004d1e:	bd10      	pop	{r4, pc}

10004d20 <HAL_RCC_GetPCLK3Freq>:
{
10004d20:	b510      	push	{r4, lr}
  apb3div = __HAL_RCC_GET_APB3_DIV();
10004d22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d26:	f8d3 483c 	ldr.w	r4, [r3, #2108]	; 0x83c
10004d2a:	f004 0407 	and.w	r4, r4, #7
  if (apb3div > RCC_APB3_DIV16)
10004d2e:	2c04      	cmp	r4, #4
10004d30:	d900      	bls.n	10004d34 <HAL_RCC_GetPCLK3Freq+0x14>
    apb3div = RCC_APB3_DIV16;
10004d32:	2404      	movs	r4, #4
  return (HAL_RCC_GetMCUFreq() >> apb3div);
10004d34:	f7ff ffca 	bl	10004ccc <HAL_RCC_GetMCUFreq>
}
10004d38:	40e0      	lsrs	r0, r4
10004d3a:	bd10      	pop	{r4, pc}

10004d3c <HAL_RCC_GetHCLK2Freq>:
{
10004d3c:	b508      	push	{r3, lr}
  return HAL_RCC_GetMCUFreq();
10004d3e:	f7ff ffc5 	bl	10004ccc <HAL_RCC_GetMCUFreq>
}
10004d42:	bd08      	pop	{r3, pc}

10004d44 <HAL_RCC_GetMLHCLKFreq>:
{
10004d44:	b508      	push	{r3, lr}
  return HAL_RCC_GetMCUFreq();
10004d46:	f7ff ffc1 	bl	10004ccc <HAL_RCC_GetMCUFreq>
}
10004d4a:	bd08      	pop	{r3, pc}

10004d4c <HAL_RCC_GetSystemCoreClockFreq>:
{
10004d4c:	b508      	push	{r3, lr}
  return HAL_RCC_GetMCUFreq();
10004d4e:	f7ff ffbd 	bl	10004ccc <HAL_RCC_GetMCUFreq>
}
10004d52:	bd08      	pop	{r3, pc}

10004d54 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
10004d54:	2800      	cmp	r0, #0
10004d56:	f000 827d 	beq.w	10005254 <HAL_RCC_OscConfig+0x500>
{
10004d5a:	b538      	push	{r3, r4, r5, lr}
10004d5c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10004d5e:	6803      	ldr	r3, [r0, #0]
10004d60:	f013 0f01 	tst.w	r3, #1
10004d64:	d03e      	beq.n	10004de4 <HAL_RCC_OscConfig+0x90>
    if (IS_HSE_IN_USE())
10004d66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d6a:	6a1b      	ldr	r3, [r3, #32]
10004d6c:	f003 0303 	and.w	r3, r3, #3
10004d70:	2b01      	cmp	r3, #1
10004d72:	f000 80e6 	beq.w	10004f42 <HAL_RCC_OscConfig+0x1ee>
10004d76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d7c:	f003 0307 	and.w	r3, r3, #7
10004d80:	2b01      	cmp	r3, #1
10004d82:	f000 80f3 	beq.w	10004f6c <HAL_RCC_OscConfig+0x218>
10004d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004d8c:	f003 0303 	and.w	r3, r3, #3
10004d90:	2b01      	cmp	r3, #1
10004d92:	f000 80f2 	beq.w	10004f7a <HAL_RCC_OscConfig+0x226>
10004d96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004d9c:	f003 0303 	and.w	r3, r3, #3
10004da0:	2b01      	cmp	r3, #1
10004da2:	f000 80f1 	beq.w	10004f88 <HAL_RCC_OscConfig+0x234>
10004da6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004daa:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004dae:	f003 0303 	and.w	r3, r3, #3
10004db2:	2b01      	cmp	r3, #1
10004db4:	f000 80f7 	beq.w	10004fa6 <HAL_RCC_OscConfig+0x252>
10004db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dbc:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004dc0:	f003 0303 	and.w	r3, r3, #3
10004dc4:	2b01      	cmp	r3, #1
10004dc6:	d107      	bne.n	10004dd8 <HAL_RCC_OscConfig+0x84>
10004dc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dcc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004dd0:	f013 0f02 	tst.w	r3, #2
10004dd4:	f040 80bb 	bne.w	10004f4e <HAL_RCC_OscConfig+0x1fa>
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10004dd8:	6860      	ldr	r0, [r4, #4]
10004dda:	f7ff fa7b 	bl	100042d4 <HAL_RCC_HSEConfig>
      if (result != HAL_OK)
10004dde:	2800      	cmp	r0, #0
10004de0:	f040 8226 	bne.w	10005230 <HAL_RCC_OscConfig+0x4dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10004de4:	6823      	ldr	r3, [r4, #0]
10004de6:	f013 0f02 	tst.w	r3, #2
10004dea:	f000 80ef 	beq.w	10004fcc <HAL_RCC_OscConfig+0x278>
    if (IS_HSI_IN_USE())
10004dee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004df2:	6a1b      	ldr	r3, [r3, #32]
10004df4:	f013 0f03 	tst.w	r3, #3
10004df8:	d104      	bne.n	10004e04 <HAL_RCC_OscConfig+0xb0>
10004dfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dfe:	6a1b      	ldr	r3, [r3, #32]
10004e00:	2b00      	cmp	r3, #0
10004e02:	db47      	blt.n	10004e94 <HAL_RCC_OscConfig+0x140>
10004e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e0a:	f013 0f07 	tst.w	r3, #7
10004e0e:	d104      	bne.n	10004e1a <HAL_RCC_OscConfig+0xc6>
10004e10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e16:	2b00      	cmp	r3, #0
10004e18:	db3c      	blt.n	10004e94 <HAL_RCC_OscConfig+0x140>
10004e1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004e20:	f013 0f03 	tst.w	r3, #3
10004e24:	d104      	bne.n	10004e30 <HAL_RCC_OscConfig+0xdc>
10004e26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004e2c:	2b00      	cmp	r3, #0
10004e2e:	db31      	blt.n	10004e94 <HAL_RCC_OscConfig+0x140>
10004e30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10004e36:	f013 0f03 	tst.w	r3, #3
10004e3a:	d10d      	bne.n	10004e58 <HAL_RCC_OscConfig+0x104>
10004e3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004e44:	f013 0f02 	tst.w	r3, #2
10004e48:	d124      	bne.n	10004e94 <HAL_RCC_OscConfig+0x140>
10004e4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004e52:	f013 0f02 	tst.w	r3, #2
10004e56:	d11d      	bne.n	10004e94 <HAL_RCC_OscConfig+0x140>
10004e58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e5c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004e60:	f013 0f03 	tst.w	r3, #3
10004e64:	d106      	bne.n	10004e74 <HAL_RCC_OscConfig+0x120>
10004e66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e6a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004e6e:	f013 0f02 	tst.w	r3, #2
10004e72:	d10f      	bne.n	10004e94 <HAL_RCC_OscConfig+0x140>
10004e74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e78:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004e7c:	f013 0f03 	tst.w	r3, #3
10004e80:	f040 80de 	bne.w	10005040 <HAL_RCC_OscConfig+0x2ec>
10004e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e88:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004e8c:	f013 0f02 	tst.w	r3, #2
10004e90:	f000 80d6 	beq.w	10005040 <HAL_RCC_OscConfig+0x2ec>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10004e94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e98:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004e9c:	f013 0f01 	tst.w	r3, #1
10004ea0:	d003      	beq.n	10004eaa <HAL_RCC_OscConfig+0x156>
10004ea2:	68e3      	ldr	r3, [r4, #12]
10004ea4:	2b01      	cmp	r3, #1
10004ea6:	f040 81d7 	bne.w	10005258 <HAL_RCC_OscConfig+0x504>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10004eaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004eae:	6993      	ldr	r3, [r2, #24]
10004eb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10004eb4:	6921      	ldr	r1, [r4, #16]
10004eb6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
10004eba:	6193      	str	r3, [r2, #24]
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10004ebc:	6a93      	ldr	r3, [r2, #40]	; 0x28
10004ebe:	f013 0f03 	tst.w	r3, #3
10004ec2:	d109      	bne.n	10004ed8 <HAL_RCC_OscConfig+0x184>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10004ec4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10004ec8:	f013 0f02 	tst.w	r3, #2
10004ecc:	d173      	bne.n	10004fb6 <HAL_RCC_OscConfig+0x262>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10004ece:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10004ed2:	f013 0f02 	tst.w	r3, #2
10004ed6:	d16e      	bne.n	10004fb6 <HAL_RCC_OscConfig+0x262>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10004ed8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004edc:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10004ee0:	f013 0f03 	tst.w	r3, #3
10004ee4:	d106      	bne.n	10004ef4 <HAL_RCC_OscConfig+0x1a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10004ee6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004eea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10004eee:	f013 0f02 	tst.w	r3, #2
10004ef2:	d160      	bne.n	10004fb6 <HAL_RCC_OscConfig+0x262>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10004ef4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ef8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10004efc:	f013 0f03 	tst.w	r3, #3
10004f00:	d106      	bne.n	10004f10 <HAL_RCC_OscConfig+0x1bc>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10004f02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f06:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10004f0a:	f013 0f02 	tst.w	r3, #2
10004f0e:	d152      	bne.n	10004fb6 <HAL_RCC_OscConfig+0x262>
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10004f10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004f14:	6993      	ldr	r3, [r2, #24]
10004f16:	f023 0303 	bic.w	r3, r3, #3
10004f1a:	6961      	ldr	r1, [r4, #20]
10004f1c:	430b      	orrs	r3, r1
10004f1e:	6193      	str	r3, [r2, #24]
          tickstart = HAL_GetTick();
10004f20:	f7fc fd8a 	bl	10001a38 <HAL_GetTick>
10004f24:	4605      	mov	r5, r0
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10004f26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f2a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004f2e:	f013 0f04 	tst.w	r3, #4
10004f32:	d140      	bne.n	10004fb6 <HAL_RCC_OscConfig+0x262>
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10004f34:	f7fc fd80 	bl	10001a38 <HAL_GetTick>
10004f38:	1b40      	subs	r0, r0, r5
10004f3a:	2864      	cmp	r0, #100	; 0x64
10004f3c:	d9f3      	bls.n	10004f26 <HAL_RCC_OscConfig+0x1d2>
              return HAL_TIMEOUT;
10004f3e:	2003      	movs	r0, #3
10004f40:	e176      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
    if (IS_HSE_IN_USE())
10004f42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f46:	6a1b      	ldr	r3, [r3, #32]
10004f48:	2b00      	cmp	r3, #0
10004f4a:	f6bf af14 	bge.w	10004d76 <HAL_RCC_OscConfig+0x22>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10004f4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f52:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10004f56:	f413 7f80 	tst.w	r3, #256	; 0x100
10004f5a:	f43f af43 	beq.w	10004de4 <HAL_RCC_OscConfig+0x90>
10004f5e:	6863      	ldr	r3, [r4, #4]
10004f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10004f64:	f43f af3e 	beq.w	10004de4 <HAL_RCC_OscConfig+0x90>
        return HAL_ERROR;
10004f68:	2001      	movs	r0, #1
10004f6a:	e161      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
    if (IS_HSE_IN_USE())
10004f6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f72:	2b00      	cmp	r3, #0
10004f74:	f6bf af07 	bge.w	10004d86 <HAL_RCC_OscConfig+0x32>
10004f78:	e7e9      	b.n	10004f4e <HAL_RCC_OscConfig+0x1fa>
10004f7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004f80:	2b00      	cmp	r3, #0
10004f82:	f6bf af08 	bge.w	10004d96 <HAL_RCC_OscConfig+0x42>
10004f86:	e7e2      	b.n	10004f4e <HAL_RCC_OscConfig+0x1fa>
10004f88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10004f90:	f013 0f02 	tst.w	r3, #2
10004f94:	d1db      	bne.n	10004f4e <HAL_RCC_OscConfig+0x1fa>
10004f96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10004f9e:	f013 0f02 	tst.w	r3, #2
10004fa2:	d1d4      	bne.n	10004f4e <HAL_RCC_OscConfig+0x1fa>
10004fa4:	e6ff      	b.n	10004da6 <HAL_RCC_OscConfig+0x52>
10004fa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004faa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004fae:	f013 0f02 	tst.w	r3, #2
10004fb2:	d1cc      	bne.n	10004f4e <HAL_RCC_OscConfig+0x1fa>
10004fb4:	e700      	b.n	10004db8 <HAL_RCC_OscConfig+0x64>
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10004fb6:	f7ff fec9 	bl	10004d4c <HAL_RCC_GetSystemCoreClockFreq>
10004fba:	4baa      	ldr	r3, [pc, #680]	; (10005264 <HAL_RCC_OscConfig+0x510>)
10004fbc:	6018      	str	r0, [r3, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10004fbe:	4baa      	ldr	r3, [pc, #680]	; (10005268 <HAL_RCC_OscConfig+0x514>)
10004fc0:	6818      	ldr	r0, [r3, #0]
10004fc2:	f7fc fcf1 	bl	100019a8 <HAL_InitTick>
10004fc6:	2800      	cmp	r0, #0
10004fc8:	f040 8148 	bne.w	1000525c <HAL_RCC_OscConfig+0x508>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10004fcc:	6823      	ldr	r3, [r4, #0]
10004fce:	f013 0f10 	tst.w	r3, #16
10004fd2:	f000 80a4 	beq.w	1000511e <HAL_RCC_OscConfig+0x3ca>
    if (IS_CSI_IN_USE())
10004fd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fda:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10004fde:	f003 0303 	and.w	r3, r3, #3
10004fe2:	2b02      	cmp	r3, #2
10004fe4:	d07f      	beq.n	100050e6 <HAL_RCC_OscConfig+0x392>
10004fe6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10004fec:	f003 0303 	and.w	r3, r3, #3
10004ff0:	2b02      	cmp	r3, #2
10004ff2:	f000 80b4 	beq.w	1000515e <HAL_RCC_OscConfig+0x40a>
10004ff6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ffa:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10004ffe:	f003 0303 	and.w	r3, r3, #3
10005002:	2b02      	cmp	r3, #2
10005004:	f000 80b2 	beq.w	1000516c <HAL_RCC_OscConfig+0x418>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10005008:	69e3      	ldr	r3, [r4, #28]
1000500a:	2b00      	cmp	r3, #0
1000500c:	f000 80c1 	beq.w	10005192 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_ENABLE();
10005010:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005014:	68d3      	ldr	r3, [r2, #12]
10005016:	f043 0310 	orr.w	r3, r3, #16
1000501a:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
1000501c:	f7fc fd0c 	bl	10001a38 <HAL_GetTick>
10005020:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10005022:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005026:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000502a:	f013 0f10 	tst.w	r3, #16
1000502e:	f040 80a6 	bne.w	1000517e <HAL_RCC_OscConfig+0x42a>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10005032:	f7fc fd01 	bl	10001a38 <HAL_GetTick>
10005036:	1b40      	subs	r0, r0, r5
10005038:	2864      	cmp	r0, #100	; 0x64
1000503a:	d9f2      	bls.n	10005022 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
1000503c:	2003      	movs	r0, #3
1000503e:	e0f7      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10005040:	68e3      	ldr	r3, [r4, #12]
10005042:	2b00      	cmp	r3, #0
10005044:	d039      	beq.n	100050ba <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_HSI_ENABLE();
10005046:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000504a:	68d3      	ldr	r3, [r2, #12]
1000504c:	f043 0301 	orr.w	r3, r3, #1
10005050:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
10005052:	f7fc fcf1 	bl	10001a38 <HAL_GetTick>
10005056:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10005058:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000505c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005060:	f013 0f01 	tst.w	r3, #1
10005064:	d106      	bne.n	10005074 <HAL_RCC_OscConfig+0x320>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10005066:	f7fc fce7 	bl	10001a38 <HAL_GetTick>
1000506a:	1b40      	subs	r0, r0, r5
1000506c:	2864      	cmp	r0, #100	; 0x64
1000506e:	d9f3      	bls.n	10005058 <HAL_RCC_OscConfig+0x304>
            return HAL_TIMEOUT;
10005070:	2003      	movs	r0, #3
10005072:	e0dd      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10005074:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005078:	6993      	ldr	r3, [r2, #24]
1000507a:	f023 0303 	bic.w	r3, r3, #3
1000507e:	6961      	ldr	r1, [r4, #20]
10005080:	430b      	orrs	r3, r1
10005082:	6193      	str	r3, [r2, #24]
        tickstart = HAL_GetTick();
10005084:	f7fc fcd8 	bl	10001a38 <HAL_GetTick>
10005088:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
1000508a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000508e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10005092:	f013 0f04 	tst.w	r3, #4
10005096:	d106      	bne.n	100050a6 <HAL_RCC_OscConfig+0x352>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10005098:	f7fc fcce 	bl	10001a38 <HAL_GetTick>
1000509c:	1b40      	subs	r0, r0, r5
1000509e:	2864      	cmp	r0, #100	; 0x64
100050a0:	d9f3      	bls.n	1000508a <HAL_RCC_OscConfig+0x336>
            return HAL_TIMEOUT;
100050a2:	2003      	movs	r0, #3
100050a4:	e0c4      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100050a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100050aa:	6993      	ldr	r3, [r2, #24]
100050ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100050b0:	6921      	ldr	r1, [r4, #16]
100050b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
100050b6:	6193      	str	r3, [r2, #24]
100050b8:	e788      	b.n	10004fcc <HAL_RCC_OscConfig+0x278>
        __HAL_RCC_HSI_DISABLE();
100050ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050be:	2201      	movs	r2, #1
100050c0:	611a      	str	r2, [r3, #16]
        tickstart = HAL_GetTick();
100050c2:	f7fc fcb9 	bl	10001a38 <HAL_GetTick>
100050c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
100050c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050cc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100050d0:	f013 0f01 	tst.w	r3, #1
100050d4:	f43f af7a 	beq.w	10004fcc <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100050d8:	f7fc fcae 	bl	10001a38 <HAL_GetTick>
100050dc:	1b40      	subs	r0, r0, r5
100050de:	2864      	cmp	r0, #100	; 0x64
100050e0:	d9f2      	bls.n	100050c8 <HAL_RCC_OscConfig+0x374>
            return HAL_TIMEOUT;
100050e2:	2003      	movs	r0, #3
100050e4:	e0a4      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
    if (IS_CSI_IN_USE())
100050e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050ea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100050ee:	f013 0f02 	tst.w	r3, #2
100050f2:	f43f af78 	beq.w	10004fe6 <HAL_RCC_OscConfig+0x292>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
100050f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050fa:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100050fe:	f013 0f10 	tst.w	r3, #16
10005102:	d003      	beq.n	1000510c <HAL_RCC_OscConfig+0x3b8>
10005104:	69e3      	ldr	r3, [r4, #28]
10005106:	2b10      	cmp	r3, #16
10005108:	f040 80aa 	bne.w	10005260 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
1000510c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005110:	69d3      	ldr	r3, [r2, #28]
10005112:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
10005116:	6a21      	ldr	r1, [r4, #32]
10005118:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1000511c:	61d3      	str	r3, [r2, #28]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1000511e:	6823      	ldr	r3, [r4, #0]
10005120:	f013 0f08 	tst.w	r3, #8
10005124:	d063      	beq.n	100051ee <HAL_RCC_OscConfig+0x49a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10005126:	69a3      	ldr	r3, [r4, #24]
10005128:	2b00      	cmp	r3, #0
1000512a:	d047      	beq.n	100051bc <HAL_RCC_OscConfig+0x468>
      __HAL_RCC_LSI_ENABLE();
1000512c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005130:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
10005134:	f043 0301 	orr.w	r3, r3, #1
10005138:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
      tickstart = HAL_GetTick();
1000513c:	f7fc fc7c 	bl	10001a38 <HAL_GetTick>
10005140:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10005142:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005146:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000514a:	f013 0f02 	tst.w	r3, #2
1000514e:	d14e      	bne.n	100051ee <HAL_RCC_OscConfig+0x49a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10005150:	f7fc fc72 	bl	10001a38 <HAL_GetTick>
10005154:	1b40      	subs	r0, r0, r5
10005156:	2864      	cmp	r0, #100	; 0x64
10005158:	d9f3      	bls.n	10005142 <HAL_RCC_OscConfig+0x3ee>
          return HAL_TIMEOUT;
1000515a:	2003      	movs	r0, #3
1000515c:	e068      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
    if (IS_CSI_IN_USE())
1000515e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10005164:	2b00      	cmp	r3, #0
10005166:	f6bf af46 	bge.w	10004ff6 <HAL_RCC_OscConfig+0x2a2>
1000516a:	e7c4      	b.n	100050f6 <HAL_RCC_OscConfig+0x3a2>
1000516c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005170:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005174:	f013 0f02 	tst.w	r3, #2
10005178:	f43f af46 	beq.w	10005008 <HAL_RCC_OscConfig+0x2b4>
1000517c:	e7bb      	b.n	100050f6 <HAL_RCC_OscConfig+0x3a2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
1000517e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005182:	69d3      	ldr	r3, [r2, #28]
10005184:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
10005188:	6a21      	ldr	r1, [r4, #32]
1000518a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1000518e:	61d3      	str	r3, [r2, #28]
10005190:	e7c5      	b.n	1000511e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_CSI_DISABLE();
10005192:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005196:	2210      	movs	r2, #16
10005198:	611a      	str	r2, [r3, #16]
        tickstart = HAL_GetTick();
1000519a:	f7fc fc4d 	bl	10001a38 <HAL_GetTick>
1000519e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100051a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051a4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100051a8:	f013 0f10 	tst.w	r3, #16
100051ac:	d0b7      	beq.n	1000511e <HAL_RCC_OscConfig+0x3ca>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100051ae:	f7fc fc43 	bl	10001a38 <HAL_GetTick>
100051b2:	1b40      	subs	r0, r0, r5
100051b4:	2864      	cmp	r0, #100	; 0x64
100051b6:	d9f3      	bls.n	100051a0 <HAL_RCC_OscConfig+0x44c>
            return HAL_TIMEOUT;
100051b8:	2003      	movs	r0, #3
100051ba:	e039      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
      __HAL_RCC_LSI_DISABLE();
100051bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100051c0:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
100051c4:	f023 0301 	bic.w	r3, r3, #1
100051c8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
      tickstart = HAL_GetTick();
100051cc:	f7fc fc34 	bl	10001a38 <HAL_GetTick>
100051d0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100051d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100051da:	f013 0f02 	tst.w	r3, #2
100051de:	d006      	beq.n	100051ee <HAL_RCC_OscConfig+0x49a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100051e0:	f7fc fc2a 	bl	10001a38 <HAL_GetTick>
100051e4:	1b40      	subs	r0, r0, r5
100051e6:	2864      	cmp	r0, #100	; 0x64
100051e8:	d9f3      	bls.n	100051d2 <HAL_RCC_OscConfig+0x47e>
          return HAL_TIMEOUT;
100051ea:	2003      	movs	r0, #3
100051ec:	e020      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100051ee:	6823      	ldr	r3, [r4, #0]
100051f0:	f013 0f04 	tst.w	r3, #4
100051f4:	d017      	beq.n	10005226 <HAL_RCC_OscConfig+0x4d2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100051f6:	4a1d      	ldr	r2, [pc, #116]	; (1000526c <HAL_RCC_OscConfig+0x518>)
100051f8:	6813      	ldr	r3, [r2, #0]
100051fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100051fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
10005200:	f7fc fc1a 	bl	10001a38 <HAL_GetTick>
10005204:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10005206:	4b19      	ldr	r3, [pc, #100]	; (1000526c <HAL_RCC_OscConfig+0x518>)
10005208:	681b      	ldr	r3, [r3, #0]
1000520a:	f413 7f80 	tst.w	r3, #256	; 0x100
1000520e:	d106      	bne.n	1000521e <HAL_RCC_OscConfig+0x4ca>
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10005210:	f7fc fc12 	bl	10001a38 <HAL_GetTick>
10005214:	1b40      	subs	r0, r0, r5
10005216:	2864      	cmp	r0, #100	; 0x64
10005218:	d9f5      	bls.n	10005206 <HAL_RCC_OscConfig+0x4b2>
        return HAL_TIMEOUT;
1000521a:	2003      	movs	r0, #3
1000521c:	e008      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
1000521e:	68a0      	ldr	r0, [r4, #8]
10005220:	f7ff f8a8 	bl	10004374 <HAL_RCC_LSEConfig>
    if (result != HAL_OK)
10005224:	b920      	cbnz	r0, 10005230 <HAL_RCC_OscConfig+0x4dc>
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10005226:	f104 0024 	add.w	r0, r4, #36	; 0x24
1000522a:	f7ff f903 	bl	10004434 <RCC_PLL1_Config>
  if (result != HAL_OK)
1000522e:	b100      	cbz	r0, 10005232 <HAL_RCC_OscConfig+0x4de>
}
10005230:	bd38      	pop	{r3, r4, r5, pc}
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10005232:	f104 0060 	add.w	r0, r4, #96	; 0x60
10005236:	f000 f965 	bl	10005504 <RCCEx_PLL2_Config>
  if (result != HAL_OK)
1000523a:	2800      	cmp	r0, #0
1000523c:	d1f8      	bne.n	10005230 <HAL_RCC_OscConfig+0x4dc>
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
1000523e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
10005242:	f000 fa89 	bl	10005758 <RCCEx_PLL3_Config>
  if (result != HAL_OK)
10005246:	2800      	cmp	r0, #0
10005248:	d1f2      	bne.n	10005230 <HAL_RCC_OscConfig+0x4dc>
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000524a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
1000524e:	f000 fb91 	bl	10005974 <RCCEx_PLL4_Config>
  if (result != HAL_OK)
10005252:	e7ed      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
    return HAL_ERROR;
10005254:	2001      	movs	r0, #1
}
10005256:	4770      	bx	lr
        return HAL_ERROR;
10005258:	2001      	movs	r0, #1
1000525a:	e7e9      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
          return HAL_ERROR;
1000525c:	2001      	movs	r0, #1
1000525e:	e7e7      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
        return HAL_ERROR;
10005260:	2001      	movs	r0, #1
10005262:	e7e5      	b.n	10005230 <HAL_RCC_OscConfig+0x4dc>
10005264:	100203f0 	.word	0x100203f0
10005268:	100203f8 	.word	0x100203f8
1000526c:	50001000 	.word	0x50001000

10005270 <RCC_MCUConfig>:
{
10005270:	b538      	push	{r3, r4, r5, lr}
10005272:	4605      	mov	r5, r0
  switch (MCUInitStruct->MCU_Clock)
10005274:	6803      	ldr	r3, [r0, #0]
10005276:	2b03      	cmp	r3, #3
10005278:	d80a      	bhi.n	10005290 <RCC_MCUConfig+0x20>
1000527a:	e8df f003 	tbb	[pc, r3]
1000527e:	2002      	.short	0x2002
10005280:	3229      	.short	0x3229
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10005282:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005286:	f8d2 2808 	ldr.w	r2, [r2, #2056]	; 0x808
1000528a:	f012 0f01 	tst.w	r2, #1
1000528e:	d05e      	beq.n	1000534e <RCC_MCUConfig+0xde>
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10005290:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005294:	6c8a      	ldr	r2, [r1, #72]	; 0x48
10005296:	f022 0203 	bic.w	r2, r2, #3
1000529a:	4313      	orrs	r3, r2
1000529c:	648b      	str	r3, [r1, #72]	; 0x48
  tickstart = HAL_GetTick();
1000529e:	f7fc fbcb 	bl	10001a38 <HAL_GetTick>
100052a2:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100052a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100052aa:	2b00      	cmp	r3, #0
100052ac:	db22      	blt.n	100052f4 <RCC_MCUConfig+0x84>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100052ae:	f7fc fbc3 	bl	10001a38 <HAL_GetTick>
100052b2:	1b03      	subs	r3, r0, r4
100052b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100052b8:	d9f4      	bls.n	100052a4 <RCC_MCUConfig+0x34>
      return HAL_TIMEOUT;
100052ba:	2003      	movs	r0, #3
}
100052bc:	bd38      	pop	{r3, r4, r5, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100052be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100052c2:	f8d2 2808 	ldr.w	r2, [r2, #2056]	; 0x808
100052c6:	f412 7f80 	tst.w	r2, #256	; 0x100
100052ca:	d1e1      	bne.n	10005290 <RCC_MCUConfig+0x20>
        return HAL_ERROR;
100052cc:	2001      	movs	r0, #1
100052ce:	e7f5      	b.n	100052bc <RCC_MCUConfig+0x4c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
100052d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100052d4:	f8d2 2808 	ldr.w	r2, [r2, #2056]	; 0x808
100052d8:	f012 0f10 	tst.w	r2, #16
100052dc:	d1d8      	bne.n	10005290 <RCC_MCUConfig+0x20>
        return HAL_ERROR;
100052de:	2001      	movs	r0, #1
100052e0:	e7ec      	b.n	100052bc <RCC_MCUConfig+0x4c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100052e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100052e6:	f8d2 2880 	ldr.w	r2, [r2, #2176]	; 0x880
100052ea:	f012 0f02 	tst.w	r2, #2
100052ee:	d1cf      	bne.n	10005290 <RCC_MCUConfig+0x20>
        return HAL_ERROR;
100052f0:	2001      	movs	r0, #1
100052f2:	e7e3      	b.n	100052bc <RCC_MCUConfig+0x4c>
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100052f4:	f7ff fd2a 	bl	10004d4c <HAL_RCC_GetSystemCoreClockFreq>
100052f8:	4b16      	ldr	r3, [pc, #88]	; (10005354 <RCC_MCUConfig+0xe4>)
100052fa:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
100052fc:	4b16      	ldr	r3, [pc, #88]	; (10005358 <RCC_MCUConfig+0xe8>)
100052fe:	6818      	ldr	r0, [r3, #0]
10005300:	f7fc fb52 	bl	100019a8 <HAL_InitTick>
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10005304:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005308:	f8d2 3830 	ldr.w	r3, [r2, #2096]	; 0x830
1000530c:	f023 030f 	bic.w	r3, r3, #15
10005310:	6869      	ldr	r1, [r5, #4]
10005312:	430b      	orrs	r3, r1
10005314:	f8c2 3830 	str.w	r3, [r2, #2096]	; 0x830
  tickstart = HAL_GetTick();
10005318:	f7fc fb8e 	bl	10001a38 <HAL_GetTick>
1000531c:	4604      	mov	r4, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
1000531e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005322:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10005326:	2b00      	cmp	r3, #0
10005328:	db07      	blt.n	1000533a <RCC_MCUConfig+0xca>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000532a:	f7fc fb85 	bl	10001a38 <HAL_GetTick>
1000532e:	1b00      	subs	r0, r0, r4
10005330:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
10005334:	d9f3      	bls.n	1000531e <RCC_MCUConfig+0xae>
      return HAL_TIMEOUT;
10005336:	2003      	movs	r0, #3
10005338:	e7c0      	b.n	100052bc <RCC_MCUConfig+0x4c>
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000533a:	f7ff fd07 	bl	10004d4c <HAL_RCC_GetSystemCoreClockFreq>
1000533e:	4b05      	ldr	r3, [pc, #20]	; (10005354 <RCC_MCUConfig+0xe4>)
10005340:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
10005342:	4b05      	ldr	r3, [pc, #20]	; (10005358 <RCC_MCUConfig+0xe8>)
10005344:	6818      	ldr	r0, [r3, #0]
10005346:	f7fc fb2f 	bl	100019a8 <HAL_InitTick>
  return HAL_OK;
1000534a:	2000      	movs	r0, #0
1000534c:	e7b6      	b.n	100052bc <RCC_MCUConfig+0x4c>
        return HAL_ERROR;
1000534e:	2001      	movs	r0, #1
10005350:	e7b4      	b.n	100052bc <RCC_MCUConfig+0x4c>
10005352:	bf00      	nop
10005354:	100203f0 	.word	0x100203f0
10005358:	100203f8 	.word	0x100203f8

1000535c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
1000535c:	2800      	cmp	r0, #0
1000535e:	f000 80bb 	beq.w	100054d8 <HAL_RCC_ClockConfig+0x17c>
{
10005362:	b538      	push	{r3, r4, r5, lr}
10005364:	4604      	mov	r4, r0
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10005366:	6803      	ldr	r3, [r0, #0]
10005368:	f013 0f01 	tst.w	r3, #1
1000536c:	d11d      	bne.n	100053aa <HAL_RCC_ClockConfig+0x4e>
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
1000536e:	6823      	ldr	r3, [r4, #0]
10005370:	f013 0f02 	tst.w	r3, #2
10005374:	d11f      	bne.n	100053b6 <HAL_RCC_ClockConfig+0x5a>
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
10005376:	6823      	ldr	r3, [r4, #0]
10005378:	f013 0f04 	tst.w	r3, #4
1000537c:	d122      	bne.n	100053c4 <HAL_RCC_ClockConfig+0x68>
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
1000537e:	6823      	ldr	r3, [r4, #0]
10005380:	f013 0f08 	tst.w	r3, #8
10005384:	d125      	bne.n	100053d2 <HAL_RCC_ClockConfig+0x76>
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
10005386:	6823      	ldr	r3, [r4, #0]
10005388:	f013 0f10 	tst.w	r3, #16
1000538c:	d139      	bne.n	10005402 <HAL_RCC_ClockConfig+0xa6>
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000538e:	6823      	ldr	r3, [r4, #0]
10005390:	f013 0f20 	tst.w	r3, #32
10005394:	d14d      	bne.n	10005432 <HAL_RCC_ClockConfig+0xd6>
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10005396:	6823      	ldr	r3, [r4, #0]
10005398:	f013 0f40 	tst.w	r3, #64	; 0x40
1000539c:	d164      	bne.n	10005468 <HAL_RCC_ClockConfig+0x10c>
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
1000539e:	6823      	ldr	r3, [r4, #0]
100053a0:	f013 0f80 	tst.w	r3, #128	; 0x80
100053a4:	d17b      	bne.n	1000549e <HAL_RCC_ClockConfig+0x142>
  return HAL_OK;
100053a6:	2000      	movs	r0, #0
}
100053a8:	bd38      	pop	{r3, r4, r5, pc}
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
100053aa:	3004      	adds	r0, #4
100053ac:	f7ff f968 	bl	10004680 <RCC_MPUConfig>
    if (status  != HAL_OK)
100053b0:	2800      	cmp	r0, #0
100053b2:	d0dc      	beq.n	1000536e <HAL_RCC_ClockConfig+0x12>
100053b4:	e7f8      	b.n	100053a8 <HAL_RCC_ClockConfig+0x4c>
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
100053b6:	f104 000c 	add.w	r0, r4, #12
100053ba:	f7ff f9b1 	bl	10004720 <RCC_AXISSConfig>
    if (status  != HAL_OK)
100053be:	2800      	cmp	r0, #0
100053c0:	d0d9      	beq.n	10005376 <HAL_RCC_ClockConfig+0x1a>
100053c2:	e7f1      	b.n	100053a8 <HAL_RCC_ClockConfig+0x4c>
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
100053c4:	f104 0014 	add.w	r0, r4, #20
100053c8:	f7ff ff52 	bl	10005270 <RCC_MCUConfig>
    if (status  != HAL_OK)
100053cc:	2800      	cmp	r0, #0
100053ce:	d0d6      	beq.n	1000537e <HAL_RCC_ClockConfig+0x22>
100053d0:	e7ea      	b.n	100053a8 <HAL_RCC_ClockConfig+0x4c>
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
100053d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053d6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
100053d8:	f023 0307 	bic.w	r3, r3, #7
100053dc:	69e1      	ldr	r1, [r4, #28]
100053de:	430b      	orrs	r3, r1
100053e0:	63d3      	str	r3, [r2, #60]	; 0x3c
    tickstart = HAL_GetTick();
100053e2:	f7fc fb29 	bl	10001a38 <HAL_GetTick>
100053e6:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100053e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100053ee:	2b00      	cmp	r3, #0
100053f0:	dbc9      	blt.n	10005386 <HAL_RCC_ClockConfig+0x2a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100053f2:	f7fc fb21 	bl	10001a38 <HAL_GetTick>
100053f6:	1b40      	subs	r0, r0, r5
100053f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
100053fc:	d9f4      	bls.n	100053e8 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
100053fe:	2003      	movs	r0, #3
10005400:	e7d2      	b.n	100053a8 <HAL_RCC_ClockConfig+0x4c>
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10005402:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005406:	6c13      	ldr	r3, [r2, #64]	; 0x40
10005408:	f023 0307 	bic.w	r3, r3, #7
1000540c:	6a21      	ldr	r1, [r4, #32]
1000540e:	430b      	orrs	r3, r1
10005410:	6413      	str	r3, [r2, #64]	; 0x40
    tickstart = HAL_GetTick();
10005412:	f7fc fb11 	bl	10001a38 <HAL_GetTick>
10005416:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10005418:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000541e:	2b00      	cmp	r3, #0
10005420:	dbb5      	blt.n	1000538e <HAL_RCC_ClockConfig+0x32>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005422:	f7fc fb09 	bl	10001a38 <HAL_GetTick>
10005426:	1b40      	subs	r0, r0, r5
10005428:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
1000542c:	d9f4      	bls.n	10005418 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
1000542e:	2003      	movs	r0, #3
10005430:	e7ba      	b.n	100053a8 <HAL_RCC_ClockConfig+0x4c>
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10005432:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005436:	f8d2 3834 	ldr.w	r3, [r2, #2100]	; 0x834
1000543a:	f023 0307 	bic.w	r3, r3, #7
1000543e:	6a61      	ldr	r1, [r4, #36]	; 0x24
10005440:	430b      	orrs	r3, r1
10005442:	f8c2 3834 	str.w	r3, [r2, #2100]	; 0x834
    tickstart = HAL_GetTick();
10005446:	f7fc faf7 	bl	10001a38 <HAL_GetTick>
1000544a:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000544c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005450:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10005454:	2b00      	cmp	r3, #0
10005456:	db9e      	blt.n	10005396 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005458:	f7fc faee 	bl	10001a38 <HAL_GetTick>
1000545c:	1b40      	subs	r0, r0, r5
1000545e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
10005462:	d9f3      	bls.n	1000544c <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
10005464:	2003      	movs	r0, #3
10005466:	e79f      	b.n	100053a8 <HAL_RCC_ClockConfig+0x4c>
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
10005468:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000546c:	f8d2 3838 	ldr.w	r3, [r2, #2104]	; 0x838
10005470:	f023 0307 	bic.w	r3, r3, #7
10005474:	6aa1      	ldr	r1, [r4, #40]	; 0x28
10005476:	430b      	orrs	r3, r1
10005478:	f8c2 3838 	str.w	r3, [r2, #2104]	; 0x838
    tickstart = HAL_GetTick();
1000547c:	f7fc fadc 	bl	10001a38 <HAL_GetTick>
10005480:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10005482:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005486:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
1000548a:	2b00      	cmp	r3, #0
1000548c:	db87      	blt.n	1000539e <HAL_RCC_ClockConfig+0x42>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000548e:	f7fc fad3 	bl	10001a38 <HAL_GetTick>
10005492:	1b40      	subs	r0, r0, r5
10005494:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
10005498:	d9f3      	bls.n	10005482 <HAL_RCC_ClockConfig+0x126>
        return HAL_TIMEOUT;
1000549a:	2003      	movs	r0, #3
1000549c:	e784      	b.n	100053a8 <HAL_RCC_ClockConfig+0x4c>
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
1000549e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100054a2:	f8d2 383c 	ldr.w	r3, [r2, #2108]	; 0x83c
100054a6:	f023 0307 	bic.w	r3, r3, #7
100054aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
100054ac:	430b      	orrs	r3, r1
100054ae:	f8c2 383c 	str.w	r3, [r2, #2108]	; 0x83c
    tickstart = HAL_GetTick();
100054b2:	f7fc fac1 	bl	10001a38 <HAL_GetTick>
100054b6:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100054b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054bc:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100054c0:	2b00      	cmp	r3, #0
100054c2:	db07      	blt.n	100054d4 <HAL_RCC_ClockConfig+0x178>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100054c4:	f7fc fab8 	bl	10001a38 <HAL_GetTick>
100054c8:	1b00      	subs	r0, r0, r4
100054ca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
100054ce:	d9f3      	bls.n	100054b8 <HAL_RCC_ClockConfig+0x15c>
        return HAL_TIMEOUT;
100054d0:	2003      	movs	r0, #3
100054d2:	e769      	b.n	100053a8 <HAL_RCC_ClockConfig+0x4c>
  return HAL_OK;
100054d4:	2000      	movs	r0, #0
100054d6:	e767      	b.n	100053a8 <HAL_RCC_ClockConfig+0x4c>
    return HAL_ERROR;
100054d8:	2001      	movs	r0, #1
}
100054da:	4770      	bx	lr

100054dc <HAL_RCC_WAKEUP_Callback>:
__weak void HAL_RCC_WAKEUP_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
100054dc:	4770      	bx	lr

100054de <HAL_RCC_WAKEUP_IRQHandler>:
{
100054de:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
100054e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054e4:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
100054e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
100054ec:	d100      	bne.n	100054f0 <HAL_RCC_WAKEUP_IRQHandler+0x12>
}
100054ee:	bd08      	pop	{r3, pc}
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
100054f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
100054f8:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18
    HAL_RCC_WAKEUP_Callback();
100054fc:	f7ff ffee 	bl	100054dc <HAL_RCC_WAKEUP_Callback>
}
10005500:	e7f5      	b.n	100054ee <HAL_RCC_WAKEUP_IRQHandler+0x10>
	...

10005504 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10005504:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10005506:	6803      	ldr	r3, [r0, #0]
10005508:	2b00      	cmp	r3, #0
1000550a:	f000 811f 	beq.w	1000574c <RCCEx_PLL2_Config+0x248>
1000550e:	4604      	mov	r4, r0
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10005510:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005514:	6a52      	ldr	r2, [r2, #36]	; 0x24
10005516:	f002 0207 	and.w	r2, r2, #7
1000551a:	2a02      	cmp	r2, #2
1000551c:	d02f      	beq.n	1000557e <RCCEx_PLL2_Config+0x7a>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
1000551e:	2b02      	cmp	r3, #2
10005520:	f040 80f3 	bne.w	1000570a <RCCEx_PLL2_Config+0x206>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10005524:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000552a:	f013 0f03 	tst.w	r3, #3
1000552e:	d007      	beq.n	10005540 <RCCEx_PLL2_Config+0x3c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10005530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005536:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
1000553a:	2b01      	cmp	r3, #1
1000553c:	f040 8108 	bne.w	10005750 <RCCEx_PLL2_Config+0x24c>
        {
          return HAL_ERROR;
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10005540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005544:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
10005548:	f022 0270 	bic.w	r2, r2, #112	; 0x70
1000554c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10005550:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
10005554:	f022 0201 	bic.w	r2, r2, #1
10005558:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000555c:	f7fc fa6c 	bl	10001a38 <HAL_GetTick>
10005560:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10005562:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000556a:	f013 0f02 	tst.w	r3, #2
1000556e:	d00d      	beq.n	1000558c <RCCEx_PLL2_Config+0x88>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005570:	f7fc fa62 	bl	10001a38 <HAL_GetTick>
10005574:	1b43      	subs	r3, r0, r5
10005576:	2b64      	cmp	r3, #100	; 0x64
10005578:	d9f3      	bls.n	10005562 <RCCEx_PLL2_Config+0x5e>
          {
            return HAL_TIMEOUT;
1000557a:	2003      	movs	r0, #3
1000557c:	e0e7      	b.n	1000574e <RCCEx_PLL2_Config+0x24a>
    if (!__IS_PLL2_IN_USE()) /* If not used then */
1000557e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005582:	6a52      	ldr	r2, [r2, #36]	; 0x24
10005584:	2a00      	cmp	r2, #0
10005586:	daca      	bge.n	1000551e <RCCEx_PLL2_Config+0x1a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10005588:	2001      	movs	r0, #1
1000558a:	e0e0      	b.n	1000574e <RCCEx_PLL2_Config+0x24a>
        if (__IS_PLL1_IN_USE())
1000558c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005590:	6a1b      	ldr	r3, [r3, #32]
10005592:	f003 0303 	and.w	r3, r3, #3
10005596:	2b02      	cmp	r3, #2
10005598:	d071      	beq.n	1000567e <RCCEx_PLL2_Config+0x17a>
1000559a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000559e:	6a1b      	ldr	r3, [r3, #32]
100055a0:	f003 0303 	and.w	r3, r3, #3
100055a4:	2b03      	cmp	r3, #3
100055a6:	d079      	beq.n	1000569c <RCCEx_PLL2_Config+0x198>
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
100055a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100055ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
100055ae:	f023 0303 	bic.w	r3, r3, #3
100055b2:	6861      	ldr	r1, [r4, #4]
100055b4:	430b      	orrs	r3, r1
100055b6:	6293      	str	r3, [r2, #40]	; 0x28
        __HAL_RCC_PLL2_CONFIG(
100055b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100055bc:	f8d1 2098 	ldr.w	r2, [r1, #152]	; 0x98
100055c0:	4b64      	ldr	r3, [pc, #400]	; (10005754 <RCCEx_PLL2_Config+0x250>)
100055c2:	4013      	ands	r3, r2
100055c4:	68e2      	ldr	r2, [r4, #12]
100055c6:	3a01      	subs	r2, #1
100055c8:	68a0      	ldr	r0, [r4, #8]
100055ca:	3801      	subs	r0, #1
100055cc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
100055d0:	4313      	orrs	r3, r2
100055d2:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
100055d6:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
100055da:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100055de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100055e2:	6922      	ldr	r2, [r4, #16]
100055e4:	3a01      	subs	r2, #1
100055e6:	6960      	ldr	r0, [r4, #20]
100055e8:	3801      	subs	r0, #1
100055ea:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
100055ee:	69a0      	ldr	r0, [r4, #24]
100055f0:	3801      	subs	r0, #1
100055f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
100055f6:	4313      	orrs	r3, r2
100055f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
100055fc:	f8d1 30a0 	ldr.w	r3, [r1, #160]	; 0xa0
10005600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10005604:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10005608:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000560a:	2b02      	cmp	r3, #2
1000560c:	d001      	beq.n	10005612 <RCCEx_PLL2_Config+0x10e>
1000560e:	2b00      	cmp	r3, #0
10005610:	d14a      	bne.n	100056a8 <RCCEx_PLL2_Config+0x1a4>
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10005612:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005616:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
1000561a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000561e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005622:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10005626:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000562a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
1000562e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005632:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005636:	6a63      	ldr	r3, [r4, #36]	; 0x24
10005638:	2b02      	cmp	r3, #2
1000563a:	d043      	beq.n	100056c4 <RCCEx_PLL2_Config+0x1c0>
          __HAL_RCC_PLL2_SSMODE_DISABLE();
1000563c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005640:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
10005644:	f023 0304 	bic.w	r3, r3, #4
10005648:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        __HAL_RCC_PLL2_ENABLE();
1000564c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005650:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
10005654:	f043 0301 	orr.w	r3, r3, #1
10005658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        tickstart = HAL_GetTick();
1000565c:	f7fc f9ec 	bl	10001a38 <HAL_GetTick>
10005660:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10005662:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000566a:	f013 0f02 	tst.w	r3, #2
1000566e:	d142      	bne.n	100056f6 <RCCEx_PLL2_Config+0x1f2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005670:	f7fc f9e2 	bl	10001a38 <HAL_GetTick>
10005674:	1b00      	subs	r0, r0, r4
10005676:	2864      	cmp	r0, #100	; 0x64
10005678:	d9f3      	bls.n	10005662 <RCCEx_PLL2_Config+0x15e>
            return HAL_TIMEOUT;
1000567a:	2003      	movs	r0, #3
1000567c:	e067      	b.n	1000574e <RCCEx_PLL2_Config+0x24a>
        if (__IS_PLL1_IN_USE())
1000567e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005682:	6a1b      	ldr	r3, [r3, #32]
10005684:	2b00      	cmp	r3, #0
10005686:	da88      	bge.n	1000559a <RCCEx_PLL2_Config+0x96>
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10005688:	6862      	ldr	r2, [r4, #4]
1000568a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005690:	f003 0303 	and.w	r3, r3, #3
10005694:	429a      	cmp	r2, r3
10005696:	d08f      	beq.n	100055b8 <RCCEx_PLL2_Config+0xb4>
            return HAL_ERROR;
10005698:	2001      	movs	r0, #1
1000569a:	e058      	b.n	1000574e <RCCEx_PLL2_Config+0x24a>
        if (__IS_PLL1_IN_USE())
1000569c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056a0:	6a1b      	ldr	r3, [r3, #32]
100056a2:	2b00      	cmp	r3, #0
100056a4:	da80      	bge.n	100055a8 <RCCEx_PLL2_Config+0xa4>
100056a6:	e7ef      	b.n	10005688 <RCCEx_PLL2_Config+0x184>
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
100056a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100056ac:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
100056b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100056b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100056b8:	6a21      	ldr	r1, [r4, #32]
100056ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
100056be:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
100056c2:	e7b0      	b.n	10005626 <RCCEx_PLL2_Config+0x122>
          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
100056c4:	4611      	mov	r1, r2
100056c6:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
100056ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
100056ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
100056d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
100056d2:	4303      	orrs	r3, r0
100056d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
100056d6:	4303      	orrs	r3, r0
100056d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
100056da:	4303      	orrs	r3, r0
100056dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
100056de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
100056e2:	4313      	orrs	r3, r2
100056e4:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100056e8:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
100056ec:	f043 0304 	orr.w	r3, r3, #4
100056f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
100056f4:	e7aa      	b.n	1000564c <RCCEx_PLL2_Config+0x148>
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100056f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100056fa:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
100056fe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  return HAL_OK;
10005706:	2000      	movs	r0, #0
10005708:	e021      	b.n	1000574e <RCCEx_PLL2_Config+0x24a>
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000570a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000570e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
10005712:	f022 0270 	bic.w	r2, r2, #112	; 0x70
10005716:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        __HAL_RCC_PLL2_DISABLE();
1000571a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
1000571e:	f022 0201 	bic.w	r2, r2, #1
10005722:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        tickstart = HAL_GetTick();
10005726:	f7fc f987 	bl	10001a38 <HAL_GetTick>
1000572a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000572c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10005734:	f013 0f02 	tst.w	r3, #2
10005738:	d006      	beq.n	10005748 <RCCEx_PLL2_Config+0x244>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000573a:	f7fc f97d 	bl	10001a38 <HAL_GetTick>
1000573e:	1b00      	subs	r0, r0, r4
10005740:	2864      	cmp	r0, #100	; 0x64
10005742:	d9f3      	bls.n	1000572c <RCCEx_PLL2_Config+0x228>
            return HAL_TIMEOUT;
10005744:	2003      	movs	r0, #3
10005746:	e002      	b.n	1000574e <RCCEx_PLL2_Config+0x24a>
  return HAL_OK;
10005748:	2000      	movs	r0, #0
1000574a:	e000      	b.n	1000574e <RCCEx_PLL2_Config+0x24a>
1000574c:	2000      	movs	r0, #0

}
1000574e:	bd38      	pop	{r3, r4, r5, pc}
          return HAL_ERROR;
10005750:	2001      	movs	r0, #1
10005752:	e7fc      	b.n	1000574e <RCCEx_PLL2_Config+0x24a>
10005754:	ffc0fe00 	.word	0xffc0fe00

10005758 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10005758:	b538      	push	{r3, r4, r5, lr}

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
1000575a:	6803      	ldr	r3, [r0, #0]
1000575c:	2b00      	cmp	r3, #0
1000575e:	f000 8104 	beq.w	1000596a <RCCEx_PLL3_Config+0x212>
10005762:	4604      	mov	r4, r0
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10005764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005768:	6c92      	ldr	r2, [r2, #72]	; 0x48
1000576a:	f002 0203 	and.w	r2, r2, #3
1000576e:	2a03      	cmp	r2, #3
10005770:	d021      	beq.n	100057b6 <RCCEx_PLL3_Config+0x5e>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10005772:	2b02      	cmp	r3, #2
10005774:	d026      	beq.n	100057c4 <RCCEx_PLL3_Config+0x6c>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10005776:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000577a:	f8d3 2880 	ldr.w	r2, [r3, #2176]	; 0x880
1000577e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
10005782:	f8c3 2880 	str.w	r2, [r3, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10005786:	f8d3 2880 	ldr.w	r2, [r3, #2176]	; 0x880
1000578a:	f022 0201 	bic.w	r2, r2, #1
1000578e:	f8c3 2880 	str.w	r2, [r3, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10005792:	f7fc f951 	bl	10001a38 <HAL_GetTick>
10005796:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10005798:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000579c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100057a0:	f013 0f02 	tst.w	r3, #2
100057a4:	f000 80df 	beq.w	10005966 <RCCEx_PLL3_Config+0x20e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100057a8:	f7fc f946 	bl	10001a38 <HAL_GetTick>
100057ac:	1b00      	subs	r0, r0, r4
100057ae:	2864      	cmp	r0, #100	; 0x64
100057b0:	d9f2      	bls.n	10005798 <RCCEx_PLL3_Config+0x40>
          {
            return HAL_TIMEOUT;
100057b2:	2003      	movs	r0, #3
100057b4:	e0da      	b.n	1000596c <RCCEx_PLL3_Config+0x214>
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100057b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100057ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
100057bc:	2a00      	cmp	r2, #0
100057be:	dad8      	bge.n	10005772 <RCCEx_PLL3_Config+0x1a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100057c0:	2001      	movs	r0, #1
100057c2:	e0d3      	b.n	1000596c <RCCEx_PLL3_Config+0x214>
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100057c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057c8:	f8d3 2880 	ldr.w	r2, [r3, #2176]	; 0x880
100057cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
100057d0:	f8c3 2880 	str.w	r2, [r3, #2176]	; 0x880
        __HAL_RCC_PLL3_DISABLE();
100057d4:	f8d3 2880 	ldr.w	r2, [r3, #2176]	; 0x880
100057d8:	f022 0201 	bic.w	r2, r2, #1
100057dc:	f8c3 2880 	str.w	r2, [r3, #2176]	; 0x880
        tickstart = HAL_GetTick();
100057e0:	f7fc f92a 	bl	10001a38 <HAL_GetTick>
100057e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100057e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100057ea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100057ee:	f013 0f02 	tst.w	r3, #2
100057f2:	d006      	beq.n	10005802 <RCCEx_PLL3_Config+0xaa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100057f4:	f7fc f920 	bl	10001a38 <HAL_GetTick>
100057f8:	1b43      	subs	r3, r0, r5
100057fa:	2b64      	cmp	r3, #100	; 0x64
100057fc:	d9f3      	bls.n	100057e6 <RCCEx_PLL3_Config+0x8e>
            return HAL_TIMEOUT;
100057fe:	2003      	movs	r0, #3
10005800:	e0b4      	b.n	1000596c <RCCEx_PLL3_Config+0x214>
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10005802:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005806:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
1000580a:	f023 0303 	bic.w	r3, r3, #3
1000580e:	6861      	ldr	r1, [r4, #4]
10005810:	430b      	orrs	r3, r1
10005812:	f8c2 3820 	str.w	r3, [r2, #2080]	; 0x820
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10005816:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000581a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000581e:	2b00      	cmp	r3, #0
10005820:	db06      	blt.n	10005830 <RCCEx_PLL3_Config+0xd8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005822:	f7fc f909 	bl	10001a38 <HAL_GetTick>
10005826:	1b40      	subs	r0, r0, r5
10005828:	2864      	cmp	r0, #100	; 0x64
1000582a:	d9f4      	bls.n	10005816 <RCCEx_PLL3_Config+0xbe>
            return HAL_TIMEOUT;
1000582c:	2003      	movs	r0, #3
1000582e:	e09d      	b.n	1000596c <RCCEx_PLL3_Config+0x214>
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10005830:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005834:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10005838:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
1000583c:	69e1      	ldr	r1, [r4, #28]
1000583e:	430a      	orrs	r2, r1
10005840:	f8c3 2884 	str.w	r2, [r3, #2180]	; 0x884
        __HAL_RCC_PLL3_CONFIG(
10005844:	f8d3 1884 	ldr.w	r1, [r3, #2180]	; 0x884
10005848:	4a49      	ldr	r2, [pc, #292]	; (10005970 <RCCEx_PLL3_Config+0x218>)
1000584a:	400a      	ands	r2, r1
1000584c:	68e1      	ldr	r1, [r4, #12]
1000584e:	3901      	subs	r1, #1
10005850:	68a0      	ldr	r0, [r4, #8]
10005852:	3801      	subs	r0, #1
10005854:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
10005858:	430a      	orrs	r2, r1
1000585a:	f8c3 2884 	str.w	r2, [r3, #2180]	; 0x884
1000585e:	f8d3 2888 	ldr.w	r2, [r3, #2184]	; 0x888
10005862:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
10005866:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
1000586a:	6921      	ldr	r1, [r4, #16]
1000586c:	3901      	subs	r1, #1
1000586e:	6960      	ldr	r0, [r4, #20]
10005870:	3801      	subs	r0, #1
10005872:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
10005876:	69a0      	ldr	r0, [r4, #24]
10005878:	3801      	subs	r0, #1
1000587a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1000587e:	430a      	orrs	r2, r1
10005880:	f8c3 2888 	str.w	r2, [r3, #2184]	; 0x888
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10005884:	f8d3 288c 	ldr.w	r2, [r3, #2188]	; 0x88c
10005888:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
1000588c:	f8c3 288c 	str.w	r2, [r3, #2188]	; 0x88c
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10005890:	6a63      	ldr	r3, [r4, #36]	; 0x24
10005892:	2b02      	cmp	r3, #2
10005894:	d000      	beq.n	10005898 <RCCEx_PLL3_Config+0x140>
10005896:	bbab      	cbnz	r3, 10005904 <RCCEx_PLL3_Config+0x1ac>
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10005898:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000589c:	f8d2 388c 	ldr.w	r3, [r2, #2188]	; 0x88c
100058a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100058a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100058a8:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
100058ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100058b0:	f8d2 388c 	ldr.w	r3, [r2, #2188]	; 0x88c
100058b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100058b8:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100058bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
100058be:	2b02      	cmp	r3, #2
100058c0:	d02e      	beq.n	10005920 <RCCEx_PLL3_Config+0x1c8>
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100058c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100058c6:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
100058ca:	f023 0304 	bic.w	r3, r3, #4
100058ce:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        __HAL_RCC_PLL3_ENABLE();
100058d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100058d6:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
100058da:	f043 0301 	orr.w	r3, r3, #1
100058de:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        tickstart = HAL_GetTick();
100058e2:	f7fc f8a9 	bl	10001a38 <HAL_GetTick>
100058e6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100058e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058ec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100058f0:	f013 0f02 	tst.w	r3, #2
100058f4:	d12d      	bne.n	10005952 <RCCEx_PLL3_Config+0x1fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100058f6:	f7fc f89f 	bl	10001a38 <HAL_GetTick>
100058fa:	1b00      	subs	r0, r0, r4
100058fc:	2864      	cmp	r0, #100	; 0x64
100058fe:	d9f3      	bls.n	100058e8 <RCCEx_PLL3_Config+0x190>
            return HAL_TIMEOUT;
10005900:	2003      	movs	r0, #3
10005902:	e033      	b.n	1000596c <RCCEx_PLL3_Config+0x214>
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10005904:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005908:	f8d2 388c 	ldr.w	r3, [r2, #2188]	; 0x88c
1000590c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005910:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005914:	6a21      	ldr	r1, [r4, #32]
10005916:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
1000591a:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
1000591e:	e7c5      	b.n	100058ac <RCCEx_PLL3_Config+0x154>
          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10005920:	4611      	mov	r1, r2
10005922:	f8d2 2890 	ldr.w	r2, [r2, #2192]	; 0x890
10005926:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
1000592a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1000592c:	6b20      	ldr	r0, [r4, #48]	; 0x30
1000592e:	4303      	orrs	r3, r0
10005930:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
10005932:	4303      	orrs	r3, r0
10005934:	6b60      	ldr	r0, [r4, #52]	; 0x34
10005936:	4303      	orrs	r3, r0
10005938:	6ba0      	ldr	r0, [r4, #56]	; 0x38
1000593a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1000593e:	4313      	orrs	r3, r2
10005940:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10005944:	f8d1 3880 	ldr.w	r3, [r1, #2176]	; 0x880
10005948:	f043 0304 	orr.w	r3, r3, #4
1000594c:	f8c1 3880 	str.w	r3, [r1, #2176]	; 0x880
10005950:	e7bf      	b.n	100058d2 <RCCEx_PLL3_Config+0x17a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10005952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005956:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
1000595a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000595e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }
  }
  return HAL_OK;
10005962:	2000      	movs	r0, #0
10005964:	e002      	b.n	1000596c <RCCEx_PLL3_Config+0x214>
10005966:	2000      	movs	r0, #0
10005968:	e000      	b.n	1000596c <RCCEx_PLL3_Config+0x214>
1000596a:	2000      	movs	r0, #0
}
1000596c:	bd38      	pop	{r3, r4, r5, pc}
1000596e:	bf00      	nop
10005970:	ffc0fe00 	.word	0xffc0fe00

10005974 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10005974:	b538      	push	{r3, r4, r5, lr}

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10005976:	6803      	ldr	r3, [r0, #0]
10005978:	2b00      	cmp	r3, #0
1000597a:	f000 80f6 	beq.w	10005b6a <RCCEx_PLL4_Config+0x1f6>
1000597e:	4604      	mov	r4, r0
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10005980:	2b02      	cmp	r3, #2
10005982:	d01f      	beq.n	100059c4 <RCCEx_PLL4_Config+0x50>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005984:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005988:	f8d3 2894 	ldr.w	r2, [r3, #2196]	; 0x894
1000598c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
10005990:	f8c3 2894 	str.w	r2, [r3, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10005994:	f8d3 2894 	ldr.w	r2, [r3, #2196]	; 0x894
10005998:	f022 0201 	bic.w	r2, r2, #1
1000599c:	f8c3 2894 	str.w	r2, [r3, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100059a0:	f7fc f84a 	bl	10001a38 <HAL_GetTick>
100059a4:	4604      	mov	r4, r0

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100059a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059aa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100059ae:	f013 0f02 	tst.w	r3, #2
100059b2:	f000 80d8 	beq.w	10005b66 <RCCEx_PLL4_Config+0x1f2>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100059b6:	f7fc f83f 	bl	10001a38 <HAL_GetTick>
100059ba:	1b00      	subs	r0, r0, r4
100059bc:	2864      	cmp	r0, #100	; 0x64
100059be:	d9f2      	bls.n	100059a6 <RCCEx_PLL4_Config+0x32>
        {
          return HAL_TIMEOUT;
100059c0:	2003      	movs	r0, #3
100059c2:	e0d3      	b.n	10005b6c <RCCEx_PLL4_Config+0x1f8>
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100059c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059c8:	f8d3 2894 	ldr.w	r2, [r3, #2196]	; 0x894
100059cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
100059d0:	f8c3 2894 	str.w	r2, [r3, #2196]	; 0x894
      __HAL_RCC_PLL4_DISABLE();
100059d4:	f8d3 2894 	ldr.w	r2, [r3, #2196]	; 0x894
100059d8:	f022 0201 	bic.w	r2, r2, #1
100059dc:	f8c3 2894 	str.w	r2, [r3, #2196]	; 0x894
      tickstart = HAL_GetTick();
100059e0:	f7fc f82a 	bl	10001a38 <HAL_GetTick>
100059e4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
100059e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059ea:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100059ee:	f013 0f02 	tst.w	r3, #2
100059f2:	d006      	beq.n	10005a02 <RCCEx_PLL4_Config+0x8e>
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100059f4:	f7fc f820 	bl	10001a38 <HAL_GetTick>
100059f8:	1b43      	subs	r3, r0, r5
100059fa:	2b64      	cmp	r3, #100	; 0x64
100059fc:	d9f3      	bls.n	100059e6 <RCCEx_PLL4_Config+0x72>
          return HAL_TIMEOUT;
100059fe:	2003      	movs	r0, #3
10005a00:	e0b4      	b.n	10005b6c <RCCEx_PLL4_Config+0x1f8>
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10005a02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a06:	f8d2 3824 	ldr.w	r3, [r2, #2084]	; 0x824
10005a0a:	f023 0303 	bic.w	r3, r3, #3
10005a0e:	6861      	ldr	r1, [r4, #4]
10005a10:	430b      	orrs	r3, r1
10005a12:	f8c2 3824 	str.w	r3, [r2, #2084]	; 0x824
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10005a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a1a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10005a1e:	2b00      	cmp	r3, #0
10005a20:	db06      	blt.n	10005a30 <RCCEx_PLL4_Config+0xbc>
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005a22:	f7fc f809 	bl	10001a38 <HAL_GetTick>
10005a26:	1b40      	subs	r0, r0, r5
10005a28:	2864      	cmp	r0, #100	; 0x64
10005a2a:	d9f4      	bls.n	10005a16 <RCCEx_PLL4_Config+0xa2>
          return HAL_TIMEOUT;
10005a2c:	2003      	movs	r0, #3
10005a2e:	e09d      	b.n	10005b6c <RCCEx_PLL4_Config+0x1f8>
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10005a30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a34:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10005a38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
10005a3c:	69e1      	ldr	r1, [r4, #28]
10005a3e:	430a      	orrs	r2, r1
10005a40:	f8c3 2898 	str.w	r2, [r3, #2200]	; 0x898
      __HAL_RCC_PLL4_CONFIG(
10005a44:	f8d3 1898 	ldr.w	r1, [r3, #2200]	; 0x898
10005a48:	4a49      	ldr	r2, [pc, #292]	; (10005b70 <RCCEx_PLL4_Config+0x1fc>)
10005a4a:	400a      	ands	r2, r1
10005a4c:	68e1      	ldr	r1, [r4, #12]
10005a4e:	3901      	subs	r1, #1
10005a50:	68a0      	ldr	r0, [r4, #8]
10005a52:	3801      	subs	r0, #1
10005a54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
10005a58:	430a      	orrs	r2, r1
10005a5a:	f8c3 2898 	str.w	r2, [r3, #2200]	; 0x898
10005a5e:	f8d3 289c 	ldr.w	r2, [r3, #2204]	; 0x89c
10005a62:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
10005a66:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
10005a6a:	6921      	ldr	r1, [r4, #16]
10005a6c:	3901      	subs	r1, #1
10005a6e:	6960      	ldr	r0, [r4, #20]
10005a70:	3801      	subs	r0, #1
10005a72:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
10005a76:	69a0      	ldr	r0, [r4, #24]
10005a78:	3801      	subs	r0, #1
10005a7a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
10005a7e:	430a      	orrs	r2, r1
10005a80:	f8c3 289c 	str.w	r2, [r3, #2204]	; 0x89c
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10005a84:	f8d3 28a0 	ldr.w	r2, [r3, #2208]	; 0x8a0
10005a88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
10005a8c:	f8c3 28a0 	str.w	r2, [r3, #2208]	; 0x8a0
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10005a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
10005a92:	2b02      	cmp	r3, #2
10005a94:	d000      	beq.n	10005a98 <RCCEx_PLL4_Config+0x124>
10005a96:	bbab      	cbnz	r3, 10005b04 <RCCEx_PLL4_Config+0x190>
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10005a98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005a9c:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	; 0x8a0
10005aa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005aa4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005aa8:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10005aac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ab0:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	; 0x8a0
10005ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10005ab8:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10005abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
10005abe:	2b02      	cmp	r3, #2
10005ac0:	d02e      	beq.n	10005b20 <RCCEx_PLL4_Config+0x1ac>
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10005ac2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ac6:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10005aca:	f023 0304 	bic.w	r3, r3, #4
10005ace:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      __HAL_RCC_PLL4_ENABLE();
10005ad2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ad6:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10005ada:	f043 0301 	orr.w	r3, r3, #1
10005ade:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      tickstart = HAL_GetTick();
10005ae2:	f7fb ffa9 	bl	10001a38 <HAL_GetTick>
10005ae6:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10005ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005aec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005af0:	f013 0f02 	tst.w	r3, #2
10005af4:	d12d      	bne.n	10005b52 <RCCEx_PLL4_Config+0x1de>
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10005af6:	f7fb ff9f 	bl	10001a38 <HAL_GetTick>
10005afa:	1b00      	subs	r0, r0, r4
10005afc:	2864      	cmp	r0, #100	; 0x64
10005afe:	d9f3      	bls.n	10005ae8 <RCCEx_PLL4_Config+0x174>
          return HAL_TIMEOUT;
10005b00:	2003      	movs	r0, #3
10005b02:	e033      	b.n	10005b6c <RCCEx_PLL4_Config+0x1f8>
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10005b04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b08:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	; 0x8a0
10005b0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10005b10:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10005b14:	6a21      	ldr	r1, [r4, #32]
10005b16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
10005b1a:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10005b1e:	e7c5      	b.n	10005aac <RCCEx_PLL4_Config+0x138>
        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10005b20:	4611      	mov	r1, r2
10005b22:	f8d2 28a4 	ldr.w	r2, [r2, #2212]	; 0x8a4
10005b26:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
10005b2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10005b2c:	6b20      	ldr	r0, [r4, #48]	; 0x30
10005b2e:	4303      	orrs	r3, r0
10005b30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
10005b32:	4303      	orrs	r3, r0
10005b34:	6b60      	ldr	r0, [r4, #52]	; 0x34
10005b36:	4303      	orrs	r3, r0
10005b38:	6ba0      	ldr	r0, [r4, #56]	; 0x38
10005b3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
10005b3e:	4313      	orrs	r3, r2
10005b40:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10005b44:	f8d1 3894 	ldr.w	r3, [r1, #2196]	; 0x894
10005b48:	f043 0304 	orr.w	r3, r3, #4
10005b4c:	f8c1 3894 	str.w	r3, [r1, #2196]	; 0x894
10005b50:	e7bf      	b.n	10005ad2 <RCCEx_PLL4_Config+0x15e>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10005b52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b56:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10005b5a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10005b5e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        }
      }
    }
  }
  return HAL_OK;
10005b62:	2000      	movs	r0, #0
10005b64:	e002      	b.n	10005b6c <RCCEx_PLL4_Config+0x1f8>
10005b66:	2000      	movs	r0, #0
10005b68:	e000      	b.n	10005b6c <RCCEx_PLL4_Config+0x1f8>
10005b6a:	2000      	movs	r0, #0
}
10005b6c:	bd38      	pop	{r3, r4, r5, pc}
10005b6e:	bf00      	nop
10005b70:	ffc0fe00 	.word	0xffc0fe00

10005b74 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10005b74:	b570      	push	{r4, r5, r6, lr}
10005b76:	b0c6      	sub	sp, #280	; 0x118
10005b78:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10005b7a:	6803      	ldr	r3, [r0, #0]
10005b7c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
10005b80:	d00a      	beq.n	10005b98 <HAL_RCCEx_PeriphCLKConfig+0x24>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10005b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005b86:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
10005b8a:	f023 0303 	bic.w	r3, r3, #3
10005b8e:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
10005b92:	430b      	orrs	r3, r1
10005b94:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10005b98:	6823      	ldr	r3, [r4, #0]
10005b9a:	f013 0f10 	tst.w	r3, #16
10005b9e:	d00f      	beq.n	10005bc0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10005ba0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
10005ba4:	2b01      	cmp	r3, #1
10005ba6:	f000 830d 	beq.w	100061c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
        return status;
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10005baa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005bae:	f8d2 38c0 	ldr.w	r3, [r2, #2240]	; 0x8c0
10005bb2:	f023 0307 	bic.w	r3, r3, #7
10005bb6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
10005bba:	430b      	orrs	r3, r1
10005bbc:	f8c2 38c0 	str.w	r3, [r2, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10005bc0:	6823      	ldr	r3, [r4, #0]
10005bc2:	f013 0f20 	tst.w	r3, #32
10005bc6:	d00f      	beq.n	10005be8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10005bc8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
10005bcc:	2b01      	cmp	r3, #1
10005bce:	f000 8309 	beq.w	100061e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
        return status;
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10005bd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005bd6:	f8d2 38c4 	ldr.w	r3, [r2, #2244]	; 0x8c4
10005bda:	f023 0307 	bic.w	r3, r3, #7
10005bde:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
10005be2:	430b      	orrs	r3, r1
10005be4:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10005be8:	6863      	ldr	r3, [r4, #4]
10005bea:	f013 0f20 	tst.w	r3, #32
10005bee:	d00f      	beq.n	10005c10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10005bf0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
10005bf4:	2b01      	cmp	r3, #1
10005bf6:	f000 8305 	beq.w	10006204 <HAL_RCCEx_PeriphCLKConfig+0x690>
        return status;
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10005bfa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005bfe:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
10005c02:	f023 0307 	bic.w	r3, r3, #7
10005c06:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
10005c0a:	430b      	orrs	r3, r1
10005c0c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10005c10:	6823      	ldr	r3, [r4, #0]
10005c12:	f013 0f80 	tst.w	r3, #128	; 0x80
10005c16:	d015      	beq.n	10005c44 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10005c18:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
10005c1c:	2b01      	cmp	r3, #1
10005c1e:	f000 8311 	beq.w	10006244 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
10005c22:	2b04      	cmp	r3, #4
10005c24:	f000 831e 	beq.w	10006264 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
10005c28:	2b00      	cmp	r3, #0
10005c2a:	f000 82fb 	beq.w	10006224 <HAL_RCCEx_PeriphCLKConfig+0x6b0>

        break;
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10005c2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c32:	f8d2 38c8 	ldr.w	r3, [r2, #2248]	; 0x8c8
10005c36:	f023 0307 	bic.w	r3, r3, #7
10005c3a:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
10005c3e:	430b      	orrs	r3, r1
10005c40:	f8c2 38c8 	str.w	r3, [r2, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
10005c44:	6823      	ldr	r3, [r4, #0]
10005c46:	f413 7f80 	tst.w	r3, #256	; 0x100
10005c4a:	d015      	beq.n	10005c78 <HAL_RCCEx_PeriphCLKConfig+0x104>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10005c4c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
10005c50:	2b01      	cmp	r3, #1
10005c52:	f000 8327 	beq.w	100062a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
10005c56:	2b05      	cmp	r3, #5
10005c58:	f000 8334 	beq.w	100062c4 <HAL_RCCEx_PeriphCLKConfig+0x750>
10005c5c:	2b00      	cmp	r3, #0
10005c5e:	f000 8311 	beq.w	10006284 <HAL_RCCEx_PeriphCLKConfig+0x710>

        break;
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
10005c62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c66:	f8d2 38cc 	ldr.w	r3, [r2, #2252]	; 0x8cc
10005c6a:	f023 0307 	bic.w	r3, r3, #7
10005c6e:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
10005c72:	430b      	orrs	r3, r1
10005c74:	f8c2 38cc 	str.w	r3, [r2, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
10005c78:	6823      	ldr	r3, [r4, #0]
10005c7a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
10005c7e:	d015      	beq.n	10005cac <HAL_RCCEx_PeriphCLKConfig+0x138>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
10005c80:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
10005c84:	2b01      	cmp	r3, #1
10005c86:	f000 833f 	beq.w	10006308 <HAL_RCCEx_PeriphCLKConfig+0x794>
10005c8a:	2b04      	cmp	r3, #4
10005c8c:	f000 834d 	beq.w	1000632a <HAL_RCCEx_PeriphCLKConfig+0x7b6>
10005c90:	2b00      	cmp	r3, #0
10005c92:	f000 8328 	beq.w	100062e6 <HAL_RCCEx_PeriphCLKConfig+0x772>

        break;
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
10005c96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005c9a:	f8d2 38d0 	ldr.w	r3, [r2, #2256]	; 0x8d0
10005c9e:	f023 0307 	bic.w	r3, r3, #7
10005ca2:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
10005ca6:	430b      	orrs	r3, r1
10005ca8:	f8c2 38d0 	str.w	r3, [r2, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
10005cac:	6823      	ldr	r3, [r4, #0]
10005cae:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
10005cb2:	d015      	beq.n	10005ce0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
10005cb4:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
10005cb8:	2b01      	cmp	r3, #1
10005cba:	f000 8358 	beq.w	1000636e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
10005cbe:	2b04      	cmp	r3, #4
10005cc0:	f000 8366 	beq.w	10006390 <HAL_RCCEx_PeriphCLKConfig+0x81c>
10005cc4:	2b00      	cmp	r3, #0
10005cc6:	f000 8341 	beq.w	1000634c <HAL_RCCEx_PeriphCLKConfig+0x7d8>

        break;
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
10005cca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005cce:	f8d2 38d4 	ldr.w	r3, [r2, #2260]	; 0x8d4
10005cd2:	f023 0307 	bic.w	r3, r3, #7
10005cd6:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
10005cda:	430b      	orrs	r3, r1
10005cdc:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
10005ce0:	6823      	ldr	r3, [r4, #0]
10005ce2:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
10005ce6:	d015      	beq.n	10005d14 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10005ce8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
10005cec:	2b01      	cmp	r3, #1
10005cee:	f000 8371 	beq.w	100063d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
10005cf2:	2b04      	cmp	r3, #4
10005cf4:	f000 837f 	beq.w	100063f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
10005cf8:	2b00      	cmp	r3, #0
10005cfa:	f000 835a 	beq.w	100063b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        break;

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10005cfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d02:	f8d2 38d8 	ldr.w	r3, [r2, #2264]	; 0x8d8
10005d06:	f023 0307 	bic.w	r3, r3, #7
10005d0a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
10005d0e:	430b      	orrs	r3, r1
10005d10:	f8c2 38d8 	str.w	r3, [r2, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
10005d14:	6823      	ldr	r3, [r4, #0]
10005d16:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
10005d1a:	d015      	beq.n	10005d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10005d1c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
10005d20:	2b01      	cmp	r3, #1
10005d22:	f000 838a 	beq.w	1000643a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
10005d26:	2b04      	cmp	r3, #4
10005d28:	f000 8398 	beq.w	1000645c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
10005d2c:	2b00      	cmp	r3, #0
10005d2e:	f000 8373 	beq.w	10006418 <HAL_RCCEx_PeriphCLKConfig+0x8a4>

        break;
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
10005d32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d36:	f8d2 38dc 	ldr.w	r3, [r2, #2268]	; 0x8dc
10005d3a:	f023 0307 	bic.w	r3, r3, #7
10005d3e:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
10005d42:	430b      	orrs	r3, r1
10005d44:	f8c2 38dc 	str.w	r3, [r2, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
10005d48:	6823      	ldr	r3, [r4, #0]
10005d4a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
10005d4e:	d00f      	beq.n	10005d70 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10005d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
10005d54:	2b01      	cmp	r3, #1
10005d56:	f000 8392 	beq.w	1000647e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10005d5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d5e:	f8d2 38e0 	ldr.w	r3, [r2, #2272]	; 0x8e0
10005d62:	f023 0307 	bic.w	r3, r3, #7
10005d66:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
10005d6a:	430b      	orrs	r3, r1
10005d6c:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10005d70:	6823      	ldr	r3, [r4, #0]
10005d72:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
10005d76:	d012      	beq.n	10005d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10005d78:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
10005d7c:	2b01      	cmp	r3, #1
10005d7e:	f000 838f 	beq.w	100064a0 <HAL_RCCEx_PeriphCLKConfig+0x92c>
10005d82:	2b05      	cmp	r3, #5
10005d84:	f000 839d 	beq.w	100064c2 <HAL_RCCEx_PeriphCLKConfig+0x94e>

        break;
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10005d88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005d8c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
10005d90:	f023 0307 	bic.w	r3, r3, #7
10005d94:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
10005d98:	430b      	orrs	r3, r1
10005d9a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10005d9e:	6823      	ldr	r3, [r4, #0]
10005da0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
10005da4:	d00f      	beq.n	10005dc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
10005da6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
10005daa:	2b01      	cmp	r3, #1
10005dac:	f000 839a 	beq.w	100064e4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10005db0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005db4:	f8d2 38e4 	ldr.w	r3, [r2, #2276]	; 0x8e4
10005db8:	f023 0307 	bic.w	r3, r3, #7
10005dbc:	f8d4 10f4 	ldr.w	r1, [r4, #244]	; 0xf4
10005dc0:	430b      	orrs	r3, r1
10005dc2:	f8c2 38e4 	str.w	r3, [r2, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
10005dc6:	6823      	ldr	r3, [r4, #0]
10005dc8:	f013 0f02 	tst.w	r3, #2
10005dcc:	d00f      	beq.n	10005dee <HAL_RCCEx_PeriphCLKConfig+0x27a>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10005dce:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
10005dd2:	2b01      	cmp	r3, #1
10005dd4:	f000 8397 	beq.w	10006506 <HAL_RCCEx_PeriphCLKConfig+0x992>
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
10005dd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ddc:	f8d2 38e8 	ldr.w	r3, [r2, #2280]	; 0x8e8
10005de0:	f023 0307 	bic.w	r3, r3, #7
10005de4:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
10005de8:	430b      	orrs	r3, r1
10005dea:	f8c2 38e8 	str.w	r3, [r2, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
10005dee:	6823      	ldr	r3, [r4, #0]
10005df0:	f013 0f04 	tst.w	r3, #4
10005df4:	d00f      	beq.n	10005e16 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
10005df6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
10005dfa:	2b01      	cmp	r3, #1
10005dfc:	f000 8394 	beq.w	10006528 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10005e00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e04:	f8d2 38ec 	ldr.w	r3, [r2, #2284]	; 0x8ec
10005e08:	f023 0307 	bic.w	r3, r3, #7
10005e0c:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
10005e10:	430b      	orrs	r3, r1
10005e12:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10005e16:	6823      	ldr	r3, [r4, #0]
10005e18:	f413 4f00 	tst.w	r3, #32768	; 0x8000
10005e1c:	d00f      	beq.n	10005e3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10005e1e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
10005e22:	2b01      	cmp	r3, #1
10005e24:	f000 8391 	beq.w	1000654a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10005e28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e2c:	f8d2 38f0 	ldr.w	r3, [r2, #2288]	; 0x8f0
10005e30:	f023 0307 	bic.w	r3, r3, #7
10005e34:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
10005e38:	430b      	orrs	r3, r1
10005e3a:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
10005e3e:	6823      	ldr	r3, [r4, #0]
10005e40:	f013 0f01 	tst.w	r3, #1
10005e44:	d012      	beq.n	10005e6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
10005e46:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
10005e4a:	2b01      	cmp	r3, #1
10005e4c:	f000 838e 	beq.w	1000656c <HAL_RCCEx_PeriphCLKConfig+0x9f8>
10005e50:	2b04      	cmp	r3, #4
10005e52:	f000 839c 	beq.w	1000658e <HAL_RCCEx_PeriphCLKConfig+0xa1a>

        break;
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
10005e56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e5a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
10005e5e:	f023 0307 	bic.w	r3, r3, #7
10005e62:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
10005e66:	430b      	orrs	r3, r1
10005e68:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
10005e6c:	6823      	ldr	r3, [r4, #0]
10005e6e:	2b00      	cmp	r3, #0
10005e70:	da12      	bge.n	10005e98 <HAL_RCCEx_PeriphCLKConfig+0x324>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10005e72:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
10005e76:	2b01      	cmp	r3, #1
10005e78:	f000 839a 	beq.w	100065b0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
10005e7c:	2b02      	cmp	r3, #2
10005e7e:	f000 83a8 	beq.w	100065d2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>

        break;
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10005e82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005e86:	f8d2 38f4 	ldr.w	r3, [r2, #2292]	; 0x8f4
10005e8a:	f023 0307 	bic.w	r3, r3, #7
10005e8e:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
10005e92:	430b      	orrs	r3, r1
10005e94:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10005e98:	6863      	ldr	r3, [r4, #4]
10005e9a:	f013 0f01 	tst.w	r3, #1
10005e9e:	d012      	beq.n	10005ec6 <HAL_RCCEx_PeriphCLKConfig+0x352>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10005ea0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
10005ea4:	2b01      	cmp	r3, #1
10005ea6:	f000 83a5 	beq.w	100065f4 <HAL_RCCEx_PeriphCLKConfig+0xa80>
10005eaa:	2b02      	cmp	r3, #2
10005eac:	f000 83b3 	beq.w	10006616 <HAL_RCCEx_PeriphCLKConfig+0xaa2>

        break;
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10005eb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005eb4:	f8d2 38f8 	ldr.w	r3, [r2, #2296]	; 0x8f8
10005eb8:	f023 0307 	bic.w	r3, r3, #7
10005ebc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
10005ec0:	430b      	orrs	r3, r1
10005ec2:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10005ec6:	6863      	ldr	r3, [r4, #4]
10005ec8:	f013 0f02 	tst.w	r3, #2
10005ecc:	d012      	beq.n	10005ef4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10005ece:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
10005ed2:	2b00      	cmp	r3, #0
10005ed4:	f000 83b0 	beq.w	10006638 <HAL_RCCEx_PeriphCLKConfig+0xac4>
10005ed8:	2b01      	cmp	r3, #1
10005eda:	f000 83be 	beq.w	1000665a <HAL_RCCEx_PeriphCLKConfig+0xae6>

        break;
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10005ede:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005ee2:	f8d2 38fc 	ldr.w	r3, [r2, #2300]	; 0x8fc
10005ee6:	f023 0303 	bic.w	r3, r3, #3
10005eea:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
10005eee:	430b      	orrs	r3, r1
10005ef0:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10005ef4:	6823      	ldr	r3, [r4, #0]
10005ef6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
10005efa:	d012      	beq.n	10005f22 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10005efc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
10005f00:	2b01      	cmp	r3, #1
10005f02:	f000 83bb 	beq.w	1000667c <HAL_RCCEx_PeriphCLKConfig+0xb08>
10005f06:	2b02      	cmp	r3, #2
10005f08:	f000 83c9 	beq.w	1000669e <HAL_RCCEx_PeriphCLKConfig+0xb2a>

        break;
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10005f0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f10:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
10005f14:	f023 0303 	bic.w	r3, r3, #3
10005f18:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
10005f1c:	430b      	orrs	r3, r1
10005f1e:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10005f22:	6823      	ldr	r3, [r4, #0]
10005f24:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
10005f28:	d012      	beq.n	10005f50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10005f2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
10005f2e:	2b01      	cmp	r3, #1
10005f30:	f000 83c6 	beq.w	100066c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
10005f34:	2b02      	cmp	r3, #2
10005f36:	f000 83d4 	beq.w	100066e2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

        break;
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10005f3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f3e:	f8d2 3904 	ldr.w	r3, [r2, #2308]	; 0x904
10005f42:	f023 0303 	bic.w	r3, r3, #3
10005f46:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
10005f4a:	430b      	orrs	r3, r1
10005f4c:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10005f50:	6823      	ldr	r3, [r4, #0]
10005f52:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
10005f56:	d015      	beq.n	10005f84 <HAL_RCCEx_PeriphCLKConfig+0x410>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10005f58:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
10005f5c:	2b02      	cmp	r3, #2
10005f5e:	f000 83e2 	beq.w	10006726 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
10005f62:	2b03      	cmp	r3, #3
10005f64:	f000 83f0 	beq.w	10006748 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
10005f68:	2b01      	cmp	r3, #1
10005f6a:	f000 83cb 	beq.w	10006704 <HAL_RCCEx_PeriphCLKConfig+0xb90>

        break;
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10005f6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005f72:	f8d2 390c 	ldr.w	r3, [r2, #2316]	; 0x90c
10005f76:	f023 0303 	bic.w	r3, r3, #3
10005f7a:	f8d4 111c 	ldr.w	r1, [r4, #284]	; 0x11c
10005f7e:	430b      	orrs	r3, r1
10005f80:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10005f84:	6823      	ldr	r3, [r4, #0]
10005f86:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
10005f8a:	d012      	beq.n	10005fb2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10005f8c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
10005f90:	2b00      	cmp	r3, #0
10005f92:	f000 83ea 	beq.w	1000676a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
10005f96:	2b01      	cmp	r3, #1
10005f98:	f000 83f8 	beq.w	1000678c <HAL_RCCEx_PeriphCLKConfig+0xc18>

        break;
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10005f9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005fa0:	f8d2 3914 	ldr.w	r3, [r2, #2324]	; 0x914
10005fa4:	f023 0303 	bic.w	r3, r3, #3
10005fa8:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
10005fac:	430b      	orrs	r3, r1
10005fae:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10005fb2:	6823      	ldr	r3, [r4, #0]
10005fb4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
10005fb8:	d00a      	beq.n	10005fd0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10005fba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005fbe:	f8d2 3918 	ldr.w	r3, [r2, #2328]	; 0x918
10005fc2:	f023 0303 	bic.w	r3, r3, #3
10005fc6:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
10005fca:	430b      	orrs	r3, r1
10005fcc:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10005fd0:	6823      	ldr	r3, [r4, #0]
10005fd2:	f413 7f00 	tst.w	r3, #512	; 0x200
10005fd6:	d00f      	beq.n	10005ff8 <HAL_RCCEx_PeriphCLKConfig+0x484>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10005fd8:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
10005fdc:	2b01      	cmp	r3, #1
10005fde:	f000 83e7 	beq.w	100067b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10005fe2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005fe6:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
10005fea:	f023 0303 	bic.w	r3, r3, #3
10005fee:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
10005ff2:	430b      	orrs	r3, r1
10005ff4:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10005ff8:	6823      	ldr	r3, [r4, #0]
10005ffa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
10005ffe:	d00f      	beq.n	10006020 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10006000:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
10006004:	2b00      	cmp	r3, #0
10006006:	f000 83e4 	beq.w	100067d2 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
1000600a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000600e:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
10006012:	f023 0310 	bic.w	r3, r3, #16
10006016:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
1000601a:	430b      	orrs	r3, r1
1000601c:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10006020:	6863      	ldr	r3, [r4, #4]
10006022:	f013 0f04 	tst.w	r3, #4
10006026:	d00f      	beq.n	10006048 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10006028:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
1000602c:	2b01      	cmp	r3, #1
1000602e:	f000 83e1 	beq.w	100067f4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10006032:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006036:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
1000603a:	f023 0303 	bic.w	r3, r3, #3
1000603e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
10006042:	430b      	orrs	r3, r1
10006044:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10006048:	6863      	ldr	r3, [r4, #4]
1000604a:	f013 0f08 	tst.w	r3, #8
1000604e:	d00f      	beq.n	10006070 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10006050:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
10006054:	2b01      	cmp	r3, #1
10006056:	f000 83de 	beq.w	10006816 <HAL_RCCEx_PeriphCLKConfig+0xca2>
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
1000605a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000605e:	f8d2 3920 	ldr.w	r3, [r2, #2336]	; 0x920
10006062:	f023 0303 	bic.w	r3, r3, #3
10006066:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
1000606a:	430b      	orrs	r3, r1
1000606c:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
10006070:	6863      	ldr	r3, [r4, #4]
10006072:	f013 0f10 	tst.w	r3, #16
10006076:	d00a      	beq.n	1000608e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
10006078:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000607c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
10006080:	f023 0303 	bic.w	r3, r3, #3
10006084:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
10006088:	430b      	orrs	r3, r1
1000608a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
1000608e:	6823      	ldr	r3, [r4, #0]
10006090:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
10006094:	d00f      	beq.n	100060b6 <HAL_RCCEx_PeriphCLKConfig+0x542>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
10006096:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
1000609a:	2b01      	cmp	r3, #1
1000609c:	f000 83cc 	beq.w	10006838 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
100060a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100060a4:	f8d2 3924 	ldr.w	r3, [r2, #2340]	; 0x924
100060a8:	f023 0301 	bic.w	r3, r3, #1
100060ac:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
100060b0:	430b      	orrs	r3, r1
100060b2:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
100060b6:	6823      	ldr	r3, [r4, #0]
100060b8:	f013 0f08 	tst.w	r3, #8
100060bc:	d012      	beq.n	100060e4 <HAL_RCCEx_PeriphCLKConfig+0x570>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
100060be:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
100060c2:	2b00      	cmp	r3, #0
100060c4:	f000 83c9 	beq.w	1000685a <HAL_RCCEx_PeriphCLKConfig+0xce6>
100060c8:	2b02      	cmp	r3, #2
100060ca:	f000 83d7 	beq.w	1000687c <HAL_RCCEx_PeriphCLKConfig+0xd08>

        break;
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
100060ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100060d2:	f8d2 3928 	ldr.w	r3, [r2, #2344]	; 0x928
100060d6:	f023 0303 	bic.w	r3, r3, #3
100060da:	f8d4 1144 	ldr.w	r1, [r4, #324]	; 0x144
100060de:	430b      	orrs	r3, r1
100060e0:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
100060e4:	6823      	ldr	r3, [r4, #0]
100060e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
100060ea:	d020      	beq.n	1000612e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
100060ec:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
100060f0:	2b01      	cmp	r3, #1
100060f2:	f000 83d4 	beq.w	1000689e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
100060f6:	2b02      	cmp	r3, #2
100060f8:	d10e      	bne.n	10006118 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100060fa:	f104 0044 	add.w	r0, r4, #68	; 0x44
100060fe:	f7ff fb2b 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006102:	4605      	mov	r5, r0
10006104:	2800      	cmp	r0, #0
10006106:	d15a      	bne.n	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        {
          return status;
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000610c:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006110:	f043 0320 	orr.w	r3, r3, #32
10006114:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10006118:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000611c:	f8d2 392c 	ldr.w	r3, [r2, #2348]	; 0x92c
10006120:	f023 0307 	bic.w	r3, r3, #7
10006124:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
10006128:	430b      	orrs	r3, r1
1000612a:	f8c2 392c 	str.w	r3, [r2, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
1000612e:	6823      	ldr	r3, [r4, #0]
10006130:	f413 3f80 	tst.w	r3, #65536	; 0x10000
10006134:	d00f      	beq.n	10006156 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
10006136:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
1000613a:	2b01      	cmp	r3, #1
1000613c:	f000 83c0 	beq.w	100068c0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
10006140:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006144:	f8d2 3930 	ldr.w	r3, [r2, #2352]	; 0x930
10006148:	f023 0307 	bic.w	r3, r3, #7
1000614c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
10006150:	430b      	orrs	r3, r1
10006152:	f8c2 3930 	str.w	r3, [r2, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
10006156:	6823      	ldr	r3, [r4, #0]
10006158:	f013 0f40 	tst.w	r3, #64	; 0x40
1000615c:	d01f      	beq.n	1000619e <HAL_RCCEx_PeriphCLKConfig+0x62a>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
1000615e:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
10006162:	2b01      	cmp	r3, #1
10006164:	f000 83bd 	beq.w	100068e2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
10006168:	2b02      	cmp	r3, #2
1000616a:	d10d      	bne.n	10006188 <HAL_RCCEx_PeriphCLKConfig+0x614>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000616c:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006170:	f7ff faf2 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006174:	4605      	mov	r5, r0
10006176:	bb10      	cbnz	r0, 100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        {
          return status;
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006178:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000617c:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006180:	f043 0320 	orr.w	r3, r3, #32
10006184:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10006188:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000618c:	f8d2 3934 	ldr.w	r3, [r2, #2356]	; 0x934
10006190:	f023 0307 	bic.w	r3, r3, #7
10006194:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
10006198:	430b      	orrs	r3, r1
1000619a:	f8c2 3934 	str.w	r3, [r2, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
1000619e:	6823      	ldr	r3, [r4, #0]
100061a0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
100061a4:	f040 83ae 	bne.w	10006904 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      return ret;
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
100061a8:	6823      	ldr	r3, [r4, #0]
100061aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
100061ae:	f040 8411 	bne.w	100069d4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
100061b2:	6823      	ldr	r3, [r4, #0]
100061b4:	f413 6f00 	tst.w	r3, #2048	; 0x800
100061b8:	f040 842a 	bne.w	10006a10 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
100061bc:	2500      	movs	r5, #0
}
100061be:	4628      	mov	r0, r5
100061c0:	b046      	add	sp, #280	; 0x118
100061c2:	bd70      	pop	{r4, r5, r6, pc}
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100061c4:	f104 0080 	add.w	r0, r4, #128	; 0x80
100061c8:	f7ff fbd4 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
100061cc:	4605      	mov	r5, r0
100061ce:	2800      	cmp	r0, #0
100061d0:	d1f5      	bne.n	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100061d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061d6:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100061da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100061de:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100061e2:	e4e2      	b.n	10005baa <HAL_RCCEx_PeriphCLKConfig+0x36>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100061e4:	f104 0080 	add.w	r0, r4, #128	; 0x80
100061e8:	f7ff fbc4 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
100061ec:	4605      	mov	r5, r0
100061ee:	2800      	cmp	r0, #0
100061f0:	d1e5      	bne.n	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100061f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100061f6:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100061fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100061fe:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10006202:	e4e6      	b.n	10005bd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006204:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006208:	f7ff faa6 	bl	10005758 <RCCEx_PLL3_Config>
      if (status != HAL_OK)
1000620c:	4605      	mov	r5, r0
1000620e:	2800      	cmp	r0, #0
10006210:	d1d5      	bne.n	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006212:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006216:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
1000621a:	f043 0320 	orr.w	r3, r3, #32
1000621e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10006222:	e4ea      	b.n	10005bfa <HAL_RCCEx_PeriphCLKConfig+0x86>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006224:	f104 0080 	add.w	r0, r4, #128	; 0x80
10006228:	f7ff fba4 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
1000622c:	4605      	mov	r5, r0
1000622e:	2800      	cmp	r0, #0
10006230:	d1c5      	bne.n	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006232:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006236:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
1000623a:	f043 0320 	orr.w	r3, r3, #32
1000623e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10006242:	e4f4      	b.n	10005c2e <HAL_RCCEx_PeriphCLKConfig+0xba>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006244:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006248:	f7ff fa86 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
1000624c:	4605      	mov	r5, r0
1000624e:	2800      	cmp	r0, #0
10006250:	d1b5      	bne.n	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006252:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006256:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
1000625a:	f043 0320 	orr.w	r3, r3, #32
1000625e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
10006262:	e4e4      	b.n	10005c2e <HAL_RCCEx_PeriphCLKConfig+0xba>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006264:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006268:	f7ff fa76 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
1000626c:	4605      	mov	r5, r0
1000626e:	2800      	cmp	r0, #0
10006270:	d1a5      	bne.n	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006272:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006276:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
1000627a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000627e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
10006282:	e4d4      	b.n	10005c2e <HAL_RCCEx_PeriphCLKConfig+0xba>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006284:	f104 0080 	add.w	r0, r4, #128	; 0x80
10006288:	f7ff fb74 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
1000628c:	4605      	mov	r5, r0
1000628e:	2800      	cmp	r0, #0
10006290:	d195      	bne.n	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006292:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006296:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
1000629a:	f043 0320 	orr.w	r3, r3, #32
1000629e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100062a2:	e4de      	b.n	10005c62 <HAL_RCCEx_PeriphCLKConfig+0xee>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100062a4:	f104 0044 	add.w	r0, r4, #68	; 0x44
100062a8:	f7ff fa56 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
100062ac:	4605      	mov	r5, r0
100062ae:	2800      	cmp	r0, #0
100062b0:	d185      	bne.n	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100062b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062b6:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
100062ba:	f043 0320 	orr.w	r3, r3, #32
100062be:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
100062c2:	e4ce      	b.n	10005c62 <HAL_RCCEx_PeriphCLKConfig+0xee>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100062c4:	f104 0044 	add.w	r0, r4, #68	; 0x44
100062c8:	f7ff fa46 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
100062cc:	4605      	mov	r5, r0
100062ce:	2800      	cmp	r0, #0
100062d0:	f47f af75 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100062d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062d8:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
100062dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100062e0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
100062e4:	e4bd      	b.n	10005c62 <HAL_RCCEx_PeriphCLKConfig+0xee>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100062e6:	f104 0080 	add.w	r0, r4, #128	; 0x80
100062ea:	f7ff fb43 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
100062ee:	4605      	mov	r5, r0
100062f0:	2800      	cmp	r0, #0
100062f2:	f47f af64 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100062f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100062fa:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100062fe:	f043 0320 	orr.w	r3, r3, #32
10006302:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10006306:	e4c6      	b.n	10005c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006308:	f104 0044 	add.w	r0, r4, #68	; 0x44
1000630c:	f7ff fa24 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006310:	4605      	mov	r5, r0
10006312:	2800      	cmp	r0, #0
10006314:	f47f af53 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006318:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000631c:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006320:	f043 0320 	orr.w	r3, r3, #32
10006324:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
10006328:	e4b5      	b.n	10005c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000632a:	f104 0044 	add.w	r0, r4, #68	; 0x44
1000632e:	f7ff fa13 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006332:	4605      	mov	r5, r0
10006334:	2800      	cmp	r0, #0
10006336:	f47f af42 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000633a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000633e:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006346:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
1000634a:	e4a4      	b.n	10005c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000634c:	f104 0080 	add.w	r0, r4, #128	; 0x80
10006350:	f7ff fb10 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
10006354:	4605      	mov	r5, r0
10006356:	2800      	cmp	r0, #0
10006358:	f47f af31 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000635c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006360:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10006364:	f043 0320 	orr.w	r3, r3, #32
10006368:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
1000636c:	e4ad      	b.n	10005cca <HAL_RCCEx_PeriphCLKConfig+0x156>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000636e:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006372:	f7ff f9f1 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006376:	4605      	mov	r5, r0
10006378:	2800      	cmp	r0, #0
1000637a:	f47f af20 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000637e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006382:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006386:	f043 0320 	orr.w	r3, r3, #32
1000638a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
1000638e:	e49c      	b.n	10005cca <HAL_RCCEx_PeriphCLKConfig+0x156>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006390:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006394:	f7ff f9e0 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006398:	4605      	mov	r5, r0
1000639a:	2800      	cmp	r0, #0
1000639c:	f47f af0f 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100063a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063a4:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
100063a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100063ac:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
100063b0:	e48b      	b.n	10005cca <HAL_RCCEx_PeriphCLKConfig+0x156>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100063b2:	f104 0080 	add.w	r0, r4, #128	; 0x80
100063b6:	f7ff fadd 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
100063ba:	4605      	mov	r5, r0
100063bc:	2800      	cmp	r0, #0
100063be:	f47f aefe 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100063c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063c6:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100063ca:	f043 0310 	orr.w	r3, r3, #16
100063ce:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100063d2:	e494      	b.n	10005cfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100063d4:	f104 0044 	add.w	r0, r4, #68	; 0x44
100063d8:	f7ff f9be 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
100063dc:	4605      	mov	r5, r0
100063de:	2800      	cmp	r0, #0
100063e0:	f47f aeed 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100063e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100063e8:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
100063ec:	f043 0320 	orr.w	r3, r3, #32
100063f0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
100063f4:	e483      	b.n	10005cfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100063f6:	f104 0044 	add.w	r0, r4, #68	; 0x44
100063fa:	f7ff f9ad 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
100063fe:	4605      	mov	r5, r0
10006400:	2800      	cmp	r0, #0
10006402:	f47f aedc 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006406:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000640a:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
1000640e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006412:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
10006416:	e472      	b.n	10005cfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006418:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000641c:	f7ff faaa 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
10006420:	4605      	mov	r5, r0
10006422:	2800      	cmp	r0, #0
10006424:	f47f aecb 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006428:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000642c:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10006430:	f043 0310 	orr.w	r3, r3, #16
10006434:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10006438:	e47b      	b.n	10005d32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000643a:	f104 0044 	add.w	r0, r4, #68	; 0x44
1000643e:	f7ff f98b 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006442:	4605      	mov	r5, r0
10006444:	2800      	cmp	r0, #0
10006446:	f47f aeba 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000644a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000644e:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006452:	f043 0320 	orr.w	r3, r3, #32
10006456:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
1000645a:	e46a      	b.n	10005d32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000645c:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006460:	f7ff f97a 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006464:	4605      	mov	r5, r0
10006466:	2800      	cmp	r0, #0
10006468:	f47f aea9 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000646c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006470:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006478:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
1000647c:	e459      	b.n	10005d32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000647e:	f104 0080 	add.w	r0, r4, #128	; 0x80
10006482:	f7ff fa77 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
10006486:	4605      	mov	r5, r0
10006488:	2800      	cmp	r0, #0
1000648a:	f47f ae98 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000648e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006492:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10006496:	f043 0320 	orr.w	r3, r3, #32
1000649a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
1000649e:	e45c      	b.n	10005d5a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100064a0:	f104 0080 	add.w	r0, r4, #128	; 0x80
100064a4:	f7ff fa66 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
100064a8:	4605      	mov	r5, r0
100064aa:	2800      	cmp	r0, #0
100064ac:	f47f ae87 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100064b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064b4:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100064b8:	f043 0320 	orr.w	r3, r3, #32
100064bc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100064c0:	e462      	b.n	10005d88 <HAL_RCCEx_PeriphCLKConfig+0x214>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100064c2:	f104 0044 	add.w	r0, r4, #68	; 0x44
100064c6:	f7ff f947 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
100064ca:	4605      	mov	r5, r0
100064cc:	2800      	cmp	r0, #0
100064ce:	f47f ae76 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100064d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064d6:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
100064da:	f043 0320 	orr.w	r3, r3, #32
100064de:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
100064e2:	e451      	b.n	10005d88 <HAL_RCCEx_PeriphCLKConfig+0x214>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100064e4:	f104 0080 	add.w	r0, r4, #128	; 0x80
100064e8:	f7ff fa44 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
100064ec:	4605      	mov	r5, r0
100064ee:	2800      	cmp	r0, #0
100064f0:	f47f ae65 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100064f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100064f8:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100064fc:	f043 0320 	orr.w	r3, r3, #32
10006500:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10006504:	e454      	b.n	10005db0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006506:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000650a:	f7ff fa33 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
1000650e:	4605      	mov	r5, r0
10006510:	2800      	cmp	r0, #0
10006512:	f47f ae54 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006516:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000651a:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
1000651e:	f043 0320 	orr.w	r3, r3, #32
10006522:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10006526:	e457      	b.n	10005dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006528:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000652c:	f7ff fa22 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
10006530:	4605      	mov	r5, r0
10006532:	2800      	cmp	r0, #0
10006534:	f47f ae43 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006538:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000653c:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10006540:	f043 0320 	orr.w	r3, r3, #32
10006544:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10006548:	e45a      	b.n	10005e00 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000654a:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000654e:	f7ff fa11 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
10006552:	4605      	mov	r5, r0
10006554:	2800      	cmp	r0, #0
10006556:	f47f ae32 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000655a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000655e:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10006562:	f043 0320 	orr.w	r3, r3, #32
10006566:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
1000656a:	e45d      	b.n	10005e28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000656c:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006570:	f7ff f8f2 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006574:	4605      	mov	r5, r0
10006576:	2800      	cmp	r0, #0
10006578:	f47f ae21 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000657c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006580:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006584:	f043 0320 	orr.w	r3, r3, #32
10006588:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
1000658c:	e463      	b.n	10005e56 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000658e:	f104 0080 	add.w	r0, r4, #128	; 0x80
10006592:	f7ff f9ef 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
10006596:	4605      	mov	r5, r0
10006598:	2800      	cmp	r0, #0
1000659a:	f47f ae10 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000659e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100065a2:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100065a6:	f043 0320 	orr.w	r3, r3, #32
100065aa:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100065ae:	e452      	b.n	10005e56 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100065b0:	f104 0044 	add.w	r0, r4, #68	; 0x44
100065b4:	f7ff f8d0 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
100065b8:	4605      	mov	r5, r0
100065ba:	2800      	cmp	r0, #0
100065bc:	f47f adff 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100065c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100065c4:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
100065c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100065cc:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
100065d0:	e457      	b.n	10005e82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100065d2:	f104 0080 	add.w	r0, r4, #128	; 0x80
100065d6:	f7ff f9cd 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
100065da:	4605      	mov	r5, r0
100065dc:	2800      	cmp	r0, #0
100065de:	f47f adee 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100065e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100065e6:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100065ea:	f043 0310 	orr.w	r3, r3, #16
100065ee:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100065f2:	e446      	b.n	10005e82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100065f4:	f104 0044 	add.w	r0, r4, #68	; 0x44
100065f8:	f7ff f8ae 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
100065fc:	4605      	mov	r5, r0
100065fe:	2800      	cmp	r0, #0
10006600:	f47f addd 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10006604:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006608:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
1000660c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006610:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
10006614:	e44c      	b.n	10005eb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006616:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000661a:	f7ff f9ab 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
1000661e:	4605      	mov	r5, r0
10006620:	2800      	cmp	r0, #0
10006622:	f47f adcc 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006626:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000662a:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
1000662e:	f043 0310 	orr.w	r3, r3, #16
10006632:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10006636:	e43b      	b.n	10005eb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006638:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000663c:	f7ff f99a 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
10006640:	4605      	mov	r5, r0
10006642:	2800      	cmp	r0, #0
10006644:	f47f adbb 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006648:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000664c:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10006650:	f043 0310 	orr.w	r3, r3, #16
10006654:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10006658:	e441      	b.n	10005ede <HAL_RCCEx_PeriphCLKConfig+0x36a>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000665a:	f104 0044 	add.w	r0, r4, #68	; 0x44
1000665e:	f7ff f87b 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006662:	4605      	mov	r5, r0
10006664:	2800      	cmp	r0, #0
10006666:	f47f adaa 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000666a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000666e:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006672:	f043 0320 	orr.w	r3, r3, #32
10006676:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
1000667a:	e430      	b.n	10005ede <HAL_RCCEx_PeriphCLKConfig+0x36a>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000667c:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006680:	f7ff f86a 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006684:	4605      	mov	r5, r0
10006686:	2800      	cmp	r0, #0
10006688:	f47f ad99 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000668c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006690:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006698:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
1000669c:	e436      	b.n	10005f0c <HAL_RCCEx_PeriphCLKConfig+0x398>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000669e:	f104 0080 	add.w	r0, r4, #128	; 0x80
100066a2:	f7ff f967 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
100066a6:	4605      	mov	r5, r0
100066a8:	2800      	cmp	r0, #0
100066aa:	f47f ad88 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100066ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100066b2:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100066b6:	f043 0310 	orr.w	r3, r3, #16
100066ba:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100066be:	e425      	b.n	10005f0c <HAL_RCCEx_PeriphCLKConfig+0x398>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100066c0:	f104 0044 	add.w	r0, r4, #68	; 0x44
100066c4:	f7ff f848 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
100066c8:	4605      	mov	r5, r0
100066ca:	2800      	cmp	r0, #0
100066cc:	f47f ad77 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100066d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100066d4:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
100066d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100066dc:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
100066e0:	e42b      	b.n	10005f3a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100066e2:	f104 0080 	add.w	r0, r4, #128	; 0x80
100066e6:	f7ff f945 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
100066ea:	4605      	mov	r5, r0
100066ec:	2800      	cmp	r0, #0
100066ee:	f47f ad66 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100066f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100066f6:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100066fa:	f043 0310 	orr.w	r3, r3, #16
100066fe:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10006702:	e41a      	b.n	10005f3a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10006704:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006708:	f7ff f826 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
1000670c:	4605      	mov	r5, r0
1000670e:	2800      	cmp	r0, #0
10006710:	f47f ad55 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10006714:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006718:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
1000671c:	f043 0320 	orr.w	r3, r3, #32
10006720:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
10006724:	e423      	b.n	10005f6e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006726:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000672a:	f7ff f923 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
1000672e:	4605      	mov	r5, r0
10006730:	2800      	cmp	r0, #0
10006732:	f47f ad44 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10006736:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000673a:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
1000673e:	f043 0320 	orr.w	r3, r3, #32
10006742:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10006746:	e412      	b.n	10005f6e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006748:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000674c:	f7ff f912 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
10006750:	4605      	mov	r5, r0
10006752:	2800      	cmp	r0, #0
10006754:	f47f ad33 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006758:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000675c:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10006760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006764:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10006768:	e401      	b.n	10005f6e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000676a:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000676e:	f7ff f901 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
10006772:	4605      	mov	r5, r0
10006774:	2800      	cmp	r0, #0
10006776:	f47f ad22 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000677a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000677e:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10006782:	f043 0310 	orr.w	r3, r3, #16
10006786:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
1000678a:	e407      	b.n	10005f9c <HAL_RCCEx_PeriphCLKConfig+0x428>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000678c:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006790:	f7fe ffe2 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006794:	4605      	mov	r5, r0
10006796:	2800      	cmp	r0, #0
10006798:	f47f ad11 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000679c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067a0:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
100067a4:	f043 0320 	orr.w	r3, r3, #32
100067a8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
100067ac:	f7ff bbf6 	b.w	10005f9c <HAL_RCCEx_PeriphCLKConfig+0x428>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100067b0:	f104 0080 	add.w	r0, r4, #128	; 0x80
100067b4:	f7ff f8de 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
100067b8:	4605      	mov	r5, r0
100067ba:	2800      	cmp	r0, #0
100067bc:	f47f acff 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100067c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067c4:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100067c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100067cc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100067d0:	e407      	b.n	10005fe2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100067d2:	f104 0080 	add.w	r0, r4, #128	; 0x80
100067d6:	f7ff f8cd 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
100067da:	4605      	mov	r5, r0
100067dc:	2800      	cmp	r0, #0
100067de:	f47f acee 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100067e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100067e6:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100067ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100067ee:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100067f2:	e40a      	b.n	1000600a <HAL_RCCEx_PeriphCLKConfig+0x496>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100067f4:	f104 0080 	add.w	r0, r4, #128	; 0x80
100067f8:	f7ff f8bc 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
100067fc:	4605      	mov	r5, r0
100067fe:	2800      	cmp	r0, #0
10006800:	f47f acdd 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006804:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006808:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
1000680c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006810:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10006814:	e40d      	b.n	10006032 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006816:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000681a:	f7ff f8ab 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
1000681e:	4605      	mov	r5, r0
10006820:	2800      	cmp	r0, #0
10006822:	f47f accc 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10006826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000682a:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
1000682e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006832:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10006836:	e410      	b.n	1000605a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10006838:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000683c:	f7ff f89a 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
10006840:	4605      	mov	r5, r0
10006842:	2800      	cmp	r0, #0
10006844:	f47f acbb 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10006848:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000684c:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10006850:	f043 0310 	orr.w	r3, r3, #16
10006854:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10006858:	e422      	b.n	100060a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000685a:	f104 0080 	add.w	r0, r4, #128	; 0x80
1000685e:	f7ff f889 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
10006862:	4605      	mov	r5, r0
10006864:	2800      	cmp	r0, #0
10006866:	f47f acaa 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000686a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000686e:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
10006872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10006876:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
1000687a:	e428      	b.n	100060ce <HAL_RCCEx_PeriphCLKConfig+0x55a>
        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000687c:	f104 0044 	add.w	r0, r4, #68	; 0x44
10006880:	f7fe ff6a 	bl	10005758 <RCCEx_PLL3_Config>
        if (status != HAL_OK)
10006884:	4605      	mov	r5, r0
10006886:	2800      	cmp	r0, #0
10006888:	f47f ac99 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000688c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006890:	f8d2 3880 	ldr.w	r3, [r2, #2176]	; 0x880
10006894:	f043 0320 	orr.w	r3, r3, #32
10006898:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        break;
1000689c:	e417      	b.n	100060ce <HAL_RCCEx_PeriphCLKConfig+0x55a>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000689e:	f104 0080 	add.w	r0, r4, #128	; 0x80
100068a2:	f7ff f867 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
100068a6:	4605      	mov	r5, r0
100068a8:	2800      	cmp	r0, #0
100068aa:	f47f ac88 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100068ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068b2:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100068b6:	f043 0310 	orr.w	r3, r3, #16
100068ba:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
100068be:	e42b      	b.n	10006118 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100068c0:	f104 0080 	add.w	r0, r4, #128	; 0x80
100068c4:	f7ff f856 	bl	10005974 <RCCEx_PLL4_Config>
      if (status != HAL_OK)
100068c8:	4605      	mov	r5, r0
100068ca:	2800      	cmp	r0, #0
100068cc:	f47f ac77 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100068d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068d4:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100068d8:	f043 0320 	orr.w	r3, r3, #32
100068dc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100068e0:	e42e      	b.n	10006140 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100068e2:	f104 0080 	add.w	r0, r4, #128	; 0x80
100068e6:	f7ff f845 	bl	10005974 <RCCEx_PLL4_Config>
        if (status != HAL_OK)
100068ea:	4605      	mov	r5, r0
100068ec:	2800      	cmp	r0, #0
100068ee:	f47f ac66 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100068f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100068f6:	f8d2 3894 	ldr.w	r3, [r2, #2196]	; 0x894
100068fa:	f043 0310 	orr.w	r3, r3, #16
100068fe:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10006902:	e441      	b.n	10006188 <HAL_RCCEx_PeriphCLKConfig+0x614>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10006904:	4a52      	ldr	r2, [pc, #328]	; (10006a50 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
10006906:	6813      	ldr	r3, [r2, #0]
10006908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000690c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
1000690e:	f7fb f893 	bl	10001a38 <HAL_GetTick>
10006912:	4606      	mov	r6, r0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10006914:	2500      	movs	r5, #0
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10006916:	4b4e      	ldr	r3, [pc, #312]	; (10006a50 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
10006918:	681b      	ldr	r3, [r3, #0]
1000691a:	f413 7f80 	tst.w	r3, #256	; 0x100
1000691e:	d106      	bne.n	1000692e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10006920:	f7fb f88a 	bl	10001a38 <HAL_GetTick>
10006924:	1b80      	subs	r0, r0, r6
10006926:	2864      	cmp	r0, #100	; 0x64
10006928:	d9f5      	bls.n	10006916 <HAL_RCCEx_PeriphCLKConfig+0xda2>
        ret = HAL_TIMEOUT;
1000692a:	2503      	movs	r5, #3
1000692c:	e7f3      	b.n	10006916 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    if (ret == HAL_OK)
1000692e:	2d00      	cmp	r5, #0
10006930:	f47f ac45 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
10006934:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006938:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000693c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
10006940:	4053      	eors	r3, r2
10006942:	f413 3f40 	tst.w	r3, #196608	; 0x30000
10006946:	d108      	bne.n	1000695a <HAL_RCCEx_PeriphCLKConfig+0xde6>
      __HAL_RCC_RTC_ENABLE();
10006948:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000694c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
10006950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
10006954:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10006958:	e426      	b.n	100061a8 <HAL_RCCEx_PeriphCLKConfig+0x634>
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
1000695a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000695e:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_FORCE();
10006962:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10006966:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
1000696a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
1000696e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10006972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
10006976:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
1000697a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
1000697e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
10006982:	f006 0130 	and.w	r1, r6, #48	; 0x30
10006986:	430a      	orrs	r2, r1
10006988:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
1000698c:	2304      	movs	r3, #4
1000698e:	9301      	str	r3, [sp, #4]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10006990:	f006 030b 	and.w	r3, r6, #11
10006994:	9303      	str	r3, [sp, #12]
        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10006996:	2300      	movs	r3, #0
10006998:	930a      	str	r3, [sp, #40]	; 0x28
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
1000699a:	9319      	str	r3, [sp, #100]	; 0x64
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
1000699c:	9328      	str	r3, [sp, #160]	; 0xa0
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
1000699e:	9337      	str	r3, [sp, #220]	; 0xdc
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
100069a0:	a801      	add	r0, sp, #4
100069a2:	f7fe f9d7 	bl	10004d54 <HAL_RCC_OscConfig>
        if (ret != HAL_OK)
100069a6:	4605      	mov	r5, r0
100069a8:	2800      	cmp	r0, #0
100069aa:	f47f ac08 	bne.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
100069ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069b2:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
100069b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
100069ba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
100069be:	430b      	orrs	r3, r1
100069c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
100069c4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
100069c8:	4922      	ldr	r1, [pc, #136]	; (10006a54 <HAL_RCCEx_PeriphCLKConfig+0xee0>)
100069ca:	4031      	ands	r1, r6
100069cc:	430b      	orrs	r3, r1
100069ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100069d2:	e7b9      	b.n	10006948 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
100069d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100069d8:	f8d2 3828 	ldr.w	r3, [r2, #2088]	; 0x828
100069dc:	f023 0301 	bic.w	r3, r3, #1
100069e0:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
100069e4:	430b      	orrs	r3, r1
100069e6:	f8c2 3828 	str.w	r3, [r2, #2088]	; 0x828
    tickstart = HAL_GetTick();
100069ea:	f7fb f825 	bl	10001a38 <HAL_GetTick>
100069ee:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
100069f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100069f4:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
100069f8:	2b00      	cmp	r3, #0
100069fa:	f6ff abda 	blt.w	100061b2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100069fe:	f7fb f81b 	bl	10001a38 <HAL_GetTick>
10006a02:	1b40      	subs	r0, r0, r5
10006a04:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
10006a08:	d9f2      	bls.n	100069f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
        return HAL_TIMEOUT;
10006a0a:	2503      	movs	r5, #3
10006a0c:	f7ff bbd7 	b.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
10006a10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10006a14:	f8d2 382c 	ldr.w	r3, [r2, #2092]	; 0x82c
10006a18:	f023 0301 	bic.w	r3, r3, #1
10006a1c:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
10006a20:	430b      	orrs	r3, r1
10006a22:	f8c2 382c 	str.w	r3, [r2, #2092]	; 0x82c
    tickstart = HAL_GetTick();
10006a26:	f7fb f807 	bl	10001a38 <HAL_GetTick>
10006a2a:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10006a2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006a30:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10006a34:	2b00      	cmp	r3, #0
10006a36:	db08      	blt.n	10006a4a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10006a38:	f7fa fffe 	bl	10001a38 <HAL_GetTick>
10006a3c:	1b00      	subs	r0, r0, r4
10006a3e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
10006a42:	d9f3      	bls.n	10006a2c <HAL_RCCEx_PeriphCLKConfig+0xeb8>
        return HAL_TIMEOUT;
10006a44:	2503      	movs	r5, #3
10006a46:	f7ff bbba 	b.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
  return HAL_OK;
10006a4a:	2500      	movs	r5, #0
10006a4c:	f7ff bbb7 	b.w	100061be <HAL_RCCEx_PeriphCLKConfig+0x64a>
10006a50:	50001000 	.word	0x50001000
10006a54:	7fecfdc0 	.word	0x7fecfdc0

10006a58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *          @ref RCCEx_Periph_Clock_Selection
  *          @ref RCCEx_Periph_One_Clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
10006a58:	b500      	push	{lr}
10006a5a:	b08b      	sub	sp, #44	; 0x2c
  PLL4_ClocksTypeDef pll4_clocks;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk) || IS_RCC_PERIPHONECLOCK(PeriphClk));

  switch (PeriphClk)
10006a5c:	f100 437f 	add.w	r3, r0, #4278190080	; 0xff000000
10006a60:	430b      	orrs	r3, r1
10006a62:	f000 82a0 	beq.w	10006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
10006a66:	4bb5      	ldr	r3, [pc, #724]	; (10006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
10006a68:	4298      	cmp	r0, r3
10006a6a:	f171 0300 	sbcs.w	r3, r1, #0
10006a6e:	f080 8136 	bcs.w	10006cde <HAL_RCCEx_GetPeriphCLKFreq+0x286>
10006a72:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
10006a76:	430b      	orrs	r3, r1
10006a78:	f000 8627 	beq.w	100076ca <HAL_RCCEx_GetPeriphCLKFreq+0xc72>
10006a7c:	f640 0301 	movw	r3, #2049	; 0x801
10006a80:	4298      	cmp	r0, r3
10006a82:	f171 0300 	sbcs.w	r3, r1, #0
10006a86:	d32a      	bcc.n	10006ade <HAL_RCCEx_GetPeriphCLKFreq+0x86>
10006a88:	f5a0 3300 	sub.w	r3, r0, #131072	; 0x20000
10006a8c:	430b      	orrs	r3, r1
10006a8e:	f000 842b 	beq.w	100072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
10006a92:	4bab      	ldr	r3, [pc, #684]	; (10006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
10006a94:	4298      	cmp	r0, r3
10006a96:	f171 0300 	sbcs.w	r3, r1, #0
10006a9a:	f0c0 80c1 	bcc.w	10006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
10006a9e:	f5a0 1380 	sub.w	r3, r0, #1048576	; 0x100000
10006aa2:	430b      	orrs	r3, r1
10006aa4:	f000 8551 	beq.w	1000754a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
10006aa8:	4ba6      	ldr	r3, [pc, #664]	; (10006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
10006aaa:	4298      	cmp	r0, r3
10006aac:	f171 0300 	sbcs.w	r3, r1, #0
10006ab0:	f0c0 80fa 	bcc.w	10006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
10006ab4:	f5a0 1300 	sub.w	r3, r0, #2097152	; 0x200000
10006ab8:	430b      	orrs	r3, r1
10006aba:	f000 8514 	beq.w	100074e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
10006abe:	f5a0 0080 	sub.w	r0, r0, #4194304	; 0x400000
10006ac2:	ea50 0301 	orrs.w	r3, r0, r1
10006ac6:	f040 8108 	bne.w	10006cda <HAL_RCCEx_GetPeriphCLKFreq+0x282>


#if defined(DSI)
    case RCC_PERIPHCLK_DSI:
    {
      clksource = __HAL_RCC_GET_DSI_SOURCE();
10006aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ace:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924

      switch (clksource)
10006ad2:	f013 0f01 	tst.w	r3, #1
10006ad6:	f040 844e 	bne.w	10007376 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
  uint32_t frequency = 0, clksource = 0;
10006ada:	2000      	movs	r0, #0
10006adc:	e1e9      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
  switch (PeriphClk)
10006ade:	2821      	cmp	r0, #33	; 0x21
10006ae0:	f171 0300 	sbcs.w	r3, r1, #0
10006ae4:	d252      	bcs.n	10006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
10006ae6:	ea50 0301 	orrs.w	r3, r0, r1
10006aea:	f000 861e 	beq.w	1000772a <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
10006aee:	3801      	subs	r0, #1
10006af0:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
10006af4:	2820      	cmp	r0, #32
10006af6:	f171 0300 	sbcs.w	r3, r1, #0
10006afa:	d301      	bcc.n	10006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
10006afc:	2000      	movs	r0, #0
10006afe:	e1d8      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006b00:	281f      	cmp	r0, #31
10006b02:	d8fb      	bhi.n	10006afc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
10006b04:	a301      	add	r3, pc, #4	; (adr r3, 10006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
10006b06:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
10006b0a:	bf00      	nop
10006b0c:	1000746d 	.word	0x1000746d
10006b10:	10007039 	.word	0x10007039
10006b14:	10006afd 	.word	0x10006afd
10006b18:	1000707f 	.word	0x1000707f
10006b1c:	10006afd 	.word	0x10006afd
10006b20:	10006afd 	.word	0x10006afd
10006b24:	10006afd 	.word	0x10006afd
10006b28:	100075c3 	.word	0x100075c3
10006b2c:	10006afd 	.word	0x10006afd
10006b30:	10006afd 	.word	0x10006afd
10006b34:	10006afd 	.word	0x10006afd
10006b38:	10006afd 	.word	0x10006afd
10006b3c:	10006afd 	.word	0x10006afd
10006b40:	10006afd 	.word	0x10006afd
10006b44:	10006afd 	.word	0x10006afd
10006b48:	10006edd 	.word	0x10006edd
10006b4c:	10006afd 	.word	0x10006afd
10006b50:	10006afd 	.word	0x10006afd
10006b54:	10006afd 	.word	0x10006afd
10006b58:	10006afd 	.word	0x10006afd
10006b5c:	10006afd 	.word	0x10006afd
10006b60:	10006afd 	.word	0x10006afd
10006b64:	10006afd 	.word	0x10006afd
10006b68:	10006afd 	.word	0x10006afd
10006b6c:	10006afd 	.word	0x10006afd
10006b70:	10006afd 	.word	0x10006afd
10006b74:	10006afd 	.word	0x10006afd
10006b78:	10006afd 	.word	0x10006afd
10006b7c:	10006afd 	.word	0x10006afd
10006b80:	10006afd 	.word	0x10006afd
10006b84:	10006afd 	.word	0x10006afd
10006b88:	10006f1d 	.word	0x10006f1d
10006b8c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
10006b90:	430b      	orrs	r3, r1
10006b92:	f000 82ef 	beq.w	10007174 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
10006b96:	f240 1301 	movw	r3, #257	; 0x101
10006b9a:	4298      	cmp	r0, r3
10006b9c:	f171 0300 	sbcs.w	r3, r1, #0
10006ba0:	d321      	bcc.n	10006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
10006ba2:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
10006ba6:	430b      	orrs	r3, r1
10006ba8:	f000 83ef 	beq.w	1000738a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
10006bac:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
10006bb0:	ea50 0301 	orrs.w	r3, r0, r1
10006bb4:	d132      	bne.n	10006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
    }
      break; /* RCC_PERIPHCLK_SDMMC12 */

    case RCC_PERIPHCLK_TIMG1:
    {
      frequency = HAL_RCC_GetMCUFreq();
10006bb6:	f7fe f889 	bl	10004ccc <HAL_RCC_GetMCUFreq>
      if (__HAL_RCC_GET_TIMG1PRES() == RCC_TIMG1PRES_ACTIVATED)
10006bba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006bbe:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10006bc2:	f013 0f01 	tst.w	r3, #1
10006bc6:	f000 856a 	beq.w	1000769e <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
      {
        switch (__HAL_RCC_GET_APB1_DIV())
10006bca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006bce:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10006bd2:	f003 0307 	and.w	r3, r3, #7
10006bd6:	2b03      	cmp	r3, #3
10006bd8:	f000 855f 	beq.w	1000769a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
10006bdc:	2b04      	cmp	r3, #4
10006bde:	f040 8168 	bne.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            break;
          case RCC_APB1_DIV8:
            frequency /= 2UL;
            break;
          case RCC_APB1_DIV16:
            frequency /= 4UL;
10006be2:	0880      	lsrs	r0, r0, #2
            break;
10006be4:	e165      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
  switch (PeriphClk)
10006be6:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
10006bea:	430b      	orrs	r3, r1
10006bec:	f000 81b6 	beq.w	10006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
10006bf0:	3880      	subs	r0, #128	; 0x80
10006bf2:	ea50 0301 	orrs.w	r3, r0, r1
10006bf6:	d10f      	bne.n	10006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
      clksource = __HAL_RCC_GET_SAI1_SOURCE();
10006bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006bfc:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10006c00:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10006c04:	2b04      	cmp	r3, #4
10006c06:	f200 85c4 	bhi.w	10007792 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
10006c0a:	e8df f013 	tbh	[pc, r3, lsl #1]
10006c0e:	02a1      	.short	0x02a1
10006c10:	029f02a6 	.word	0x029f02a6
10006c14:	02ab02b0 	.word	0x02ab02b0
  switch (PeriphClk)
10006c18:	2000      	movs	r0, #0
10006c1a:	e14a      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006c1c:	2000      	movs	r0, #0
10006c1e:	e148      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006c20:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
10006c24:	430b      	orrs	r3, r1
10006c26:	f000 8323 	beq.w	10007270 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
10006c2a:	f244 0301 	movw	r3, #16385	; 0x4001
10006c2e:	4298      	cmp	r0, r3
10006c30:	f171 0300 	sbcs.w	r3, r1, #0
10006c34:	d319      	bcc.n	10006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x212>
10006c36:	f5a0 4300 	sub.w	r3, r0, #32768	; 0x8000
10006c3a:	430b      	orrs	r3, r1
10006c3c:	f000 8242 	beq.w	100070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
10006c40:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
10006c44:	ea50 0301 	orrs.w	r3, r0, r1
10006c48:	d12c      	bne.n	10006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
      clksource = __HAL_RCC_GET_LPTIM23_SOURCE();
10006c4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c4e:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
10006c52:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10006c56:	2b04      	cmp	r3, #4
10006c58:	f200 833b 	bhi.w	100072d2 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
10006c5c:	e8df f013 	tbh	[pc, r3, lsl #1]
10006c60:	0331032e 	.word	0x0331032e
10006c64:	032b0336 	.word	0x032b0336
10006c68:	05ab      	.short	0x05ab
  switch (PeriphClk)
10006c6a:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
10006c6e:	430b      	orrs	r3, r1
10006c70:	f000 83a5 	beq.w	100073be <HAL_RCCEx_GetPeriphCLKFreq+0x966>
10006c74:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
10006c78:	ea50 0301 	orrs.w	r3, r0, r1
10006c7c:	d110      	bne.n	10006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      clksource = __HAL_RCC_GET_CEC_SOURCE();
10006c7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006c82:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10006c86:	f003 0303 	and.w	r3, r3, #3
      switch (clksource)
10006c8a:	2b01      	cmp	r3, #1
10006c8c:	f000 8560 	beq.w	10007750 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
10006c90:	2b02      	cmp	r3, #2
10006c92:	f000 8561 	beq.w	10007758 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
10006c96:	2b00      	cmp	r3, #0
10006c98:	f000 811d 	beq.w	10006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = 0;
10006c9c:	2000      	movs	r0, #0
10006c9e:	e108      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
  switch (PeriphClk)
10006ca0:	2000      	movs	r0, #0
10006ca2:	e106      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006ca4:	2000      	movs	r0, #0
10006ca6:	e104      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006ca8:	f5a0 2380 	sub.w	r3, r0, #262144	; 0x40000
10006cac:	430b      	orrs	r3, r1
10006cae:	f000 8286 	beq.w	100071be <HAL_RCCEx_GetPeriphCLKFreq+0x766>
10006cb2:	f5a0 2000 	sub.w	r0, r0, #524288	; 0x80000
10006cb6:	ea50 0301 	orrs.w	r3, r0, r1
10006cba:	d10c      	bne.n	10006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      clksource = __HAL_RCC_GET_USBO_SOURCE();
10006cbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006cc0:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
      switch (clksource)
10006cc4:	f013 0310 	ands.w	r3, r3, #16
10006cc8:	f000 8461 	beq.w	1000758e <HAL_RCCEx_GetPeriphCLKFreq+0xb36>
10006ccc:	2b00      	cmp	r3, #0
10006cce:	f000 8596 	beq.w	100077fe <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
          frequency = USB_PHY_VALUE;
10006cd2:	481d      	ldr	r0, [pc, #116]	; (10006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
10006cd4:	e0ed      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
  switch (PeriphClk)
10006cd6:	2000      	movs	r0, #0
10006cd8:	e0eb      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006cda:	2000      	movs	r0, #0
10006cdc:	e0e9      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006cde:	2910      	cmp	r1, #16
10006ce0:	bf08      	it	eq
10006ce2:	2800      	cmpeq	r0, #0
10006ce4:	f000 83eb 	beq.w	100074be <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
10006ce8:	2300      	movs	r3, #0
10006cea:	4283      	cmp	r3, r0
10006cec:	f04f 0310 	mov.w	r3, #16
10006cf0:	418b      	sbcs	r3, r1
10006cf2:	d22b      	bcs.n	10006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
10006cf4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
10006cf8:	bf08      	it	eq
10006cfa:	2800      	cmpeq	r0, #0
10006cfc:	f000 8518 	beq.w	10007730 <HAL_RCCEx_GetPeriphCLKFreq+0xcd8>
10006d00:	2300      	movs	r3, #0
10006d02:	4283      	cmp	r3, r0
10006d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
10006d08:	418b      	sbcs	r3, r1
10006d0a:	f080 80ac 	bcs.w	10006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
10006d0e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
10006d12:	bf08      	it	eq
10006d14:	2800      	cmpeq	r0, #0
10006d16:	f000 8435 	beq.w	10007584 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
10006d1a:	2300      	movs	r3, #0
10006d1c:	4283      	cmp	r3, r0
10006d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
10006d22:	418b      	sbcs	r3, r1
10006d24:	f080 80c8 	bcs.w	10006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
10006d28:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
10006d2c:	bf08      	it	eq
10006d2e:	2800      	cmpeq	r0, #0
10006d30:	f040 850b 	bne.w	1000774a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
      frequency = HAL_RCC_GetPCLK1Freq();
10006d34:	f7fd ffd8 	bl	10004ce8 <HAL_RCC_GetPCLK1Freq>
      break; /* RCC_PERIPHCLK_WWDG */
10006d38:	e0bb      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006d3a:	bf00      	nop
10006d3c:	01000001 	.word	0x01000001
10006d40:	00020001 	.word	0x00020001
10006d44:	00100001 	.word	0x00100001
10006d48:	02dc6c00 	.word	0x02dc6c00
  switch (PeriphClk)
10006d4c:	f100 4340 	add.w	r3, r0, #3221225472	; 0xc0000000
10006d50:	430b      	orrs	r3, r1
10006d52:	f000 82ee 	beq.w	10007332 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
10006d56:	4bab      	ldr	r3, [pc, #684]	; (10007004 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
10006d58:	4298      	cmp	r0, r3
10006d5a:	f171 0300 	sbcs.w	r3, r1, #0
10006d5e:	d322      	bcc.n	10006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
10006d60:	2902      	cmp	r1, #2
10006d62:	bf08      	it	eq
10006d64:	2800      	cmpeq	r0, #0
10006d66:	f000 83db 	beq.w	10007520 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
10006d6a:	2300      	movs	r3, #0
10006d6c:	4283      	cmp	r3, r0
10006d6e:	f04f 0302 	mov.w	r3, #2
10006d72:	418b      	sbcs	r3, r1
10006d74:	d25a      	bcs.n	10006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
10006d76:	2904      	cmp	r1, #4
10006d78:	bf08      	it	eq
10006d7a:	2800      	cmpeq	r0, #0
10006d7c:	f000 8450 	beq.w	10007620 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
10006d80:	2908      	cmp	r1, #8
10006d82:	bf08      	it	eq
10006d84:	2800      	cmpeq	r0, #0
10006d86:	d16c      	bne.n	10006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
      clksource = __HAL_RCC_GET_RNG2_SOURCE();
10006d88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006d8c:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
10006d90:	f003 0303 	and.w	r3, r3, #3
      switch (clksource)
10006d94:	2b03      	cmp	r3, #3
10006d96:	f200 8436 	bhi.w	10007606 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
10006d9a:	e8df f013 	tbh	[pc, r3, lsl #1]
10006d9e:	0536      	.short	0x0536
10006da0:	043b0436 	.word	0x043b0436
10006da4:	043e      	.short	0x043e
  switch (PeriphClk)
10006da6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
10006daa:	430b      	orrs	r3, r1
10006dac:	f000 811a 	beq.w	10006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
10006db0:	4b95      	ldr	r3, [pc, #596]	; (10007008 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
10006db2:	4298      	cmp	r0, r3
10006db4:	f171 0300 	sbcs.w	r3, r1, #0
10006db8:	d31a      	bcc.n	10006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
10006dba:	f100 4370 	add.w	r3, r0, #4026531840	; 0xf0000000
10006dbe:	430b      	orrs	r3, r1
10006dc0:	f000 8233 	beq.w	1000722a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
10006dc4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
10006dc8:	ea50 0301 	orrs.w	r3, r0, r1
10006dcc:	d12c      	bne.n	10006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
      clksource = __HAL_RCC_GET_SPI6_SOURCE();
10006dce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006dd2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10006dd6:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10006dda:	2b05      	cmp	r3, #5
10006ddc:	f200 8344 	bhi.w	10007468 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>
10006de0:	e8df f013 	tbh	[pc, r3, lsl #1]
10006de4:	0330032d 	.word	0x0330032d
10006de8:	032b0335 	.word	0x032b0335
10006dec:	033d04fe 	.word	0x033d04fe
  switch (PeriphClk)
10006df0:	f100 437e 	add.w	r3, r0, #4261412864	; 0xfe000000
10006df4:	430b      	orrs	r3, r1
10006df6:	f000 818b 	beq.w	10007110 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
10006dfa:	f100 407c 	add.w	r0, r0, #4227858432	; 0xfc000000
10006dfe:	ea50 0301 	orrs.w	r3, r0, r1
10006e02:	d10f      	bne.n	10006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
      clksource = __HAL_RCC_GET_SPI1_SOURCE();
10006e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e08:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
10006e0c:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10006e10:	2b04      	cmp	r3, #4
10006e12:	f200 84c7 	bhi.w	100077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
10006e16:	e8df f013 	tbh	[pc, r3, lsl #1]
10006e1a:	01f6      	.short	0x01f6
10006e1c:	01f401fb 	.word	0x01f401fb
10006e20:	02000205 	.word	0x02000205
  switch (PeriphClk)
10006e24:	2000      	movs	r0, #0
10006e26:	e044      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006e28:	2000      	movs	r0, #0
10006e2a:	e042      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006e2c:	2900      	cmp	r1, #0
10006e2e:	bf08      	it	eq
10006e30:	f1b0 4f00 	cmpeq.w	r0, #2147483648	; 0x80000000
10006e34:	f000 840f 	beq.w	10007656 <HAL_RCCEx_GetPeriphCLKFreq+0xbfe>
10006e38:	2901      	cmp	r1, #1
10006e3a:	bf08      	it	eq
10006e3c:	2800      	cmpeq	r0, #0
10006e3e:	d10e      	bne.n	10006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
      clksource = __HAL_RCC_GET_SDMMC3_SOURCE();
10006e40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006e44:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10006e48:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10006e4c:	2b03      	cmp	r3, #3
10006e4e:	f200 84d9 	bhi.w	10007804 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
10006e52:	e8df f013 	tbh	[pc, r3, lsl #1]
10006e56:	03a1      	.short	0x03a1
10006e58:	03a903a4 	.word	0x03a903a4
10006e5c:	03ae      	.short	0x03ae
  switch (PeriphClk)
10006e5e:	2000      	movs	r0, #0
10006e60:	e027      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006e62:	2000      	movs	r0, #0
10006e64:	e025      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006e66:	2980      	cmp	r1, #128	; 0x80
10006e68:	bf08      	it	eq
10006e6a:	2800      	cmpeq	r0, #0
10006e6c:	f000 8288 	beq.w	10007380 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
10006e70:	2300      	movs	r3, #0
10006e72:	4283      	cmp	r3, r0
10006e74:	f04f 0380 	mov.w	r3, #128	; 0x80
10006e78:	418b      	sbcs	r3, r1
10006e7a:	d20e      	bcs.n	10006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
10006e7c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
10006e80:	bf08      	it	eq
10006e82:	2800      	cmpeq	r0, #0
10006e84:	f000 8141 	beq.w	1000710a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
10006e88:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
10006e8c:	bf08      	it	eq
10006e8e:	2800      	cmpeq	r0, #0
10006e90:	f040 8455 	bne.w	1000773e <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
      frequency = LSE_VALUE;
10006e94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
10006e98:	e00b      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
  switch (PeriphClk)
10006e9a:	2920      	cmp	r1, #32
10006e9c:	bf08      	it	eq
10006e9e:	2800      	cmpeq	r0, #0
10006ea0:	f000 82ac 	beq.w	100073fc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
10006ea4:	2940      	cmp	r1, #64	; 0x40
10006ea6:	bf08      	it	eq
10006ea8:	2800      	cmpeq	r0, #0
10006eaa:	f040 8445 	bne.w	10007738 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
      frequency = LSI_VALUE;
10006eae:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
    break;

  }

  return (frequency);
}
10006eb2:	b00b      	add	sp, #44	; 0x2c
10006eb4:	f85d fb04 	ldr.w	pc, [sp], #4
  switch (PeriphClk)
10006eb8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
10006ebc:	bf08      	it	eq
10006ebe:	2800      	cmpeq	r0, #0
10006ec0:	f000 8278 	beq.w	100073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
10006ec4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
10006ec8:	bf08      	it	eq
10006eca:	2800      	cmpeq	r0, #0
10006ecc:	f040 843a 	bne.w	10007744 <HAL_RCCEx_GetPeriphCLKFreq+0xcec>
      frequency = LSI_VALUE;
10006ed0:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
10006ed4:	e7ed      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10006ed6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
10006eda:	e7ea      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_I2C12_SOURCE();
10006edc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006ee0:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10006ee4:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10006ee8:	2b03      	cmp	r3, #3
10006eea:	d805      	bhi.n	10006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
10006eec:	e8df f013 	tbh	[pc, r3, lsl #1]
10006ef0:	00090006 	.word	0x00090006
10006ef4:	0438000e 	.word	0x0438000e
10006ef8:	2000      	movs	r0, #0
10006efa:	e7da      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK1Freq();
10006efc:	f7fd fef4 	bl	10004ce8 <HAL_RCC_GetPCLK1Freq>
          break;
10006f00:	e7d7      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10006f02:	a801      	add	r0, sp, #4
10006f04:	f7fd fda8 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10006f08:	9803      	ldr	r0, [sp, #12]
          break;
10006f0a:	e7d2      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10006f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f10:	699b      	ldr	r3, [r3, #24]
10006f12:	f003 0303 	and.w	r3, r3, #3
10006f16:	483d      	ldr	r0, [pc, #244]	; (1000700c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
10006f18:	40d8      	lsrs	r0, r3
          break;
10006f1a:	e7ca      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_I2C35_SOURCE();
10006f1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f20:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10006f24:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10006f28:	2b03      	cmp	r3, #3
10006f2a:	d805      	bhi.n	10006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
10006f2c:	e8df f013 	tbh	[pc, r3, lsl #1]
10006f30:	00090006 	.word	0x00090006
10006f34:	041b000e 	.word	0x041b000e
10006f38:	2000      	movs	r0, #0
10006f3a:	e7ba      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK1Freq();
10006f3c:	f7fd fed4 	bl	10004ce8 <HAL_RCC_GetPCLK1Freq>
          break;
10006f40:	e7b7      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10006f42:	a801      	add	r0, sp, #4
10006f44:	f7fd fd88 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10006f48:	9803      	ldr	r0, [sp, #12]
          break;
10006f4a:	e7b2      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10006f4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f50:	699b      	ldr	r3, [r3, #24]
10006f52:	f003 0303 	and.w	r3, r3, #3
10006f56:	482d      	ldr	r0, [pc, #180]	; (1000700c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
10006f58:	40d8      	lsrs	r0, r3
          break;
10006f5a:	e7aa      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_LPTIM1_SOURCE();
10006f5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006f60:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
10006f64:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10006f68:	2b05      	cmp	r3, #5
10006f6a:	d81a      	bhi.n	10006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
10006f6c:	e8df f013 	tbh	[pc, r3, lsl #1]
10006f70:	000c0009 	.word	0x000c0009
10006f74:	00060011 	.word	0x00060011
10006f78:	001603fe 	.word	0x001603fe
10006f7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
10006f80:	e797      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK1Freq();
10006f82:	f7fd feb1 	bl	10004ce8 <HAL_RCC_GetPCLK1Freq>
          break;
10006f86:	e794      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10006f88:	a801      	add	r0, sp, #4
10006f8a:	f7fd fd65 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10006f8e:	9801      	ldr	r0, [sp, #4]
          break;
10006f90:	e78f      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10006f92:	a804      	add	r0, sp, #16
10006f94:	f7fd fcbe 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10006f98:	9805      	ldr	r0, [sp, #20]
          break;
10006f9a:	e78a      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
10006f9c:	f7fd fe06 	bl	10004bac <RCC_GetCKPERFreq>
          break;
10006fa0:	e787      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
10006fa2:	2000      	movs	r0, #0
          break;
10006fa4:	e785      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
10006fa6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006faa:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10006fae:	f003 0303 	and.w	r3, r3, #3
      switch (clksource)
10006fb2:	2b01      	cmp	r3, #1
10006fb4:	d009      	beq.n	10006fca <HAL_RCCEx_GetPeriphCLKFreq+0x572>
10006fb6:	2b02      	cmp	r3, #2
10006fb8:	d00c      	beq.n	10006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
10006fba:	b10b      	cbz	r3, 10006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
10006fbc:	2000      	movs	r0, #0
10006fbe:	e778      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10006fc0:	a801      	add	r0, sp, #4
10006fc2:	f7fd fd49 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10006fc6:	9801      	ldr	r0, [sp, #4]
          break;
10006fc8:	e773      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10006fca:	a804      	add	r0, sp, #16
10006fcc:	f7fd fca2 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10006fd0:	9805      	ldr	r0, [sp, #20]
          break;
10006fd2:	e76e      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10006fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fd8:	699b      	ldr	r3, [r3, #24]
10006fda:	f003 0303 	and.w	r3, r3, #3
10006fde:	480b      	ldr	r0, [pc, #44]	; (1000700c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
10006fe0:	40d8      	lsrs	r0, r3
          break;
10006fe2:	e766      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_SPI23_SOURCE();
10006fe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10006fe8:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
10006fec:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10006ff0:	2b04      	cmp	r3, #4
10006ff2:	f200 83bf 	bhi.w	10007774 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
10006ff6:	e8df f003 	tbb	[pc, r3]
10006ffa:	120d      	.short	0x120d
10006ffc:	1c03      	.short	0x1c03
10006ffe:	17          	.byte	0x17
10006fff:	00          	.byte	0x00
10007000:	4803      	ldr	r0, [pc, #12]	; (10007010 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>)
10007002:	e756      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10007004:	40000001 	.word	0x40000001
10007008:	08000001 	.word	0x08000001
1000700c:	03d09000 	.word	0x03d09000
10007010:	00bb8000 	.word	0x00bb8000
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007014:	a801      	add	r0, sp, #4
10007016:	f7fd fd1f 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000701a:	9801      	ldr	r0, [sp, #4]
          break;
1000701c:	e749      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000701e:	a804      	add	r0, sp, #16
10007020:	f7fd fc78 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007024:	9805      	ldr	r0, [sp, #20]
          break;
10007026:	e744      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007028:	a804      	add	r0, sp, #16
1000702a:	f7fd fc73 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000702e:	9806      	ldr	r0, [sp, #24]
          break;
10007030:	e73f      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
10007032:	f7fd fdbb 	bl	10004bac <RCC_GetCKPERFreq>
          break;
10007036:	e73c      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_UART24_SOURCE();
10007038:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000703c:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10007040:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10007044:	2b04      	cmp	r3, #4
10007046:	d818      	bhi.n	1000707a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
10007048:	e8df f013 	tbh	[pc, r3, lsl #1]
1000704c:	000a0007 	.word	0x000a0007
10007050:	0005000f 	.word	0x0005000f
10007054:	0397      	.short	0x0397
10007056:	48a0      	ldr	r0, [pc, #640]	; (100072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
10007058:	e72b      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK1Freq();
1000705a:	f7fd fe45 	bl	10004ce8 <HAL_RCC_GetPCLK1Freq>
          break;
1000705e:	e728      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007060:	a801      	add	r0, sp, #4
10007062:	f7fd fcf9 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007066:	9802      	ldr	r0, [sp, #8]
          break;
10007068:	e723      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000706a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000706e:	699b      	ldr	r3, [r3, #24]
10007070:	f003 0303 	and.w	r3, r3, #3
10007074:	4899      	ldr	r0, [pc, #612]	; (100072dc <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
10007076:	40d8      	lsrs	r0, r3
          break;
10007078:	e71b      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
1000707a:	2000      	movs	r0, #0
          break;
1000707c:	e719      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_UART35_SOURCE();
1000707e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007082:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10007086:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
1000708a:	2b04      	cmp	r3, #4
1000708c:	d818      	bhi.n	100070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
1000708e:	e8df f013 	tbh	[pc, r3, lsl #1]
10007092:	0007      	.short	0x0007
10007094:	000f000a 	.word	0x000f000a
10007098:	03770005 	.word	0x03770005
1000709c:	488e      	ldr	r0, [pc, #568]	; (100072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
1000709e:	e708      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK1Freq();
100070a0:	f7fd fe22 	bl	10004ce8 <HAL_RCC_GetPCLK1Freq>
          break;
100070a4:	e705      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100070a6:	a801      	add	r0, sp, #4
100070a8:	f7fd fcd6 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100070ac:	9802      	ldr	r0, [sp, #8]
          break;
100070ae:	e700      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100070b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070b4:	699b      	ldr	r3, [r3, #24]
100070b6:	f003 0303 	and.w	r3, r3, #3
100070ba:	4888      	ldr	r0, [pc, #544]	; (100072dc <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
100070bc:	40d8      	lsrs	r0, r3
          break;
100070be:	e6f8      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
100070c0:	2000      	movs	r0, #0
          break;
100070c2:	e6f6      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_UART78_SOURCE();
100070c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070c8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100070cc:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
100070d0:	2b04      	cmp	r3, #4
100070d2:	d818      	bhi.n	10007106 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
100070d4:	e8df f013 	tbh	[pc, r3, lsl #1]
100070d8:	000a0007 	.word	0x000a0007
100070dc:	0005000f 	.word	0x0005000f
100070e0:	0357      	.short	0x0357
100070e2:	487d      	ldr	r0, [pc, #500]	; (100072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
100070e4:	e6e5      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK1Freq();
100070e6:	f7fd fdff 	bl	10004ce8 <HAL_RCC_GetPCLK1Freq>
          break;
100070ea:	e6e2      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100070ec:	a801      	add	r0, sp, #4
100070ee:	f7fd fcb3 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100070f2:	9802      	ldr	r0, [sp, #8]
          break;
100070f4:	e6dd      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100070f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100070fa:	699b      	ldr	r3, [r3, #24]
100070fc:	f003 0303 	and.w	r3, r3, #3
10007100:	4876      	ldr	r0, [pc, #472]	; (100072dc <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
10007102:	40d8      	lsrs	r0, r3
          break;
10007104:	e6d5      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
10007106:	2000      	movs	r0, #0
          break;
10007108:	e6d3      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      frequency = HAL_RCC_GetMLHCLKFreq();
1000710a:	f7fd fe1b 	bl	10004d44 <HAL_RCC_GetMLHCLKFreq>
    break;//RCC_PERIPHCLK_DFSDM1
1000710e:	e6d0      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_FDCAN_SOURCE();
10007110:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007114:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10007118:	f003 0303 	and.w	r3, r3, #3
      switch (clksource)
1000711c:	2b03      	cmp	r3, #3
1000711e:	f200 8335 	bhi.w	1000778c <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
10007122:	e8df f003 	tbb	[pc, r3]
10007126:	0402      	.short	0x0402
10007128:	0e09      	.short	0x0e09
1000712a:	486d      	ldr	r0, [pc, #436]	; (100072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>)
1000712c:	e6c1      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000712e:	a804      	add	r0, sp, #16
10007130:	f7fd fbf0 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007134:	9805      	ldr	r0, [sp, #20]
          break;
10007136:	e6bc      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007138:	a801      	add	r0, sp, #4
1000713a:	f7fd fc8d 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000713e:	9802      	ldr	r0, [sp, #8]
          break;
10007140:	e6b7      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007142:	a801      	add	r0, sp, #4
10007144:	f7fd fc88 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007148:	9803      	ldr	r0, [sp, #12]
          break;
1000714a:	e6b2      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
1000714c:	4865      	ldr	r0, [pc, #404]	; (100072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
1000714e:	e6b0      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007150:	a801      	add	r0, sp, #4
10007152:	f7fd fc81 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007156:	9802      	ldr	r0, [sp, #8]
          break;
10007158:	e6ab      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000715a:	a804      	add	r0, sp, #16
1000715c:	f7fd fbda 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007160:	9805      	ldr	r0, [sp, #20]
          break;
10007162:	e6a6      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007164:	a804      	add	r0, sp, #16
10007166:	f7fd fbd5 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000716a:	9806      	ldr	r0, [sp, #24]
          break;
1000716c:	e6a1      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
1000716e:	f7fd fd1d 	bl	10004bac <RCC_GetCKPERFreq>
          break;
10007172:	e69e      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_SAI2_SOURCE();
10007174:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007178:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
1000717c:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10007180:	2b05      	cmp	r3, #5
10007182:	f200 8309 	bhi.w	10007798 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
10007186:	e8df f013 	tbh	[pc, r3, lsl #1]
1000718a:	0008      	.short	0x0008
1000718c:	0006000d 	.word	0x0006000d
10007190:	03070017 	.word	0x03070017
10007194:	0012      	.short	0x0012
10007196:	4853      	ldr	r0, [pc, #332]	; (100072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
10007198:	e68b      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000719a:	a801      	add	r0, sp, #4
1000719c:	f7fd fc5c 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100071a0:	9802      	ldr	r0, [sp, #8]
          break;
100071a2:	e686      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100071a4:	a804      	add	r0, sp, #16
100071a6:	f7fd fbb5 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100071aa:	9805      	ldr	r0, [sp, #20]
          break;
100071ac:	e681      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100071ae:	a804      	add	r0, sp, #16
100071b0:	f7fd fbb0 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100071b4:	9806      	ldr	r0, [sp, #24]
          break;
100071b6:	e67c      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
100071b8:	f7fd fcf8 	bl	10004bac <RCC_GetCKPERFreq>
          break;
100071bc:	e679      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_SAI3_SOURCE();
100071be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100071c2:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
100071c6:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
100071ca:	2b04      	cmp	r3, #4
100071cc:	f200 82e7 	bhi.w	1000779e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
100071d0:	e8df f003 	tbb	[pc, r3]
100071d4:	14030a05 	.word	0x14030a05
100071d8:	0f          	.byte	0x0f
100071d9:	00          	.byte	0x00
100071da:	4842      	ldr	r0, [pc, #264]	; (100072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
100071dc:	e669      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100071de:	a801      	add	r0, sp, #4
100071e0:	f7fd fc3a 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100071e4:	9802      	ldr	r0, [sp, #8]
          break;
100071e6:	e664      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100071e8:	a804      	add	r0, sp, #16
100071ea:	f7fd fb93 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
100071ee:	9805      	ldr	r0, [sp, #20]
          break;
100071f0:	e65f      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100071f2:	a804      	add	r0, sp, #16
100071f4:	f7fd fb8e 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100071f8:	9806      	ldr	r0, [sp, #24]
          break;
100071fa:	e65a      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
100071fc:	f7fd fcd6 	bl	10004bac <RCC_GetCKPERFreq>
          break;
10007200:	e657      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10007202:	4838      	ldr	r0, [pc, #224]	; (100072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
10007204:	e655      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007206:	a801      	add	r0, sp, #4
10007208:	f7fd fc26 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000720c:	9802      	ldr	r0, [sp, #8]
          break;
1000720e:	e650      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007210:	a804      	add	r0, sp, #16
10007212:	f7fd fb7f 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007216:	9805      	ldr	r0, [sp, #20]
          break;
10007218:	e64b      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000721a:	a804      	add	r0, sp, #16
1000721c:	f7fd fb7a 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10007220:	9806      	ldr	r0, [sp, #24]
          break;
10007222:	e646      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
10007224:	f7fd fcc2 	bl	10004bac <RCC_GetCKPERFreq>
          break;
10007228:	e643      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_SPI45_SOURCE();
1000722a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000722e:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
10007232:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10007236:	2b04      	cmp	r3, #4
10007238:	d818      	bhi.n	1000726c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
1000723a:	e8df f013 	tbh	[pc, r3, lsl #1]
1000723e:	0007      	.short	0x0007
10007240:	000f000a 	.word	0x000f000a
10007244:	02b60005 	.word	0x02b60005
10007248:	4823      	ldr	r0, [pc, #140]	; (100072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
1000724a:	e632      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK2Freq();
1000724c:	f7fd fd5a 	bl	10004d04 <HAL_RCC_GetPCLK2Freq>
          break;
10007250:	e62f      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007252:	a801      	add	r0, sp, #4
10007254:	f7fd fc00 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007258:	9802      	ldr	r0, [sp, #8]
          break;
1000725a:	e62a      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000725c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007260:	699b      	ldr	r3, [r3, #24]
10007262:	f003 0303 	and.w	r3, r3, #3
10007266:	481d      	ldr	r0, [pc, #116]	; (100072dc <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
10007268:	40d8      	lsrs	r0, r3
          break;
1000726a:	e622      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
1000726c:	2000      	movs	r0, #0
          break;
1000726e:	e620      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_USART6_SOURCE();
10007270:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007274:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10007278:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
1000727c:	2b04      	cmp	r3, #4
1000727e:	d818      	bhi.n	100072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
10007280:	e8df f013 	tbh	[pc, r3, lsl #1]
10007284:	000a0007 	.word	0x000a0007
10007288:	0005000f 	.word	0x0005000f
1000728c:	0296      	.short	0x0296
1000728e:	4812      	ldr	r0, [pc, #72]	; (100072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x880>)
10007290:	e60f      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK2Freq();
10007292:	f7fd fd37 	bl	10004d04 <HAL_RCC_GetPCLK2Freq>
          break;
10007296:	e60c      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007298:	a801      	add	r0, sp, #4
1000729a:	f7fd fbdd 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000729e:	9802      	ldr	r0, [sp, #8]
          break;
100072a0:	e607      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100072a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100072a6:	699b      	ldr	r3, [r3, #24]
100072a8:	f003 0303 	and.w	r3, r3, #3
100072ac:	480b      	ldr	r0, [pc, #44]	; (100072dc <HAL_RCCEx_GetPeriphCLKFreq+0x884>)
100072ae:	40d8      	lsrs	r0, r3
          break;
100072b0:	e5ff      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
100072b2:	2000      	movs	r0, #0
          break;
100072b4:	e5fd      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
100072b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
100072ba:	e5fa      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK3Freq();
100072bc:	f7fd fd30 	bl	10004d20 <HAL_RCC_GetPCLK3Freq>
          break;
100072c0:	e5f7      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100072c2:	a801      	add	r0, sp, #4
100072c4:	f7fd fbc8 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100072c8:	9802      	ldr	r0, [sp, #8]
          break;
100072ca:	e5f2      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
100072cc:	f7fd fc6e 	bl	10004bac <RCC_GetCKPERFreq>
          break;
100072d0:	e5ef      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
100072d2:	2000      	movs	r0, #0
          break;
100072d4:	e5ed      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
100072d6:	bf00      	nop
100072d8:	003d0900 	.word	0x003d0900
100072dc:	03d09000 	.word	0x03d09000
100072e0:	016e3600 	.word	0x016e3600
100072e4:	00bb8000 	.word	0x00bb8000
      clksource = __HAL_RCC_GET_LPTIM45_SOURCE();
100072e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100072ec:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
100072f0:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
100072f4:	2b05      	cmp	r3, #5
100072f6:	d81a      	bhi.n	1000732e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
100072f8:	e8df f013 	tbh	[pc, r3, lsl #1]
100072fc:	000c0009 	.word	0x000c0009
10007300:	00060011 	.word	0x00060011
10007304:	00160261 	.word	0x00160261
10007308:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1000730c:	e5d1      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK3Freq();
1000730e:	f7fd fd07 	bl	10004d20 <HAL_RCC_GetPCLK3Freq>
          break;
10007312:	e5ce      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007314:	a801      	add	r0, sp, #4
10007316:	f7fd fb9f 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000731a:	9801      	ldr	r0, [sp, #4]
          break;
1000731c:	e5c9      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000731e:	a804      	add	r0, sp, #16
10007320:	f7fd faf8 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007324:	9805      	ldr	r0, [sp, #20]
          break;
10007326:	e5c4      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
10007328:	f7fd fc40 	bl	10004bac <RCC_GetCKPERFreq>
          break;
1000732c:	e5c1      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
1000732e:	2000      	movs	r0, #0
          break;
10007330:	e5bf      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_SAI4_SOURCE();
10007332:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007336:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
1000733a:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
1000733e:	2b04      	cmp	r3, #4
10007340:	f200 8241 	bhi.w	100077c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
10007344:	e8df f003 	tbb	[pc, r3]
10007348:	14030a05 	.word	0x14030a05
1000734c:	0f          	.byte	0x0f
1000734d:	00          	.byte	0x00
1000734e:	48a3      	ldr	r0, [pc, #652]	; (100075dc <HAL_RCCEx_GetPeriphCLKFreq+0xb84>)
10007350:	e5af      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007352:	a801      	add	r0, sp, #4
10007354:	f7fd fb80 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
10007358:	9802      	ldr	r0, [sp, #8]
          break;
1000735a:	e5aa      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000735c:	a804      	add	r0, sp, #16
1000735e:	f7fd fad9 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007362:	9805      	ldr	r0, [sp, #20]
          break;
10007364:	e5a5      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007366:	a804      	add	r0, sp, #16
10007368:	f7fd fad4 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000736c:	9806      	ldr	r0, [sp, #24]
          break;
1000736e:	e5a0      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
10007370:	f7fd fc1c 	bl	10004bac <RCC_GetCKPERFreq>
          break;
10007374:	e59d      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007376:	a801      	add	r0, sp, #4
10007378:	f7fd fb6e 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000737c:	9801      	ldr	r0, [sp, #4]
          break;
1000737e:	e598      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007380:	a801      	add	r0, sp, #4
10007382:	f7fd fb69 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
      frequency = pll4_clocks.PLL4_Q_Frequency;
10007386:	9802      	ldr	r0, [sp, #8]
    break;//RCC_PERIPHCLK_LTDC
10007388:	e593      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_USBPHY_SOURCE();
1000738a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000738e:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10007392:	f003 0303 	and.w	r3, r3, #3
      switch (clksource)
10007396:	2b01      	cmp	r3, #1
10007398:	d007      	beq.n	100073aa <HAL_RCCEx_GetPeriphCLKFreq+0x952>
1000739a:	2b02      	cmp	r3, #2
1000739c:	f000 8216 	beq.w	100077cc <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
100073a0:	b10b      	cbz	r3, 100073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x94e>
          frequency = 0;
100073a2:	2000      	movs	r0, #0
100073a4:	e585      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
100073a6:	488e      	ldr	r0, [pc, #568]	; (100075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>)
100073a8:	e583      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100073aa:	a801      	add	r0, sp, #4
100073ac:	f7fd fb54 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100073b0:	9803      	ldr	r0, [sp, #12]
          break;
100073b2:	e57e      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
100073b4:	a807      	add	r0, sp, #28
100073b6:	f7fd fa1b 	bl	100047f0 <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
100073ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    break;//RCC_PERIPHCLK_DDRPHYC
100073bc:	e579      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_RTC_SOURCE();
100073be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100073c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100073c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (clksource)
100073ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
100073ce:	f000 8200 	beq.w	100077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
100073d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
100073d6:	d007      	beq.n	100073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
100073d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
100073dc:	d001      	beq.n	100073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
100073de:	2000      	movs	r0, #0
100073e0:	e567      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = LSE_VALUE;
100073e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
100073e6:	e564      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSE_VALUE / __HAL_RCC_GET_RTC_HSEDIV());
100073e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100073ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100073ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
100073f2:	3301      	adds	r3, #1
100073f4:	487a      	ldr	r0, [pc, #488]	; (100075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>)
100073f6:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
100073fa:	e55a      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_I2C46_SOURCE();
100073fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007400:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10007404:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10007408:	2b03      	cmp	r3, #3
1000740a:	f200 81e6 	bhi.w	100077da <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
1000740e:	e8df f003 	tbb	[pc, r3]
10007412:	0704      	.short	0x0704
10007414:	020c      	.short	0x020c
10007416:	4873      	ldr	r0, [pc, #460]	; (100075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
10007418:	e54b      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK5Freq();
1000741a:	f7fd fc1d 	bl	10004c58 <HAL_RCC_GetPCLK5Freq>
          break;
1000741e:	e548      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007420:	a804      	add	r0, sp, #16
10007422:	f7fd fa77 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007426:	9805      	ldr	r0, [sp, #20]
          break;
10007428:	e543      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000742a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000742e:	699b      	ldr	r3, [r3, #24]
10007430:	f003 0303 	and.w	r3, r3, #3
10007434:	486c      	ldr	r0, [pc, #432]	; (100075e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
10007436:	40d8      	lsrs	r0, r3
          break;
10007438:	e53b      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
1000743a:	486a      	ldr	r0, [pc, #424]	; (100075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
1000743c:	e539      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK5Freq();
1000743e:	f7fd fc0b 	bl	10004c58 <HAL_RCC_GetPCLK5Freq>
          break;
10007442:	e536      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007444:	a801      	add	r0, sp, #4
10007446:	f7fd fb07 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
1000744a:	9802      	ldr	r0, [sp, #8]
          break;
1000744c:	e531      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000744e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007452:	699b      	ldr	r3, [r3, #24]
10007454:	f003 0303 	and.w	r3, r3, #3
10007458:	4863      	ldr	r0, [pc, #396]	; (100075e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
1000745a:	40d8      	lsrs	r0, r3
          break;
1000745c:	e529      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000745e:	a804      	add	r0, sp, #16
10007460:	f7fd fa58 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007464:	9805      	ldr	r0, [sp, #20]
          break;
10007466:	e524      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
10007468:	2000      	movs	r0, #0
          break;
1000746a:	e522      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_USART1_SOURCE();
1000746c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007470:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10007474:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10007478:	2b05      	cmp	r3, #5
1000747a:	d81e      	bhi.n	100074ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
1000747c:	e8df f013 	tbh	[pc, r3, lsl #1]
10007480:	000b0008 	.word	0x000b0008
10007484:	00060010 	.word	0x00060010
10007488:	01b30018 	.word	0x01b30018
1000748c:	4855      	ldr	r0, [pc, #340]	; (100075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>)
1000748e:	e510      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetPCLK5Freq();
10007490:	f7fd fbe2 	bl	10004c58 <HAL_RCC_GetPCLK5Freq>
          break;
10007494:	e50d      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007496:	a804      	add	r0, sp, #16
10007498:	f7fd fa3c 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
1000749c:	9805      	ldr	r0, [sp, #20]
          break;
1000749e:	e508      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100074a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074a4:	699b      	ldr	r3, [r3, #24]
100074a6:	f003 0303 	and.w	r3, r3, #3
100074aa:	484f      	ldr	r0, [pc, #316]	; (100075e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
100074ac:	40d8      	lsrs	r0, r3
          break;
100074ae:	e500      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100074b0:	a801      	add	r0, sp, #4
100074b2:	f7fd fad1 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_Q_Frequency;
100074b6:	9802      	ldr	r0, [sp, #8]
          break;
100074b8:	e4fb      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
100074ba:	2000      	movs	r0, #0
          break;
100074bc:	e4f9      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_STGEN_SOURCE();
100074be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
      switch (clksource)
100074c6:	f013 0303 	ands.w	r3, r3, #3
100074ca:	d004      	beq.n	100074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
100074cc:	2b01      	cmp	r3, #1
100074ce:	f040 818d 	bne.w	100077ec <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
100074d2:	4843      	ldr	r0, [pc, #268]	; (100075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>)
100074d4:	e4ed      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100074d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074da:	699b      	ldr	r3, [r3, #24]
100074dc:	f003 0303 	and.w	r3, r3, #3
100074e0:	4841      	ldr	r0, [pc, #260]	; (100075e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
100074e2:	40d8      	lsrs	r0, r3
          break;
100074e4:	e4e5      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_QSPI_SOURCE();
100074e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100074ea:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
100074ee:	f003 0303 	and.w	r3, r3, #3
      switch (clksource)
100074f2:	2b03      	cmp	r3, #3
100074f4:	f200 817d 	bhi.w	100077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
100074f8:	e8df f003 	tbb	[pc, r3]
100074fc:	0f0a0502 	.word	0x0f0a0502
          frequency = HAL_RCC_GetACLKFreq();
10007500:	f7fd fb9a 	bl	10004c38 <HAL_RCC_GetACLKFreq>
          break;
10007504:	e4d5      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007506:	a804      	add	r0, sp, #16
10007508:	f7fd fa04 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000750c:	9806      	ldr	r0, [sp, #24]
          break;
1000750e:	e4d0      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007510:	a801      	add	r0, sp, #4
10007512:	f7fd faa1 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10007516:	9801      	ldr	r0, [sp, #4]
          break;
10007518:	e4cb      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
1000751a:	f7fd fb47 	bl	10004bac <RCC_GetCKPERFreq>
          break;
1000751e:	e4c8      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_ETH_SOURCE();
10007520:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007524:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
      switch (clksource)
10007528:	f013 0303 	ands.w	r3, r3, #3
1000752c:	d003      	beq.n	10007536 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
1000752e:	2b01      	cmp	r3, #1
10007530:	d006      	beq.n	10007540 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
10007532:	2000      	movs	r0, #0
10007534:	e4bd      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007536:	a801      	add	r0, sp, #4
10007538:	f7fd fa8e 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000753c:	9801      	ldr	r0, [sp, #4]
          break;
1000753e:	e4b8      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007540:	a804      	add	r0, sp, #16
10007542:	f7fd f9e7 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007546:	9805      	ldr	r0, [sp, #20]
          break;
10007548:	e4b3      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_FMC_SOURCE();
1000754a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000754e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10007552:	f003 0303 	and.w	r3, r3, #3
      switch (clksource)
10007556:	2b03      	cmp	r3, #3
10007558:	f200 814e 	bhi.w	100077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
1000755c:	e8df f003 	tbb	[pc, r3]
10007560:	0f0a0502 	.word	0x0f0a0502
          frequency = HAL_RCC_GetACLKFreq();
10007564:	f7fd fb68 	bl	10004c38 <HAL_RCC_GetACLKFreq>
          break;
10007568:	e4a3      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000756a:	a804      	add	r0, sp, #16
1000756c:	f7fd f9d2 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
10007570:	9806      	ldr	r0, [sp, #24]
          break;
10007572:	e49e      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007574:	a801      	add	r0, sp, #4
10007576:	f7fd fa6f 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
1000757a:	9801      	ldr	r0, [sp, #4]
          break;
1000757c:	e499      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
1000757e:	f7fd fb15 	bl	10004bac <RCC_GetCKPERFreq>
          break;
10007582:	e496      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10007584:	a807      	add	r0, sp, #28
10007586:	f7fd f933 	bl	100047f0 <HAL_RCC_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_Q_Frequency;
1000758a:	9808      	ldr	r0, [sp, #32]
    break;//RCC_PERIPHCLK_GPU
1000758c:	e491      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000758e:	a801      	add	r0, sp, #4
10007590:	f7fd fa62 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007594:	9803      	ldr	r0, [sp, #12]
          break;
10007596:	e48c      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HAL_RCC_GetHCLK2Freq();
10007598:	f7fd fbd0 	bl	10004d3c <HAL_RCC_GetHCLK2Freq>
          break;
1000759c:	e489      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000759e:	a804      	add	r0, sp, #16
100075a0:	f7fd f9b8 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
100075a4:	9806      	ldr	r0, [sp, #24]
          break;
100075a6:	e484      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100075a8:	a801      	add	r0, sp, #4
100075aa:	f7fd fa55 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
100075ae:	9801      	ldr	r0, [sp, #4]
          break;
100075b0:	e47f      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100075b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100075b6:	699b      	ldr	r3, [r3, #24]
100075b8:	f003 0303 	and.w	r3, r3, #3
100075bc:	480a      	ldr	r0, [pc, #40]	; (100075e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>)
100075be:	40d8      	lsrs	r0, r3
          break;
100075c0:	e477      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_ADC_SOURCE();
100075c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100075c6:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
100075ca:	f003 0303 	and.w	r3, r3, #3
      switch (clksource)
100075ce:	2b01      	cmp	r3, #1
100075d0:	d011      	beq.n	100075f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb9e>
100075d2:	2b02      	cmp	r3, #2
100075d4:	d012      	beq.n	100075fc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
100075d6:	b14b      	cbz	r3, 100075ec <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
100075d8:	2000      	movs	r0, #0
100075da:	e46a      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
100075dc:	00bb8000 	.word	0x00bb8000
100075e0:	016e3600 	.word	0x016e3600
100075e4:	003d0900 	.word	0x003d0900
100075e8:	03d09000 	.word	0x03d09000
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100075ec:	a801      	add	r0, sp, #4
100075ee:	f7fd fa33 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
100075f2:	9803      	ldr	r0, [sp, #12]
          break;
100075f4:	e45d      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = RCC_GetCKPERFreq();
100075f6:	f7fd fad9 	bl	10004bac <RCC_GetCKPERFreq>
          break;
100075fa:	e45a      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100075fc:	a804      	add	r0, sp, #16
100075fe:	f7fd f989 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
10007602:	9805      	ldr	r0, [sp, #20]
          break;
10007604:	e455      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10007606:	2000      	movs	r0, #0
10007608:	e453      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
1000760a:	a801      	add	r0, sp, #4
1000760c:	f7fd fa24 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007610:	9803      	ldr	r0, [sp, #12]
          break;
10007612:	e44e      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = LSE_VALUE;
10007614:	f44f 4000 	mov.w	r0, #32768	; 0x8000
          break;
10007618:	e44b      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = LSI_VALUE;
1000761a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
          break;
1000761e:	e448      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_RNG1_SOURCE();
10007620:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007624:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10007628:	f003 0303 	and.w	r3, r3, #3
      switch (clksource)
1000762c:	2b03      	cmp	r3, #3
1000762e:	d805      	bhi.n	1000763c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
10007630:	e8df f013 	tbh	[pc, r3, lsl #1]
10007634:	000600ee 	.word	0x000600ee
10007638:	000e000b 	.word	0x000e000b
1000763c:	2000      	movs	r0, #0
1000763e:	e438      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007640:	a801      	add	r0, sp, #4
10007642:	f7fd fa09 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_R_Frequency;
10007646:	9803      	ldr	r0, [sp, #12]
          break;
10007648:	e433      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = LSE_VALUE;
1000764a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
          break;
1000764e:	e430      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = LSI_VALUE;
10007650:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
          break;
10007654:	e42d      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      clksource = __HAL_RCC_GET_SDMMC12_SOURCE();
10007656:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000765a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
1000765e:	f003 0307 	and.w	r3, r3, #7
      switch (clksource)
10007662:	2b03      	cmp	r3, #3
10007664:	f200 80d7 	bhi.w	10007816 <HAL_RCCEx_GetPeriphCLKFreq+0xdbe>
10007668:	e8df f003 	tbb	[pc, r3]
1000766c:	0f0a0502 	.word	0x0f0a0502
          frequency = HAL_RCC_GetHCLK6Freq();
10007670:	f7fd faff 	bl	10004c72 <HAL_RCC_GetHCLK6Freq>
          break;
10007674:	e41d      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10007676:	a804      	add	r0, sp, #16
10007678:	f7fd f94c 	bl	10004914 <HAL_RCC_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
1000767c:	9806      	ldr	r0, [sp, #24]
          break;
1000767e:	e418      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10007680:	a801      	add	r0, sp, #4
10007682:	f7fd f9e9 	bl	10004a58 <HAL_RCC_GetPLL4ClockFreq>
          frequency = pll4_clocks.PLL4_P_Frequency;
10007686:	9801      	ldr	r0, [sp, #4]
          break;
10007688:	e413      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000768a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000768e:	699b      	ldr	r3, [r3, #24]
10007690:	f003 0303 	and.w	r3, r3, #3
10007694:	4861      	ldr	r0, [pc, #388]	; (1000781c <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>)
10007696:	40d8      	lsrs	r0, r3
          break;
10007698:	e40b      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            frequency /= 2UL;
1000769a:	0840      	lsrs	r0, r0, #1
            break;
1000769c:	e409      	b.n	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
        switch (__HAL_RCC_GET_APB1_DIV())
1000769e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100076a2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100076a6:	f003 0307 	and.w	r3, r3, #7
100076aa:	2b03      	cmp	r3, #3
100076ac:	d007      	beq.n	100076be <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
100076ae:	2b04      	cmp	r3, #4
100076b0:	d008      	beq.n	100076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
100076b2:	2b02      	cmp	r3, #2
100076b4:	f47f abfd 	bne.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            frequency /= 2UL;
100076b8:	0840      	lsrs	r0, r0, #1
            break;
100076ba:	f7ff bbfa 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            frequency /= 4UL;
100076be:	0880      	lsrs	r0, r0, #2
            break;
100076c0:	f7ff bbf7 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            frequency /= 8UL;
100076c4:	08c0      	lsrs	r0, r0, #3
            break;
100076c6:	f7ff bbf4 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      frequency = HAL_RCC_GetMCUFreq();
100076ca:	f7fd faff 	bl	10004ccc <HAL_RCC_GetMCUFreq>
      if (__HAL_RCC_GET_TIMG2PRES() == RCC_TIMG2PRES_ACTIVATED)
100076ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100076d2:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
100076d6:	f013 0f01 	tst.w	r3, #1
100076da:	d010      	beq.n	100076fe <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
        switch (__HAL_RCC_GET_APB2_DIV())
100076dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100076e0:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100076e4:	f003 0307 	and.w	r3, r3, #7
100076e8:	2b03      	cmp	r3, #3
100076ea:	d005      	beq.n	100076f8 <HAL_RCCEx_GetPeriphCLKFreq+0xca0>
100076ec:	2b04      	cmp	r3, #4
100076ee:	f47f abe0 	bne.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            frequency /= 4UL;
100076f2:	0880      	lsrs	r0, r0, #2
            break;
100076f4:	f7ff bbdd 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            frequency /= 2UL;
100076f8:	0840      	lsrs	r0, r0, #1
            break;
100076fa:	f7ff bbda 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
        switch (__HAL_RCC_GET_APB2_DIV())
100076fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10007702:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10007706:	f003 0307 	and.w	r3, r3, #7
1000770a:	2b03      	cmp	r3, #3
1000770c:	d007      	beq.n	1000771e <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
1000770e:	2b04      	cmp	r3, #4
10007710:	d008      	beq.n	10007724 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
10007712:	2b02      	cmp	r3, #2
10007714:	f47f abcd 	bne.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            frequency /= 2UL;
10007718:	0840      	lsrs	r0, r0, #1
            break;
1000771a:	f7ff bbca 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            frequency /= 4UL;
1000771e:	0880      	lsrs	r0, r0, #2
            break;
10007720:	f7ff bbc7 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            frequency /= 8UL;
10007724:	08c0      	lsrs	r0, r0, #3
            break;
10007726:	f7ff bbc4 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
  switch (PeriphClk)
1000772a:	2000      	movs	r0, #0
1000772c:	f7ff bbc1 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
      frequency = LSI_VALUE;
10007730:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
10007734:	f7ff bbbd 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
  switch (PeriphClk)
10007738:	2000      	movs	r0, #0
1000773a:	f7ff bbba 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
1000773e:	2000      	movs	r0, #0
10007740:	f7ff bbb7 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10007744:	2000      	movs	r0, #0
10007746:	f7ff bbb4 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
1000774a:	2000      	movs	r0, #0
1000774c:	f7ff bbb1 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = LSI_VALUE;
10007750:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
10007754:	f7ff bbad 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (CSI_VALUE / 122);
10007758:	f248 0012 	movw	r0, #32786	; 0x8012
1000775c:	f7ff bba9 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = CSI_VALUE;
10007760:	482f      	ldr	r0, [pc, #188]	; (10007820 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>)
10007762:	f7ff bba6 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = CSI_VALUE;
10007766:	482e      	ldr	r0, [pc, #184]	; (10007820 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>)
10007768:	f7ff bba3 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = LSI_VALUE;
1000776c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
10007770:	f7ff bb9f 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
10007774:	2000      	movs	r0, #0
10007776:	f7ff bb9c 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HSE_VALUE;
1000777a:	482a      	ldr	r0, [pc, #168]	; (10007824 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
1000777c:	f7ff bb99 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HSE_VALUE;
10007780:	4828      	ldr	r0, [pc, #160]	; (10007824 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
10007782:	f7ff bb96 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HSE_VALUE;
10007786:	4827      	ldr	r0, [pc, #156]	; (10007824 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
10007788:	f7ff bb93 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
1000778c:	2000      	movs	r0, #0
1000778e:	f7ff bb90 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
10007792:	2000      	movs	r0, #0
10007794:	f7ff bb8d 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0; //SAI2 manage this SPDIF_CKSYMB_VALUE
10007798:	2000      	movs	r0, #0
1000779a:	f7ff bb8a 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
1000779e:	2000      	movs	r0, #0
100077a0:	f7ff bb87 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
100077a4:	2000      	movs	r0, #0
100077a6:	f7ff bb84 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HSE_VALUE;
100077aa:	481e      	ldr	r0, [pc, #120]	; (10007824 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
100077ac:	f7ff bb81 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HSE_VALUE;
100077b0:	481c      	ldr	r0, [pc, #112]	; (10007824 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
100077b2:	f7ff bb7e 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = LSI_VALUE;
100077b6:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
100077ba:	f7ff bb7a 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = LSI_VALUE;
100077be:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
100077c2:	f7ff bb76 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
100077c6:	2000      	movs	r0, #0
100077c8:	f7ff bb73 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = (HSE_VALUE / 2UL);
100077cc:	4816      	ldr	r0, [pc, #88]	; (10007828 <HAL_RCCEx_GetPeriphCLKFreq+0xdd0>)
100077ce:	f7ff bb70 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = LSI_VALUE;
100077d2:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
100077d6:	f7ff bb6c 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
100077da:	2000      	movs	r0, #0
100077dc:	f7ff bb69 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HSE_VALUE;
100077e0:	4810      	ldr	r0, [pc, #64]	; (10007824 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
100077e2:	f7ff bb66 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = HSE_VALUE;
100077e6:	480f      	ldr	r0, [pc, #60]	; (10007824 <HAL_RCCEx_GetPeriphCLKFreq+0xdcc>)
100077e8:	f7ff bb63 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = 0;
100077ec:	2000      	movs	r0, #0
100077ee:	f7ff bb60 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
100077f2:	2000      	movs	r0, #0
100077f4:	f7ff bb5d 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
100077f8:	2000      	movs	r0, #0
100077fa:	f7ff bb5a 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
100077fe:	2000      	movs	r0, #0
10007800:	f7ff bb57 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10007804:	2000      	movs	r0, #0
10007806:	f7ff bb54 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = CSI_VALUE;
1000780a:	4805      	ldr	r0, [pc, #20]	; (10007820 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>)
1000780c:	f7ff bb51 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          frequency = CSI_VALUE;
10007810:	4803      	ldr	r0, [pc, #12]	; (10007820 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>)
10007812:	f7ff bb4e 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
10007816:	2000      	movs	r0, #0
  return (frequency);
10007818:	f7ff bb4b 	b.w	10006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
1000781c:	03d09000 	.word	0x03d09000
10007820:	003d0900 	.word	0x003d0900
10007824:	016e3600 	.word	0x016e3600
10007828:	00b71b00 	.word	0x00b71b00

1000782c <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
1000782c:	4770      	bx	lr

1000782e <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
1000782e:	4770      	bx	lr

10007830 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
10007830:	4770      	bx	lr

10007832 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
10007832:	4770      	bx	lr

10007834 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
10007834:	4770      	bx	lr

10007836 <HAL_TIM_IRQHandler>:
{
10007836:	b510      	push	{r4, lr}
10007838:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
1000783a:	6803      	ldr	r3, [r0, #0]
1000783c:	691a      	ldr	r2, [r3, #16]
1000783e:	f012 0f02 	tst.w	r2, #2
10007842:	d011      	beq.n	10007868 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
10007844:	68da      	ldr	r2, [r3, #12]
10007846:	f012 0f02 	tst.w	r2, #2
1000784a:	d00d      	beq.n	10007868 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
1000784c:	f06f 0202 	mvn.w	r2, #2
10007850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
10007852:	2301      	movs	r3, #1
10007854:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
10007856:	6803      	ldr	r3, [r0, #0]
10007858:	699b      	ldr	r3, [r3, #24]
1000785a:	f013 0f03 	tst.w	r3, #3
1000785e:	d079      	beq.n	10007954 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
10007860:	f7ff ffe6 	bl	10007830 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
10007864:	2300      	movs	r3, #0
10007866:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
10007868:	6823      	ldr	r3, [r4, #0]
1000786a:	691a      	ldr	r2, [r3, #16]
1000786c:	f012 0f04 	tst.w	r2, #4
10007870:	d012      	beq.n	10007898 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
10007872:	68da      	ldr	r2, [r3, #12]
10007874:	f012 0f04 	tst.w	r2, #4
10007878:	d00e      	beq.n	10007898 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
1000787a:	f06f 0204 	mvn.w	r2, #4
1000787e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
10007880:	2302      	movs	r3, #2
10007882:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
10007884:	6823      	ldr	r3, [r4, #0]
10007886:	699b      	ldr	r3, [r3, #24]
10007888:	f413 7f40 	tst.w	r3, #768	; 0x300
1000788c:	d068      	beq.n	10007960 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
1000788e:	4620      	mov	r0, r4
10007890:	f7ff ffce 	bl	10007830 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
10007894:	2300      	movs	r3, #0
10007896:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
10007898:	6823      	ldr	r3, [r4, #0]
1000789a:	691a      	ldr	r2, [r3, #16]
1000789c:	f012 0f08 	tst.w	r2, #8
100078a0:	d012      	beq.n	100078c8 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
100078a2:	68da      	ldr	r2, [r3, #12]
100078a4:	f012 0f08 	tst.w	r2, #8
100078a8:	d00e      	beq.n	100078c8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
100078aa:	f06f 0208 	mvn.w	r2, #8
100078ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
100078b0:	2304      	movs	r3, #4
100078b2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
100078b4:	6823      	ldr	r3, [r4, #0]
100078b6:	69db      	ldr	r3, [r3, #28]
100078b8:	f013 0f03 	tst.w	r3, #3
100078bc:	d057      	beq.n	1000796e <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
100078be:	4620      	mov	r0, r4
100078c0:	f7ff ffb6 	bl	10007830 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
100078c4:	2300      	movs	r3, #0
100078c6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
100078c8:	6823      	ldr	r3, [r4, #0]
100078ca:	691a      	ldr	r2, [r3, #16]
100078cc:	f012 0f10 	tst.w	r2, #16
100078d0:	d012      	beq.n	100078f8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
100078d2:	68da      	ldr	r2, [r3, #12]
100078d4:	f012 0f10 	tst.w	r2, #16
100078d8:	d00e      	beq.n	100078f8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
100078da:	f06f 0210 	mvn.w	r2, #16
100078de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
100078e0:	2308      	movs	r3, #8
100078e2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
100078e4:	6823      	ldr	r3, [r4, #0]
100078e6:	69db      	ldr	r3, [r3, #28]
100078e8:	f413 7f40 	tst.w	r3, #768	; 0x300
100078ec:	d046      	beq.n	1000797c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
100078ee:	4620      	mov	r0, r4
100078f0:	f7ff ff9e 	bl	10007830 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
100078f4:	2300      	movs	r3, #0
100078f6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
100078f8:	6823      	ldr	r3, [r4, #0]
100078fa:	691a      	ldr	r2, [r3, #16]
100078fc:	f012 0f01 	tst.w	r2, #1
10007900:	d003      	beq.n	1000790a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
10007902:	68da      	ldr	r2, [r3, #12]
10007904:	f012 0f01 	tst.w	r2, #1
10007908:	d13f      	bne.n	1000798a <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
1000790a:	6823      	ldr	r3, [r4, #0]
1000790c:	691a      	ldr	r2, [r3, #16]
1000790e:	f012 0f80 	tst.w	r2, #128	; 0x80
10007912:	d003      	beq.n	1000791c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
10007914:	68da      	ldr	r2, [r3, #12]
10007916:	f012 0f80 	tst.w	r2, #128	; 0x80
1000791a:	d13d      	bne.n	10007998 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
1000791c:	6823      	ldr	r3, [r4, #0]
1000791e:	691a      	ldr	r2, [r3, #16]
10007920:	f412 7f80 	tst.w	r2, #256	; 0x100
10007924:	d003      	beq.n	1000792e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
10007926:	68da      	ldr	r2, [r3, #12]
10007928:	f012 0f80 	tst.w	r2, #128	; 0x80
1000792c:	d13b      	bne.n	100079a6 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
1000792e:	6823      	ldr	r3, [r4, #0]
10007930:	691a      	ldr	r2, [r3, #16]
10007932:	f012 0f40 	tst.w	r2, #64	; 0x40
10007936:	d003      	beq.n	10007940 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
10007938:	68da      	ldr	r2, [r3, #12]
1000793a:	f012 0f40 	tst.w	r2, #64	; 0x40
1000793e:	d139      	bne.n	100079b4 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
10007940:	6823      	ldr	r3, [r4, #0]
10007942:	691a      	ldr	r2, [r3, #16]
10007944:	f012 0f20 	tst.w	r2, #32
10007948:	d003      	beq.n	10007952 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
1000794a:	68da      	ldr	r2, [r3, #12]
1000794c:	f012 0f20 	tst.w	r2, #32
10007950:	d137      	bne.n	100079c2 <HAL_TIM_IRQHandler+0x18c>
}
10007952:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
10007954:	f7ff ff6b 	bl	1000782e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
10007958:	4620      	mov	r0, r4
1000795a:	f7ff ff6a 	bl	10007832 <HAL_TIM_PWM_PulseFinishedCallback>
1000795e:	e781      	b.n	10007864 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
10007960:	4620      	mov	r0, r4
10007962:	f7ff ff64 	bl	1000782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
10007966:	4620      	mov	r0, r4
10007968:	f7ff ff63 	bl	10007832 <HAL_TIM_PWM_PulseFinishedCallback>
1000796c:	e792      	b.n	10007894 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
1000796e:	4620      	mov	r0, r4
10007970:	f7ff ff5d 	bl	1000782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
10007974:	4620      	mov	r0, r4
10007976:	f7ff ff5c 	bl	10007832 <HAL_TIM_PWM_PulseFinishedCallback>
1000797a:	e7a3      	b.n	100078c4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
1000797c:	4620      	mov	r0, r4
1000797e:	f7ff ff56 	bl	1000782e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
10007982:	4620      	mov	r0, r4
10007984:	f7ff ff55 	bl	10007832 <HAL_TIM_PWM_PulseFinishedCallback>
10007988:	e7b4      	b.n	100078f4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
1000798a:	f06f 0201 	mvn.w	r2, #1
1000798e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
10007990:	4620      	mov	r0, r4
10007992:	f7ff ff4b 	bl	1000782c <HAL_TIM_PeriodElapsedCallback>
10007996:	e7b8      	b.n	1000790a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
10007998:	f06f 0280 	mvn.w	r2, #128	; 0x80
1000799c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
1000799e:	4620      	mov	r0, r4
100079a0:	f000 f817 	bl	100079d2 <HAL_TIMEx_BreakCallback>
100079a4:	e7ba      	b.n	1000791c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
100079a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
100079aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
100079ac:	4620      	mov	r0, r4
100079ae:	f000 f811 	bl	100079d4 <HAL_TIMEx_Break2Callback>
100079b2:	e7bc      	b.n	1000792e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
100079b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
100079b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
100079ba:	4620      	mov	r0, r4
100079bc:	f7ff ff3a 	bl	10007834 <HAL_TIM_TriggerCallback>
100079c0:	e7be      	b.n	10007940 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
100079c2:	f06f 0220 	mvn.w	r2, #32
100079c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
100079c8:	4620      	mov	r0, r4
100079ca:	f000 f801 	bl	100079d0 <HAL_TIMEx_CommutCallback>
}
100079ce:	e7c0      	b.n	10007952 <HAL_TIM_IRQHandler+0x11c>

100079d0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
100079d0:	4770      	bx	lr

100079d2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
100079d2:	4770      	bx	lr

100079d4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
100079d4:	4770      	bx	lr
	...

100079d8 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
100079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100079da:	460d      	mov	r5, r1
100079dc:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
100079de:	4b0c      	ldr	r3, [pc, #48]	; (10007a10 <metal_generic_dev_open+0x38>)
100079e0:	699c      	ldr	r4, [r3, #24]
100079e2:	e000      	b.n	100079e6 <metal_generic_dev_open+0xe>
100079e4:	6824      	ldr	r4, [r4, #0]
100079e6:	4b0b      	ldr	r3, [pc, #44]	; (10007a14 <metal_generic_dev_open+0x3c>)
100079e8:	429c      	cmp	r4, r3
100079ea:	d00d      	beq.n	10007a08 <metal_generic_dev_open+0x30>
		dev = metal_container_of(node, struct metal_device, node);
100079ec:	f1a4 067c 	sub.w	r6, r4, #124	; 0x7c
		if (strcmp(dev->name, dev_name) == 0) {
100079f0:	4629      	mov	r1, r5
100079f2:	f854 0c7c 	ldr.w	r0, [r4, #-124]
100079f6:	f7f8 fb23 	bl	10000040 <strcmp>
100079fa:	2800      	cmp	r0, #0
100079fc:	d1f2      	bne.n	100079e4 <metal_generic_dev_open+0xc>
			*device = dev;
100079fe:	603e      	str	r6, [r7, #0]
			return metal_generic_dev_sys_open(dev);
10007a00:	4630      	mov	r0, r6
10007a02:	f000 f9d0 	bl	10007da6 <metal_generic_dev_sys_open>
10007a06:	e001      	b.n	10007a0c <metal_generic_dev_open+0x34>
		}
	}

	return -ENODEV;
10007a08:	f06f 0012 	mvn.w	r0, #18
}
10007a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10007a0e:	bf00      	nop
10007a10:	10021354 	.word	0x10021354
10007a14:	1002136c 	.word	0x1002136c

10007a18 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
10007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10007a1a:	4617      	mov	r7, r2
10007a1c:	9e06      	ldr	r6, [sp, #24]
10007a1e:	9d07      	ldr	r5, [sp, #28]
	int i;
	(void)bus;
	(void)device;

	if (sg_out != sg_in)
10007a20:	429d      	cmp	r5, r3
10007a22:	d006      	beq.n	10007a32 <metal_generic_dev_dma_map+0x1a>
10007a24:	4619      	mov	r1, r3
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
10007a26:	eb06 0246 	add.w	r2, r6, r6, lsl #1
10007a2a:	0092      	lsls	r2, r2, #2
10007a2c:	4628      	mov	r0, r5
10007a2e:	f001 fa3d 	bl	10008eac <memcpy>
{
10007a32:	2400      	movs	r4, #0
10007a34:	e009      	b.n	10007a4a <metal_generic_dev_dma_map+0x32>
	for (i = 0; i < nents_in; i++) {
		if (dir == METAL_DMA_DEV_W) {
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
10007a36:	eb04 0344 	add.w	r3, r4, r4, lsl #1
10007a3a:	eb05 0183 	add.w	r1, r5, r3, lsl #2
	metal_machine_cache_flush(addr, len);
}

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
	metal_machine_cache_invalidate(addr, len);
10007a3e:	6889      	ldr	r1, [r1, #8]
10007a40:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
10007a44:	f000 f9ef 	bl	10007e26 <metal_machine_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
10007a48:	3401      	adds	r4, #1
10007a4a:	42b4      	cmp	r4, r6
10007a4c:	da0b      	bge.n	10007a66 <metal_generic_dev_dma_map+0x4e>
		if (dir == METAL_DMA_DEV_W) {
10007a4e:	2f02      	cmp	r7, #2
10007a50:	d1f1      	bne.n	10007a36 <metal_generic_dev_dma_map+0x1e>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
10007a52:	eb04 0344 	add.w	r3, r4, r4, lsl #1
10007a56:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	metal_machine_cache_flush(addr, len);
10007a5a:	6891      	ldr	r1, [r2, #8]
10007a5c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
10007a60:	f000 f9e0 	bl	10007e24 <metal_machine_cache_flush>
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
	__metal_cache_flush(addr, len);
}
10007a64:	e7e7      	b.n	10007a36 <metal_generic_dev_dma_map+0x1e>
	}

	return nents_in;
}
10007a66:	4630      	mov	r0, r6
10007a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10007a6a <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
10007a6a:	b570      	push	{r4, r5, r6, lr}
10007a6c:	461d      	mov	r5, r3
10007a6e:	9e04      	ldr	r6, [sp, #16]
	int i;
	(void)bus;
	(void)device;
	(void)dir;

	for (i = 0; i < nents; i++) {
10007a70:	2400      	movs	r4, #0
10007a72:	e009      	b.n	10007a88 <metal_generic_dev_dma_unmap+0x1e>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
10007a74:	eb04 0244 	add.w	r2, r4, r4, lsl #1
10007a78:	eb05 0382 	add.w	r3, r5, r2, lsl #2
	metal_machine_cache_invalidate(addr, len);
10007a7c:	6899      	ldr	r1, [r3, #8]
10007a7e:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
10007a82:	f000 f9d0 	bl	10007e26 <metal_machine_cache_invalidate>
	for (i = 0; i < nents; i++) {
10007a86:	3401      	adds	r4, #1
10007a88:	42b4      	cmp	r4, r6
10007a8a:	dbf3      	blt.n	10007a74 <metal_generic_dev_dma_unmap+0xa>
	}
}
10007a8c:	bd70      	pop	{r4, r5, r6, pc}
	...

10007a90 <metal_bus_find>:
{
10007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10007a92:	4605      	mov	r5, r0
10007a94:	460f      	mov	r7, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
10007a96:	4b0c      	ldr	r3, [pc, #48]	; (10007ac8 <metal_bus_find+0x38>)
10007a98:	689c      	ldr	r4, [r3, #8]
10007a9a:	e000      	b.n	10007a9e <metal_bus_find+0xe>
10007a9c:	6824      	ldr	r4, [r4, #0]
10007a9e:	4b0b      	ldr	r3, [pc, #44]	; (10007acc <metal_bus_find+0x3c>)
10007aa0:	429c      	cmp	r4, r3
10007aa2:	d00d      	beq.n	10007ac0 <metal_bus_find+0x30>
		bus = metal_container_of(node, struct metal_bus, node);
10007aa4:	f1a4 0624 	sub.w	r6, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
10007aa8:	4629      	mov	r1, r5
10007aaa:	f854 0c24 	ldr.w	r0, [r4, #-36]
10007aae:	f7f8 fac7 	bl	10000040 <strcmp>
10007ab2:	4603      	mov	r3, r0
10007ab4:	2800      	cmp	r0, #0
10007ab6:	d1f1      	bne.n	10007a9c <metal_bus_find+0xc>
10007ab8:	2f00      	cmp	r7, #0
10007aba:	d0ef      	beq.n	10007a9c <metal_bus_find+0xc>
			*result = bus;
10007abc:	603e      	str	r6, [r7, #0]
			return 0;
10007abe:	e001      	b.n	10007ac4 <metal_bus_find+0x34>
	return -ENOENT;
10007ac0:	f06f 0301 	mvn.w	r3, #1
}
10007ac4:	4618      	mov	r0, r3
10007ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10007ac8:	10021354 	.word	0x10021354
10007acc:	1002135c 	.word	0x1002135c

10007ad0 <metal_bus_register>:
	if (!bus || !bus->name || !strlen(bus->name))
10007ad0:	b320      	cbz	r0, 10007b1c <metal_bus_register+0x4c>
{
10007ad2:	b510      	push	{r4, lr}
10007ad4:	4604      	mov	r4, r0
	if (!bus || !bus->name || !strlen(bus->name))
10007ad6:	6800      	ldr	r0, [r0, #0]
10007ad8:	b318      	cbz	r0, 10007b22 <metal_bus_register+0x52>
10007ada:	7803      	ldrb	r3, [r0, #0]
10007adc:	b323      	cbz	r3, 10007b28 <metal_bus_register+0x58>
	if (metal_bus_find(bus->name, NULL) == 0)
10007ade:	2100      	movs	r1, #0
10007ae0:	f7ff ffd6 	bl	10007a90 <metal_bus_find>
10007ae4:	b318      	cbz	r0, 10007b2e <metal_bus_register+0x5e>
	metal_list_init(&bus->devices);
10007ae6:	f104 031c 	add.w	r3, r4, #28
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
10007aea:	6223      	str	r3, [r4, #32]
	list->next = list;
10007aec:	61e3      	str	r3, [r4, #28]
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
10007aee:	f104 0224 	add.w	r2, r4, #36	; 0x24
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
10007af2:	4b12      	ldr	r3, [pc, #72]	; (10007b3c <metal_bus_register+0x6c>)
10007af4:	68d9      	ldr	r1, [r3, #12]
10007af6:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
10007af8:	f103 0008 	add.w	r0, r3, #8
10007afc:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->next->prev = new_node;
10007afe:	60da      	str	r2, [r3, #12]
	new_node->prev->next = new_node;
10007b00:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
10007b02:	781b      	ldrb	r3, [r3, #0]
10007b04:	2b06      	cmp	r3, #6
10007b06:	d915      	bls.n	10007b34 <metal_bus_register+0x64>
10007b08:	f1a0 0308 	sub.w	r3, r0, #8
10007b0c:	685b      	ldr	r3, [r3, #4]
10007b0e:	b19b      	cbz	r3, 10007b38 <metal_bus_register+0x68>
10007b10:	6822      	ldr	r2, [r4, #0]
10007b12:	490b      	ldr	r1, [pc, #44]	; (10007b40 <metal_bus_register+0x70>)
10007b14:	2007      	movs	r0, #7
10007b16:	4798      	blx	r3
	return 0;
10007b18:	2000      	movs	r0, #0
10007b1a:	e00c      	b.n	10007b36 <metal_bus_register+0x66>
		return -EINVAL;
10007b1c:	f06f 0015 	mvn.w	r0, #21
}
10007b20:	4770      	bx	lr
		return -EINVAL;
10007b22:	f06f 0015 	mvn.w	r0, #21
10007b26:	e006      	b.n	10007b36 <metal_bus_register+0x66>
10007b28:	f06f 0015 	mvn.w	r0, #21
10007b2c:	e003      	b.n	10007b36 <metal_bus_register+0x66>
		return -EEXIST;
10007b2e:	f06f 0010 	mvn.w	r0, #16
10007b32:	e000      	b.n	10007b36 <metal_bus_register+0x66>
	return 0;
10007b34:	2000      	movs	r0, #0
}
10007b36:	bd10      	pop	{r4, pc}
	return 0;
10007b38:	2000      	movs	r0, #0
10007b3a:	e7fc      	b.n	10007b36 <metal_bus_register+0x66>
10007b3c:	10021354 	.word	0x10021354
10007b40:	1000a85c 	.word	0x1000a85c

10007b44 <metal_device_open>:
	if (!bus_name || !strlen(bus_name) ||
10007b44:	b1a8      	cbz	r0, 10007b72 <metal_device_open+0x2e>
{
10007b46:	b530      	push	{r4, r5, lr}
10007b48:	b083      	sub	sp, #12
10007b4a:	460c      	mov	r4, r1
10007b4c:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
10007b4e:	7802      	ldrb	r2, [r0, #0]
10007b50:	b192      	cbz	r2, 10007b78 <metal_device_open+0x34>
10007b52:	b1a1      	cbz	r1, 10007b7e <metal_device_open+0x3a>
	    !dev_name || !strlen(dev_name) ||
10007b54:	780a      	ldrb	r2, [r1, #0]
10007b56:	b1aa      	cbz	r2, 10007b84 <metal_device_open+0x40>
10007b58:	b1bd      	cbz	r5, 10007b8a <metal_device_open+0x46>
	error = metal_bus_find(bus_name, &bus);
10007b5a:	a901      	add	r1, sp, #4
10007b5c:	f7ff ff98 	bl	10007a90 <metal_bus_find>
	if (error)
10007b60:	b928      	cbnz	r0, 10007b6e <metal_device_open+0x2a>
	if (!bus->ops.dev_open)
10007b62:	9801      	ldr	r0, [sp, #4]
10007b64:	6883      	ldr	r3, [r0, #8]
10007b66:	b19b      	cbz	r3, 10007b90 <metal_device_open+0x4c>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
10007b68:	462a      	mov	r2, r5
10007b6a:	4621      	mov	r1, r4
10007b6c:	4798      	blx	r3
}
10007b6e:	b003      	add	sp, #12
10007b70:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
10007b72:	f06f 0015 	mvn.w	r0, #21
}
10007b76:	4770      	bx	lr
		return -EINVAL;
10007b78:	f06f 0015 	mvn.w	r0, #21
10007b7c:	e7f7      	b.n	10007b6e <metal_device_open+0x2a>
10007b7e:	f06f 0015 	mvn.w	r0, #21
10007b82:	e7f4      	b.n	10007b6e <metal_device_open+0x2a>
10007b84:	f06f 0015 	mvn.w	r0, #21
10007b88:	e7f1      	b.n	10007b6e <metal_device_open+0x2a>
10007b8a:	f06f 0015 	mvn.w	r0, #21
10007b8e:	e7ee      	b.n	10007b6e <metal_device_open+0x2a>
		return -ENODEV;
10007b90:	f06f 0012 	mvn.w	r0, #18
10007b94:	e7eb      	b.n	10007b6e <metal_device_open+0x2a>
	...

10007b98 <metal_register_generic_device>:
	if (!device->name || !strlen(device->name) ||
10007b98:	6803      	ldr	r3, [r0, #0]
10007b9a:	b1b3      	cbz	r3, 10007bca <metal_register_generic_device+0x32>
10007b9c:	781b      	ldrb	r3, [r3, #0]
10007b9e:	b1bb      	cbz	r3, 10007bd0 <metal_register_generic_device+0x38>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
10007ba0:	6883      	ldr	r3, [r0, #8]
	if (!device->name || !strlen(device->name) ||
10007ba2:	2b02      	cmp	r3, #2
10007ba4:	d817      	bhi.n	10007bd6 <metal_register_generic_device+0x3e>
{
10007ba6:	b410      	push	{r4}
	device->bus = &metal_generic_bus;
10007ba8:	4b0c      	ldr	r3, [pc, #48]	; (10007bdc <metal_register_generic_device+0x44>)
10007baa:	6043      	str	r3, [r0, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
10007bac:	f100 017c 	add.w	r1, r0, #124	; 0x7c
	new_node->prev = node->prev;
10007bb0:	4b0b      	ldr	r3, [pc, #44]	; (10007be0 <metal_register_generic_device+0x48>)
10007bb2:	69da      	ldr	r2, [r3, #28]
10007bb4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
	new_node->next = node;
10007bb8:	f103 0418 	add.w	r4, r3, #24
10007bbc:	67c4      	str	r4, [r0, #124]	; 0x7c
	new_node->next->prev = new_node;
10007bbe:	61d9      	str	r1, [r3, #28]
	new_node->prev->next = new_node;
10007bc0:	6011      	str	r1, [r2, #0]
	return 0;
10007bc2:	2000      	movs	r0, #0
}
10007bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
10007bc8:	4770      	bx	lr
		return -EINVAL;
10007bca:	f06f 0015 	mvn.w	r0, #21
10007bce:	4770      	bx	lr
10007bd0:	f06f 0015 	mvn.w	r0, #21
10007bd4:	4770      	bx	lr
10007bd6:	f06f 0015 	mvn.w	r0, #21
}
10007bda:	4770      	bx	lr
10007bdc:	100203fc 	.word	0x100203fc
10007be0:	10021354 	.word	0x10021354

10007be4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
10007be4:	b538      	push	{r3, r4, r5, lr}
10007be6:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
10007be8:	4c0c      	ldr	r4, [pc, #48]	; (10007c1c <metal_init+0x38>)
10007bea:	2220      	movs	r2, #32
10007bec:	2100      	movs	r1, #0
10007bee:	4620      	mov	r0, r4
10007bf0:	f001 f96a 	bl	10008ec8 <memset>

	_metal.common.log_handler   = params->log_handler;
10007bf4:	682b      	ldr	r3, [r5, #0]
10007bf6:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
10007bf8:	792a      	ldrb	r2, [r5, #4]
10007bfa:	4623      	mov	r3, r4
10007bfc:	f803 2b08 	strb.w	r2, [r3], #8
	list->prev = list;
10007c00:	60e3      	str	r3, [r4, #12]
	list->next = list;
10007c02:	60a3      	str	r3, [r4, #8]
	list->prev = list;
10007c04:	f104 0310 	add.w	r3, r4, #16
10007c08:	6163      	str	r3, [r4, #20]
	list->next = list;
10007c0a:	6123      	str	r3, [r4, #16]
	list->prev = list;
10007c0c:	f104 0318 	add.w	r3, r4, #24
10007c10:	61e3      	str	r3, [r4, #28]
	list->next = list;
10007c12:	61a3      	str	r3, [r4, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
10007c14:	4628      	mov	r0, r5
10007c16:	f000 f8df 	bl	10007dd8 <metal_sys_init>
	if (error)
		return error;

	return error;
}
10007c1a:	bd38      	pop	{r3, r4, r5, pc}
10007c1c:	10021354 	.word	0x10021354

10007c20 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
10007c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
10007c24:	b089      	sub	sp, #36	; 0x24
10007c26:	4604      	mov	r4, r0
10007c28:	4688      	mov	r8, r1
10007c2a:	4617      	mov	r7, r2
10007c2c:	461e      	mov	r6, r3
10007c2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
	const struct metal_io_ops nops = {
10007c30:	2220      	movs	r2, #32
10007c32:	2100      	movs	r1, #0
10007c34:	4668      	mov	r0, sp
10007c36:	f001 f947 	bl	10008ec8 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
10007c3a:	f8c4 8000 	str.w	r8, [r4]
	io->physmap = physmap;
10007c3e:	6067      	str	r7, [r4, #4]
	io->size = size;
10007c40:	60a6      	str	r6, [r4, #8]
	io->page_shift = page_shift;
10007c42:	60e5      	str	r5, [r4, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
10007c44:	2d1f      	cmp	r5, #31
10007c46:	d917      	bls.n	10007c78 <metal_io_init+0x58>
		/* avoid overflow */
		io->page_mask = -1UL;
10007c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10007c4c:	6123      	str	r3, [r4, #16]
	else
		io->page_mask = (1UL << page_shift) - 1UL;
	io->mem_flags = mem_flags;
10007c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
10007c50:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
10007c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
10007c54:	b1bb      	cbz	r3, 10007c86 <metal_io_init+0x66>
10007c56:	f104 0e18 	add.w	lr, r4, #24
10007c5a:	469c      	mov	ip, r3
10007c5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
10007c60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
10007c64:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
10007c68:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
10007c6c:	4620      	mov	r0, r4
10007c6e:	f000 f8bb 	bl	10007de8 <metal_sys_io_mem_map>
}
10007c72:	b009      	add	sp, #36	; 0x24
10007c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		io->page_mask = (1UL << page_shift) - 1UL;
10007c78:	2301      	movs	r3, #1
10007c7a:	fa03 f905 	lsl.w	r9, r3, r5
10007c7e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
10007c82:	6123      	str	r3, [r4, #16]
10007c84:	e7e3      	b.n	10007c4e <metal_io_init+0x2e>
	io->ops = ops ? *ops : nops;
10007c86:	f104 0518 	add.w	r5, r4, #24
10007c8a:	466e      	mov	r6, sp
10007c8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
10007c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
10007c90:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
10007c94:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
10007c98:	e7e8      	b.n	10007c6c <metal_io_init+0x4c>

10007c9a <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
10007c9a:	b530      	push	{r4, r5, lr}
10007c9c:	b083      	sub	sp, #12
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
	return (io->virt != METAL_BAD_VA && offset < io->size
10007c9e:	6804      	ldr	r4, [r0, #0]
		? (void *)((uintptr_t)io->virt + offset)
		: NULL);
10007ca0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
10007ca4:	d032      	beq.n	10007d0c <metal_io_block_read+0x72>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007ca6:	6885      	ldr	r5, [r0, #8]
10007ca8:	42a9      	cmp	r1, r5
10007caa:	d232      	bcs.n	10007d12 <metal_io_block_read+0x78>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
10007cac:	eb11 0c04 	adds.w	ip, r1, r4
10007cb0:	d032      	beq.n	10007d18 <metal_io_block_read+0x7e>
		return -ERANGE;
	if ((offset + len) > io->size)
10007cb2:	185c      	adds	r4, r3, r1
10007cb4:	42ac      	cmp	r4, r5
10007cb6:	d900      	bls.n	10007cba <metal_io_block_read+0x20>
		len = io->size - offset;
10007cb8:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
10007cba:	6a04      	ldr	r4, [r0, #32]
10007cbc:	b124      	cbz	r4, 10007cc8 <metal_io_block_read+0x2e>
		retlen = (*io->ops.block_read)(
10007cbe:	9300      	str	r3, [sp, #0]
10007cc0:	2305      	movs	r3, #5
10007cc2:	47a0      	blx	r4
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
10007cc4:	b003      	add	sp, #12
10007cc6:	bd30      	pop	{r4, r5, pc}
		atomic_thread_fence(memory_order_seq_cst);
10007cc8:	f3bf 8f5b 	dmb	ish
		while ( len && (
10007ccc:	4619      	mov	r1, r3
10007cce:	e004      	b.n	10007cda <metal_io_block_read+0x40>
				*(const unsigned char *)ptr;
10007cd0:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
10007cd4:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
10007cd8:	3901      	subs	r1, #1
		while ( len && (
10007cda:	b159      	cbz	r1, 10007cf4 <metal_io_block_read+0x5a>
10007cdc:	f012 0f03 	tst.w	r2, #3
10007ce0:	d1f6      	bne.n	10007cd0 <metal_io_block_read+0x36>
			((uintptr_t)dest % sizeof(int)) ||
10007ce2:	f01c 0f03 	tst.w	ip, #3
10007ce6:	d1f3      	bne.n	10007cd0 <metal_io_block_read+0x36>
10007ce8:	e004      	b.n	10007cf4 <metal_io_block_read+0x5a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
10007cea:	f85c 0b04 	ldr.w	r0, [ip], #4
10007cee:	f842 0b04 	str.w	r0, [r2], #4
					len -= sizeof(int))
10007cf2:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
10007cf4:	2903      	cmp	r1, #3
10007cf6:	dcf8      	bgt.n	10007cea <metal_io_block_read+0x50>
10007cf8:	e004      	b.n	10007d04 <metal_io_block_read+0x6a>
				*(const unsigned char *)ptr;
10007cfa:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
10007cfe:	f802 0b01 	strb.w	r0, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
10007d02:	3901      	subs	r1, #1
10007d04:	2900      	cmp	r1, #0
10007d06:	d1f8      	bne.n	10007cfa <metal_io_block_read+0x60>
	retlen = len;
10007d08:	4618      	mov	r0, r3
10007d0a:	e7db      	b.n	10007cc4 <metal_io_block_read+0x2a>
		return -ERANGE;
10007d0c:	f06f 0021 	mvn.w	r0, #33	; 0x21
10007d10:	e7d8      	b.n	10007cc4 <metal_io_block_read+0x2a>
10007d12:	f06f 0021 	mvn.w	r0, #33	; 0x21
10007d16:	e7d5      	b.n	10007cc4 <metal_io_block_read+0x2a>
10007d18:	f06f 0021 	mvn.w	r0, #33	; 0x21
10007d1c:	e7d2      	b.n	10007cc4 <metal_io_block_read+0x2a>

10007d1e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
10007d1e:	b530      	push	{r4, r5, lr}
10007d20:	b083      	sub	sp, #12
10007d22:	6804      	ldr	r4, [r0, #0]
		: NULL);
10007d24:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
10007d28:	d031      	beq.n	10007d8e <metal_io_block_write+0x70>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007d2a:	6885      	ldr	r5, [r0, #8]
10007d2c:	42a9      	cmp	r1, r5
10007d2e:	d231      	bcs.n	10007d94 <metal_io_block_write+0x76>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
10007d30:	eb11 0c04 	adds.w	ip, r1, r4
10007d34:	d031      	beq.n	10007d9a <metal_io_block_write+0x7c>
		return -ERANGE;
	if ((offset + len) > io->size)
10007d36:	185c      	adds	r4, r3, r1
10007d38:	42ac      	cmp	r4, r5
10007d3a:	d900      	bls.n	10007d3e <metal_io_block_write+0x20>
		len = io->size - offset;
10007d3c:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
10007d3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
10007d40:	b18c      	cbz	r4, 10007d66 <metal_io_block_write+0x48>
		retlen = (*io->ops.block_write)(
10007d42:	9300      	str	r3, [sp, #0]
10007d44:	2305      	movs	r3, #5
10007d46:	47a0      	blx	r4
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
10007d48:	b003      	add	sp, #12
10007d4a:	bd30      	pop	{r4, r5, pc}
				*(const unsigned char *)source;
10007d4c:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
10007d50:	f80c 0b01 	strb.w	r0, [ip], #1
			len--;
10007d54:	3901      	subs	r1, #1
		while ( len && (
10007d56:	b169      	cbz	r1, 10007d74 <metal_io_block_write+0x56>
10007d58:	f01c 0f03 	tst.w	ip, #3
10007d5c:	d1f6      	bne.n	10007d4c <metal_io_block_write+0x2e>
			((uintptr_t)ptr % sizeof(int)) ||
10007d5e:	f012 0f03 	tst.w	r2, #3
10007d62:	d1f3      	bne.n	10007d4c <metal_io_block_write+0x2e>
10007d64:	e006      	b.n	10007d74 <metal_io_block_write+0x56>
10007d66:	4619      	mov	r1, r3
10007d68:	e7f5      	b.n	10007d56 <metal_io_block_write+0x38>
			*(unsigned int *)ptr = *(const unsigned int *)source;
10007d6a:	f852 0b04 	ldr.w	r0, [r2], #4
10007d6e:	f84c 0b04 	str.w	r0, [ip], #4
					len -= sizeof(int))
10007d72:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
10007d74:	2903      	cmp	r1, #3
10007d76:	dcf8      	bgt.n	10007d6a <metal_io_block_write+0x4c>
		for (; len != 0; ptr++, source++, len--)
10007d78:	b129      	cbz	r1, 10007d86 <metal_io_block_write+0x68>
				*(const unsigned char *)source;
10007d7a:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
10007d7e:	f80c 0b01 	strb.w	r0, [ip], #1
		for (; len != 0; ptr++, source++, len--)
10007d82:	3901      	subs	r1, #1
10007d84:	e7f8      	b.n	10007d78 <metal_io_block_write+0x5a>
		atomic_thread_fence(memory_order_seq_cst);
10007d86:	f3bf 8f5b 	dmb	ish
	retlen = len;
10007d8a:	4618      	mov	r0, r3
10007d8c:	e7dc      	b.n	10007d48 <metal_io_block_write+0x2a>
		return -ERANGE;
10007d8e:	f06f 0021 	mvn.w	r0, #33	; 0x21
10007d92:	e7d9      	b.n	10007d48 <metal_io_block_write+0x2a>
10007d94:	f06f 0021 	mvn.w	r0, #33	; 0x21
10007d98:	e7d6      	b.n	10007d48 <metal_io_block_write+0x2a>
10007d9a:	f06f 0021 	mvn.w	r0, #33	; 0x21
10007d9e:	e7d3      	b.n	10007d48 <metal_io_block_write+0x2a>

10007da0 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
10007da0:	b40e      	push	{r1, r2, r3}
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
10007da2:	b003      	add	sp, #12
10007da4:	4770      	bx	lr

10007da6 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
10007da6:	b538      	push	{r3, r4, r5, lr}
10007da8:	4605      	mov	r5, r0
	struct metal_io_region *io;
	unsigned int i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
10007daa:	2400      	movs	r4, #0
10007dac:	e002      	b.n	10007db4 <metal_generic_dev_sys_open+0xe>
		io = &dev->regions[i];
		if (!io->size)
			break;
		metal_sys_io_mem_map(io);
10007dae:	f000 f81b 	bl	10007de8 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
10007db2:	3401      	adds	r4, #1
10007db4:	68ab      	ldr	r3, [r5, #8]
10007db6:	42a3      	cmp	r3, r4
10007db8:	d90c      	bls.n	10007dd4 <metal_generic_dev_sys_open+0x2e>
		io = &dev->regions[i];
10007dba:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
10007dbe:	00c0      	lsls	r0, r0, #3
10007dc0:	3008      	adds	r0, #8
10007dc2:	4428      	add	r0, r5
10007dc4:	3004      	adds	r0, #4
		if (!io->size)
10007dc6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
10007dca:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
10007dce:	695b      	ldr	r3, [r3, #20]
10007dd0:	2b00      	cmp	r3, #0
10007dd2:	d1ec      	bne.n	10007dae <metal_generic_dev_sys_open+0x8>
	}

	return 0;
}
10007dd4:	2000      	movs	r0, #0
10007dd6:	bd38      	pop	{r3, r4, r5, pc}

10007dd8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
10007dd8:	b508      	push	{r3, lr}
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
10007dda:	4802      	ldr	r0, [pc, #8]	; (10007de4 <metal_sys_init+0xc>)
10007ddc:	f7ff fe78 	bl	10007ad0 <metal_bus_register>
	return 0;
}
10007de0:	2000      	movs	r0, #0
10007de2:	bd08      	pop	{r3, pc}
10007de4:	100203fc 	.word	0x100203fc

10007de8 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
10007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned long p;
	size_t psize;
	size_t *va;

	va = io->virt;
10007dea:	6806      	ldr	r6, [r0, #0]
	psize = (size_t)io->size;
10007dec:	6887      	ldr	r7, [r0, #8]
	if (psize) {
10007dee:	b1c7      	cbz	r7, 10007e22 <metal_sys_io_mem_map+0x3a>
10007df0:	4604      	mov	r4, r0
		if (psize >> io->page_shift)
10007df2:	68c3      	ldr	r3, [r0, #12]
10007df4:	fa37 f203 	lsrs.w	r2, r7, r3
10007df8:	d001      	beq.n	10007dfe <metal_sys_io_mem_map+0x16>
			psize = (size_t)1 << io->page_shift;
10007dfa:	2701      	movs	r7, #1
10007dfc:	409f      	lsls	r7, r3
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10007dfe:	2500      	movs	r5, #0
10007e00:	e00a      	b.n	10007e18 <metal_sys_io_mem_map+0x30>
			metal_machine_io_mem_map(va, io->physmap[p],
10007e02:	6861      	ldr	r1, [r4, #4]
10007e04:	6963      	ldr	r3, [r4, #20]
10007e06:	463a      	mov	r2, r7
10007e08:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
10007e0c:	4630      	mov	r0, r6
10007e0e:	f000 f80b 	bl	10007e28 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
10007e12:	eb06 0687 	add.w	r6, r6, r7, lsl #2
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
10007e16:	3501      	adds	r5, #1
10007e18:	68a3      	ldr	r3, [r4, #8]
10007e1a:	68e2      	ldr	r2, [r4, #12]
10007e1c:	40d3      	lsrs	r3, r2
10007e1e:	42ab      	cmp	r3, r5
10007e20:	d2ef      	bcs.n	10007e02 <metal_sys_io_mem_map+0x1a>
		}
	}
}
10007e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10007e24 <metal_machine_cache_flush>:
{
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10007e24:	4770      	bx	lr

10007e26 <metal_machine_cache_invalidate>:
{
	metal_unused(addr);
	metal_unused(len);

	/* Add implementation here */
}
10007e26:	4770      	bx	lr

10007e28 <metal_machine_io_mem_map>:
	metal_unused(flags);

	/* Add implementation here */

	return va;
}
10007e28:	4770      	bx	lr
	...

10007e2c <rproc_virtio_virtqueue_notify>:
#include <metal/cpu.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
10007e2c:	b510      	push	{r4, lr}
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
10007e2e:	8903      	ldrh	r3, [r0, #8]

	vdev = vq->vq_dev;
10007e30:	6802      	ldr	r2, [r0, #0]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
	metal_assert(vq_id < vdev->vrings_num);
10007e32:	6a91      	ldr	r1, [r2, #40]	; 0x28
10007e34:	4299      	cmp	r1, r3
10007e36:	d90c      	bls.n	10007e52 <rproc_virtio_virtqueue_notify+0x26>
10007e38:	f1a2 0010 	sub.w	r0, r2, #16
	vring_info = &vdev->vrings_info[vq_id];
10007e3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
10007e3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
10007e42:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
10007e46:	68c4      	ldr	r4, [r0, #12]
10007e48:	6919      	ldr	r1, [r3, #16]
10007e4a:	f852 0c10 	ldr.w	r0, [r2, #-16]
10007e4e:	47a0      	blx	r4
}
10007e50:	bd10      	pop	{r4, pc}
	metal_assert(vq_id < vdev->vrings_num);
10007e52:	4b03      	ldr	r3, [pc, #12]	; (10007e60 <rproc_virtio_virtqueue_notify+0x34>)
10007e54:	4a03      	ldr	r2, [pc, #12]	; (10007e64 <rproc_virtio_virtqueue_notify+0x38>)
10007e56:	211c      	movs	r1, #28
10007e58:	4803      	ldr	r0, [pc, #12]	; (10007e68 <rproc_virtio_virtqueue_notify+0x3c>)
10007e5a:	f000 ffbf 	bl	10008ddc <__assert_func>
10007e5e:	bf00      	nop
10007e60:	1000a924 	.word	0x1000a924
10007e64:	1000a19c 	.word	0x1000a19c
10007e68:	1000a940 	.word	0x1000a940

10007e6c <rproc_virtio_read_config>:
}
#endif

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
10007e6c:	b510      	push	{r4, lr}
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char *config;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007e6e:	f1a0 0e10 	sub.w	lr, r0, #16
	vdev_rsc = rpvdev->vdev_rsc;
10007e72:	f850 4c0c 	ldr.w	r4, [r0, #-12]
	config = (char *)(&vdev_rsc->vring[vdev->vrings_num]);
10007e76:	6a80      	ldr	r0, [r0, #40]	; 0x28
10007e78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
10007e7c:	0080      	lsls	r0, r0, #2
10007e7e:	3018      	adds	r0, #24
10007e80:	4420      	add	r0, r4
10007e82:	f100 0c04 	add.w	ip, r0, #4
	io = rpvdev->vdev_rsc_io;
10007e86:	f8de 0008 	ldr.w	r0, [lr, #8]

	if (offset + length <= vdev_rsc->config_len)
10007e8a:	eb03 0e01 	add.w	lr, r3, r1
10007e8e:	6964      	ldr	r4, [r4, #20]
10007e90:	45a6      	cmp	lr, r4
10007e92:	d807      	bhi.n	10007ea4 <rproc_virtio_read_config+0x38>
		metal_io_block_read(io,
				metal_io_virt_to_offset(io, config + offset),
10007e94:	4461      	add	r1, ip
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10007e96:	6804      	ldr	r4, [r0, #0]
10007e98:	1b09      	subs	r1, r1, r4

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007e9a:	6884      	ldr	r4, [r0, #8]
10007e9c:	42a1      	cmp	r1, r4
10007e9e:	d202      	bcs.n	10007ea6 <rproc_virtio_read_config+0x3a>
		metal_io_block_read(io,
10007ea0:	f7ff fefb 	bl	10007c9a <metal_io_block_read>
				dst, length);
}
10007ea4:	bd10      	pop	{r4, pc}
10007ea6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
10007eaa:	e7f9      	b.n	10007ea0 <rproc_virtio_read_config+0x34>

10007eac <rproc_virtio_get_status>:
{
10007eac:	b510      	push	{r4, lr}
	vdev_rsc = rpvdev->vdev_rsc;
10007eae:	f850 1c0c 	ldr.w	r1, [r0, #-12]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007eb2:	3810      	subs	r0, #16
	io = rpvdev->vdev_rsc_io;
10007eb4:	6880      	ldr	r0, [r0, #8]
	status = metal_io_read8(io,
10007eb6:	3118      	adds	r1, #24
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10007eb8:	6803      	ldr	r3, [r0, #0]
10007eba:	1ac9      	subs	r1, r1, r3
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007ebc:	6883      	ldr	r3, [r0, #8]
10007ebe:	4299      	cmp	r1, r3
10007ec0:	d20e      	bcs.n	10007ee0 <rproc_virtio_get_status+0x34>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007ec2:	6803      	ldr	r3, [r0, #0]
		: NULL);
10007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10007ec8:	d00d      	beq.n	10007ee6 <rproc_virtio_get_status+0x3a>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007eca:	6882      	ldr	r2, [r0, #8]
10007ecc:	4291      	cmp	r1, r2
10007ece:	d20c      	bcs.n	10007eea <rproc_virtio_get_status+0x3e>
		? (void *)((uintptr_t)io->virt + offset)
10007ed0:	440b      	add	r3, r1
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
	void *ptr = metal_io_virt(io, offset);

	if (io->ops.read)
10007ed2:	6984      	ldr	r4, [r0, #24]
10007ed4:	b15c      	cbz	r4, 10007eee <rproc_virtio_get_status+0x42>
		return (*io->ops.read)(io, offset, order, width);
10007ed6:	2301      	movs	r3, #1
10007ed8:	2205      	movs	r2, #5
10007eda:	47a0      	blx	r4
}
10007edc:	b2c0      	uxtb	r0, r0
10007ede:	bd10      	pop	{r4, pc}
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007ee0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
10007ee4:	e7ed      	b.n	10007ec2 <rproc_virtio_get_status+0x16>
		: NULL);
10007ee6:	2300      	movs	r3, #0
10007ee8:	e7f3      	b.n	10007ed2 <rproc_virtio_get_status+0x26>
10007eea:	2300      	movs	r3, #0
10007eec:	e7f1      	b.n	10007ed2 <rproc_virtio_get_status+0x26>
	else if (ptr && sizeof(atomic_uchar) == width)
10007eee:	b12b      	cbz	r3, 10007efc <rproc_virtio_get_status+0x50>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
10007ef0:	f3bf 8f5b 	dmb	ish
10007ef4:	7818      	ldrb	r0, [r3, #0]
10007ef6:	f3bf 8f5b 	dmb	ish
10007efa:	e7ef      	b.n	10007edc <rproc_virtio_get_status+0x30>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
10007efc:	4b02      	ldr	r3, [pc, #8]	; (10007f08 <rproc_virtio_get_status+0x5c>)
10007efe:	4a03      	ldr	r2, [pc, #12]	; (10007f0c <rproc_virtio_get_status+0x60>)
10007f00:	21fe      	movs	r1, #254	; 0xfe
10007f02:	4803      	ldr	r0, [pc, #12]	; (10007f10 <rproc_virtio_get_status+0x64>)
10007f04:	f000 ff6a 	bl	10008ddc <__assert_func>
10007f08:	1000a9f0 	.word	0x1000a9f0
10007f0c:	1000a1bc 	.word	0x1000a1bc
10007f10:	1000a9f4 	.word	0x1000a9f4

10007f14 <rproc_virtio_get_dfeatures>:
{
10007f14:	b510      	push	{r4, lr}
	vdev_rsc = rpvdev->vdev_rsc;
10007f16:	f850 1c0c 	ldr.w	r1, [r0, #-12]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
10007f1a:	3810      	subs	r0, #16
	io = rpvdev->vdev_rsc_io;
10007f1c:	6880      	ldr	r0, [r0, #8]
	features = metal_io_read32(io,
10007f1e:	310c      	adds	r1, #12
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10007f20:	6803      	ldr	r3, [r0, #0]
10007f22:	1ac9      	subs	r1, r1, r3
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007f24:	6883      	ldr	r3, [r0, #8]
10007f26:	4299      	cmp	r1, r3
10007f28:	d20d      	bcs.n	10007f46 <rproc_virtio_get_dfeatures+0x32>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007f2a:	6803      	ldr	r3, [r0, #0]
		: NULL);
10007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10007f30:	d00c      	beq.n	10007f4c <rproc_virtio_get_dfeatures+0x38>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007f32:	6882      	ldr	r2, [r0, #8]
10007f34:	4291      	cmp	r1, r2
10007f36:	d20b      	bcs.n	10007f50 <rproc_virtio_get_dfeatures+0x3c>
		? (void *)((uintptr_t)io->virt + offset)
10007f38:	440b      	add	r3, r1
	if (io->ops.read)
10007f3a:	6984      	ldr	r4, [r0, #24]
10007f3c:	b154      	cbz	r4, 10007f54 <rproc_virtio_get_dfeatures+0x40>
		return (*io->ops.read)(io, offset, order, width);
10007f3e:	2304      	movs	r3, #4
10007f40:	2205      	movs	r2, #5
10007f42:	47a0      	blx	r4
}
10007f44:	bd10      	pop	{r4, pc}
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007f46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
10007f4a:	e7ee      	b.n	10007f2a <rproc_virtio_get_dfeatures+0x16>
		: NULL);
10007f4c:	2300      	movs	r3, #0
10007f4e:	e7f4      	b.n	10007f3a <rproc_virtio_get_dfeatures+0x26>
10007f50:	2300      	movs	r3, #0
10007f52:	e7f2      	b.n	10007f3a <rproc_virtio_get_dfeatures+0x26>
	else if (ptr && sizeof(atomic_uint) == width)
10007f54:	b12b      	cbz	r3, 10007f62 <rproc_virtio_get_dfeatures+0x4e>
		return atomic_load_explicit((atomic_uint *)ptr, order);
10007f56:	f3bf 8f5b 	dmb	ish
10007f5a:	6818      	ldr	r0, [r3, #0]
10007f5c:	f3bf 8f5b 	dmb	ish
10007f60:	e7f0      	b.n	10007f44 <rproc_virtio_get_dfeatures+0x30>
	else if (ptr && sizeof(atomic_ulong) == width)
10007f62:	b12b      	cbz	r3, 10007f70 <rproc_virtio_get_dfeatures+0x5c>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
10007f64:	f3bf 8f5b 	dmb	ish
10007f68:	6818      	ldr	r0, [r3, #0]
10007f6a:	f3bf 8f5b 	dmb	ish
10007f6e:	e7e9      	b.n	10007f44 <rproc_virtio_get_dfeatures+0x30>
	metal_assert(0);
10007f70:	4b02      	ldr	r3, [pc, #8]	; (10007f7c <rproc_virtio_get_dfeatures+0x68>)
10007f72:	4a03      	ldr	r2, [pc, #12]	; (10007f80 <rproc_virtio_get_dfeatures+0x6c>)
10007f74:	21fe      	movs	r1, #254	; 0xfe
10007f76:	4803      	ldr	r0, [pc, #12]	; (10007f84 <rproc_virtio_get_dfeatures+0x70>)
10007f78:	f000 ff30 	bl	10008ddc <__assert_func>
10007f7c:	1000a9f0 	.word	0x1000a9f0
10007f80:	1000a1bc 	.word	0x1000a1bc
10007f84:	1000a9f4 	.word	0x1000a9f4

10007f88 <rproc_virtio_get_features>:
{
10007f88:	b538      	push	{r3, r4, r5, lr}
10007f8a:	4604      	mov	r4, r0
	vdev_rsc = rpvdev->vdev_rsc;
10007f8c:	f850 1c0c 	ldr.w	r1, [r0, #-12]
	io = rpvdev->vdev_rsc_io;
10007f90:	f850 0c08 	ldr.w	r0, [r0, #-8]
	gfeatures = metal_io_read32(io,
10007f94:	3110      	adds	r1, #16
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10007f96:	6803      	ldr	r3, [r0, #0]
10007f98:	1ac9      	subs	r1, r1, r3
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007f9a:	6883      	ldr	r3, [r0, #8]
10007f9c:	4299      	cmp	r1, r3
10007f9e:	d212      	bcs.n	10007fc6 <rproc_virtio_get_features+0x3e>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007fa0:	6803      	ldr	r3, [r0, #0]
		: NULL);
10007fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10007fa6:	d011      	beq.n	10007fcc <rproc_virtio_get_features+0x44>
	return (io->virt != METAL_BAD_VA && offset < io->size
10007fa8:	6882      	ldr	r2, [r0, #8]
10007faa:	4291      	cmp	r1, r2
10007fac:	d210      	bcs.n	10007fd0 <rproc_virtio_get_features+0x48>
		? (void *)((uintptr_t)io->virt + offset)
10007fae:	440b      	add	r3, r1
	if (io->ops.read)
10007fb0:	6985      	ldr	r5, [r0, #24]
10007fb2:	b17d      	cbz	r5, 10007fd4 <rproc_virtio_get_features+0x4c>
		return (*io->ops.read)(io, offset, order, width);
10007fb4:	2304      	movs	r3, #4
10007fb6:	2205      	movs	r2, #5
10007fb8:	47a8      	blx	r5
10007fba:	4605      	mov	r5, r0
	dfeatures = rproc_virtio_get_dfeatures(vdev);
10007fbc:	4620      	mov	r0, r4
10007fbe:	f7ff ffa9 	bl	10007f14 <rproc_virtio_get_dfeatures>
}
10007fc2:	4028      	ands	r0, r5
10007fc4:	bd38      	pop	{r3, r4, r5, pc}
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
10007fc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
10007fca:	e7e9      	b.n	10007fa0 <rproc_virtio_get_features+0x18>
		: NULL);
10007fcc:	2300      	movs	r3, #0
10007fce:	e7ef      	b.n	10007fb0 <rproc_virtio_get_features+0x28>
10007fd0:	2300      	movs	r3, #0
10007fd2:	e7ed      	b.n	10007fb0 <rproc_virtio_get_features+0x28>
	else if (ptr && sizeof(atomic_uint) == width)
10007fd4:	b12b      	cbz	r3, 10007fe2 <rproc_virtio_get_features+0x5a>
		return atomic_load_explicit((atomic_uint *)ptr, order);
10007fd6:	f3bf 8f5b 	dmb	ish
10007fda:	681d      	ldr	r5, [r3, #0]
10007fdc:	f3bf 8f5b 	dmb	ish
10007fe0:	e7ec      	b.n	10007fbc <rproc_virtio_get_features+0x34>
	else if (ptr && sizeof(atomic_ulong) == width)
10007fe2:	b12b      	cbz	r3, 10007ff0 <rproc_virtio_get_features+0x68>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
10007fe4:	f3bf 8f5b 	dmb	ish
10007fe8:	681d      	ldr	r5, [r3, #0]
10007fea:	f3bf 8f5b 	dmb	ish
10007fee:	e7e5      	b.n	10007fbc <rproc_virtio_get_features+0x34>
	metal_assert(0);
10007ff0:	4b02      	ldr	r3, [pc, #8]	; (10007ffc <rproc_virtio_get_features+0x74>)
10007ff2:	4a03      	ldr	r2, [pc, #12]	; (10008000 <rproc_virtio_get_features+0x78>)
10007ff4:	21fe      	movs	r1, #254	; 0xfe
10007ff6:	4803      	ldr	r0, [pc, #12]	; (10008004 <rproc_virtio_get_features+0x7c>)
10007ff8:	f000 fef0 	bl	10008ddc <__assert_func>
10007ffc:	1000a9f0 	.word	0x1000a9f0
10008000:	1000a1bc 	.word	0x1000a1bc
10008004:	1000a9f4 	.word	0x1000a9f4

10008008 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
10008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000800c:	b085      	sub	sp, #20
1000800e:	4681      	mov	r9, r0
10008010:	9102      	str	r1, [sp, #8]
10008012:	4692      	mov	sl, r2
10008014:	9303      	str	r3, [sp, #12]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
10008016:	f892 8019 	ldrb.w	r8, [r2, #25]
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
	return malloc(size);
1000801a:	2048      	movs	r0, #72	; 0x48
1000801c:	f000 ff36 	bl	10008e8c <malloc>
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
	if (!rpvdev)
10008020:	4683      	mov	fp, r0
10008022:	2800      	cmp	r0, #0
10008024:	d06b      	beq.n	100080fe <rproc_virtio_create_vdev+0xf6>
		return NULL;
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
10008026:	eb08 0048 	add.w	r0, r8, r8, lsl #1
1000802a:	00c0      	lsls	r0, r0, #3
1000802c:	f000 ff2e 	bl	10008e8c <malloc>
	if (!vrings_info)
10008030:	4607      	mov	r7, r0
10008032:	2800      	cmp	r0, #0
10008034:	d05d      	beq.n	100080f2 <rproc_virtio_create_vdev+0xea>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
10008036:	2248      	movs	r2, #72	; 0x48
10008038:	2100      	movs	r1, #0
1000803a:	4658      	mov	r0, fp
1000803c:	f000 ff44 	bl	10008ec8 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
10008040:	2500      	movs	r5, #0
10008042:	603d      	str	r5, [r7, #0]
10008044:	607d      	str	r5, [r7, #4]
10008046:	60bd      	str	r5, [r7, #8]
10008048:	60fd      	str	r5, [r7, #12]
1000804a:	613d      	str	r5, [r7, #16]
1000804c:	617d      	str	r5, [r7, #20]
	vdev = &rpvdev->vdev;
1000804e:	f10b 0310 	add.w	r3, fp, #16
10008052:	9301      	str	r3, [sp, #4]

	for (i = 0; i < num_vrings; i++) {
10008054:	464e      	mov	r6, r9
10008056:	e013      	b.n	10008080 <rproc_virtio_create_vdev+0x78>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
10008058:	2400      	movs	r4, #0

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
1000805a:	00e4      	lsls	r4, r4, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
1000805c:	3434      	adds	r4, #52	; 0x34
1000805e:	4620      	mov	r0, r4
10008060:	f000 ff14 	bl	10008e8c <malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
10008064:	4681      	mov	r9, r0
10008066:	b118      	cbz	r0, 10008070 <rproc_virtio_create_vdev+0x68>
		memset(vqs, 0x00, vq_size);
10008068:	4622      	mov	r2, r4
1000806a:	2100      	movs	r1, #0
1000806c:	f000 ff2c 	bl	10008ec8 <memset>
		vring_rsc = &vdev_rsc->vring[i];
		if (role == VIRTIO_DEV_MASTER) {
			num_extra_desc = vring_rsc->num;
		}
		vq = virtqueue_allocate(num_extra_desc);
		if (!vq)
10008070:	f1b9 0f00 	cmp.w	r9, #0
10008074:	d038      	beq.n	100080e8 <rproc_virtio_create_vdev+0xe0>
			goto err1;
		vrings_info[i].vq = vq;
10008076:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1000807a:	f847 9033 	str.w	r9, [r7, r3, lsl #3]
	for (i = 0; i < num_vrings; i++) {
1000807e:	3501      	adds	r5, #1
10008080:	4545      	cmp	r5, r8
10008082:	d207      	bcs.n	10008094 <rproc_virtio_create_vdev+0x8c>
		if (role == VIRTIO_DEV_MASTER) {
10008084:	2e00      	cmp	r6, #0
10008086:	d1e7      	bne.n	10008058 <rproc_virtio_create_vdev+0x50>
			num_extra_desc = vring_rsc->num;
10008088:	eb05 0385 	add.w	r3, r5, r5, lsl #2
1000808c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
10008090:	6a5c      	ldr	r4, [r3, #36]	; 0x24
10008092:	e7e2      	b.n	1000805a <rproc_virtio_create_vdev+0x52>
	}

	rpvdev->notify = notify;
10008094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10008096:	f8cb 300c 	str.w	r3, [fp, #12]
	rpvdev->priv = priv;
1000809a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000809c:	f8cb 3000 	str.w	r3, [fp]
	vdev->vrings_info = vrings_info;
100080a0:	f8cb 703c 	str.w	r7, [fp, #60]	; 0x3c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
100080a4:	f8cb a004 	str.w	sl, [fp, #4]
	rpvdev->vdev_rsc_io = rsc_io;
100080a8:	9b03      	ldr	r3, [sp, #12]
100080aa:	f8cb 3008 	str.w	r3, [fp, #8]

	vdev->notifyid = notifyid;
100080ae:	9b02      	ldr	r3, [sp, #8]
100080b0:	f8cb 3010 	str.w	r3, [fp, #16]
	vdev->role = role;
100080b4:	f8cb 6028 	str.w	r6, [fp, #40]	; 0x28
	vdev->reset_cb = rst_cb;
100080b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
100080ba:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
	vdev->vrings_num = num_vrings;
100080be:	f8cb 8038 	str.w	r8, [fp, #56]	; 0x38
	vdev->func = &remoteproc_virtio_dispatch_funcs;
100080c2:	4b10      	ldr	r3, [pc, #64]	; (10008104 <rproc_virtio_create_vdev+0xfc>)
100080c4:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
	}
	metal_free_memory(vrings_info);
err0:
	metal_free_memory(rpvdev);
	return NULL;
}
100080c8:	9801      	ldr	r0, [sp, #4]
100080ca:	b005      	add	sp, #20
100080cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < num_vrings; i++) {
100080d0:	3401      	adds	r4, #1
100080d2:	4544      	cmp	r4, r8
100080d4:	d20a      	bcs.n	100080ec <rproc_virtio_create_vdev+0xe4>
		if (vrings_info[i].vq)
100080d6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
100080da:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
100080de:	2800      	cmp	r0, #0
100080e0:	d0f6      	beq.n	100080d0 <rproc_virtio_create_vdev+0xc8>
}

static inline void metal_free_memory(void *ptr)
{
	free(ptr);
100080e2:	f000 fedb 	bl	10008e9c <free>
}
100080e6:	e7f3      	b.n	100080d0 <rproc_virtio_create_vdev+0xc8>
	for (i = 0; i < num_vrings; i++) {
100080e8:	2400      	movs	r4, #0
100080ea:	e7f2      	b.n	100080d2 <rproc_virtio_create_vdev+0xca>
	free(ptr);
100080ec:	4638      	mov	r0, r7
100080ee:	f000 fed5 	bl	10008e9c <free>
100080f2:	4658      	mov	r0, fp
100080f4:	f000 fed2 	bl	10008e9c <free>
	return NULL;
100080f8:	2300      	movs	r3, #0
100080fa:	9301      	str	r3, [sp, #4]
100080fc:	e7e4      	b.n	100080c8 <rproc_virtio_create_vdev+0xc0>
		return NULL;
100080fe:	9001      	str	r0, [sp, #4]
10008100:	e7e2      	b.n	100080c8 <rproc_virtio_create_vdev+0xc0>
10008102:	bf00      	nop
10008104:	1000a1cc 	.word	0x1000a1cc

10008108 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
10008108:	b410      	push	{r4}
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
	if (index >= num_vrings)
1000810a:	6a84      	ldr	r4, [r0, #40]	; 0x28
1000810c:	428c      	cmp	r4, r1
1000810e:	d910      	bls.n	10008132 <rproc_virtio_init_vring+0x2a>
		return -RPROC_EINVAL;
	vring_info = &vdev->vrings_info[index];
10008110:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
10008112:	eb01 0141 	add.w	r1, r1, r1, lsl #1
10008116:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	vring_info->io = io;
1000811a:	9801      	ldr	r0, [sp, #4]
1000811c:	6148      	str	r0, [r1, #20]
	vring_info->notifyid = notifyid;
1000811e:	610a      	str	r2, [r1, #16]
	vring_info->info.vaddr = va;
10008120:	604b      	str	r3, [r1, #4]
	vring_info->info.num_descs = num_descs;
10008122:	9b02      	ldr	r3, [sp, #8]
10008124:	818b      	strh	r3, [r1, #12]
	vring_info->info.align = align;
10008126:	9b03      	ldr	r3, [sp, #12]
10008128:	608b      	str	r3, [r1, #8]

	return 0;
1000812a:	2000      	movs	r0, #0
}
1000812c:	f85d 4b04 	ldr.w	r4, [sp], #4
10008130:	4770      	bx	lr
		return -RPROC_EINVAL;
10008132:	f06f 0001 	mvn.w	r0, #1
10008136:	e7f9      	b.n	1000812c <rproc_virtio_init_vring+0x24>

10008138 <rproc_virtio_notified>:
{
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
10008138:	b1e8      	cbz	r0, 10008176 <rproc_virtio_notified+0x3e>
{
1000813a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000813c:	460d      	mov	r5, r1
1000813e:	4606      	mov	r6, r0
		return -RPROC_EINVAL;
	/* We do nothing for vdev notification in this implementation */
	if (vdev->notifyid == notifyid)
10008140:	6803      	ldr	r3, [r0, #0]
10008142:	428b      	cmp	r3, r1
10008144:	d01a      	beq.n	1000817c <rproc_virtio_notified+0x44>
		return 0;
	num_vrings = vdev->vrings_num;
10008146:	6a87      	ldr	r7, [r0, #40]	; 0x28
	for (i = 0; i < num_vrings; i++) {
10008148:	2400      	movs	r4, #0
1000814a:	e003      	b.n	10008154 <rproc_virtio_notified+0x1c>
		vring_info = &vdev->vrings_info[i];
		if (vring_info->notifyid == notifyid ||
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
			virtqueue_notification(vq);
1000814c:	5850      	ldr	r0, [r2, r1]
1000814e:	f000 fdfa 	bl	10008d46 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
10008152:	3401      	adds	r4, #1
10008154:	42bc      	cmp	r4, r7
10008156:	d20c      	bcs.n	10008172 <rproc_virtio_notified+0x3a>
		vring_info = &vdev->vrings_info[i];
10008158:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1000815a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1000815e:	00d9      	lsls	r1, r3, #3
10008160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (vring_info->notifyid == notifyid ||
10008164:	691b      	ldr	r3, [r3, #16]
10008166:	42ab      	cmp	r3, r5
10008168:	d0f0      	beq.n	1000814c <rproc_virtio_notified+0x14>
1000816a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1000816e:	d1f0      	bne.n	10008152 <rproc_virtio_notified+0x1a>
10008170:	e7ec      	b.n	1000814c <rproc_virtio_notified+0x14>
		}
	}
	return 0;
10008172:	2000      	movs	r0, #0
}
10008174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -RPROC_EINVAL;
10008176:	f06f 0001 	mvn.w	r0, #1
}
1000817a:	4770      	bx	lr
		return 0;
1000817c:	2000      	movs	r0, #0
1000817e:	e7f9      	b.n	10008174 <rproc_virtio_notified+0x3c>

10008180 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
10008180:	b510      	push	{r4, lr}
10008182:	4604      	mov	r4, r0
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
10008184:	6983      	ldr	r3, [r0, #24]
10008186:	b12b      	cbz	r3, 10008194 <rproc_virtio_wait_remote_ready+0x14>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
10008188:	4620      	mov	r0, r4
1000818a:	f7ff fe8f 	bl	10007eac <rproc_virtio_get_status>
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
1000818e:	f010 0f04 	tst.w	r0, #4
10008192:	d0f9      	beq.n	10008188 <rproc_virtio_wait_remote_ready+0x8>
			return;
		metal_cpu_yield();
	}
}
10008194:	bd10      	pop	{r4, pc}

10008196 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
10008196:	b500      	push	{lr}
10008198:	4686      	mov	lr, r0
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
1000819a:	2300      	movs	r3, #0
1000819c:	e000      	b.n	100081a0 <rpmsg_get_address+0xa>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
1000819e:	3301      	adds	r3, #1
	for (bit = start;
100081a0:	4299      	cmp	r1, r3
100081a2:	d909      	bls.n	100081b8 <rpmsg_get_address+0x22>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
100081a4:	095a      	lsrs	r2, r3, #5
100081a6:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
100081aa:	f003 0c1f 	and.w	ip, r3, #31
100081ae:	fa22 f20c 	lsr.w	r2, r2, ip
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
100081b2:	f012 0f01 	tst.w	r2, #1
100081b6:	d1f2      	bne.n	1000819e <rpmsg_get_address+0x8>
	unsigned int addr = RPMSG_ADDR_ANY;
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
	if (nextbit < (uint32_t)size) {
100081b8:	4299      	cmp	r1, r3
100081ba:	d90e      	bls.n	100081da <rpmsg_get_address+0x44>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
100081bc:	f503 6080 	add.w	r0, r3, #1024	; 0x400
	bitmap[bit / METAL_BITS_PER_ULONG] |=
100081c0:	0959      	lsrs	r1, r3, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
100081c2:	f003 031f 	and.w	r3, r3, #31
100081c6:	2201      	movs	r2, #1
100081c8:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
100081cc:	f85e 2021 	ldr.w	r2, [lr, r1, lsl #2]
100081d0:	431a      	orrs	r2, r3
100081d2:	f84e 2021 	str.w	r2, [lr, r1, lsl #2]
		metal_bitmap_set_bit(bitmap, nextbit);
	}

	return addr;
}
100081d6:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned int addr = RPMSG_ADDR_ANY;
100081da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return addr;
100081de:	e7fa      	b.n	100081d6 <rpmsg_get_address+0x40>

100081e0 <rpmsg_release_address>:
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size)
100081e0:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
100081e4:	d40d      	bmi.n	10008202 <rpmsg_release_address+0x22>
100081e6:	428a      	cmp	r2, r1
100081e8:	da0b      	bge.n	10008202 <rpmsg_release_address+0x22>
	bitmap[bit / METAL_BITS_PER_ULONG] &=
100081ea:	0951      	lsrs	r1, r2, #5
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
100081ec:	f002 021f 	and.w	r2, r2, #31
100081f0:	2301      	movs	r3, #1
100081f2:	fa03 f202 	lsl.w	r2, r3, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
100081f6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
100081fa:	ea23 0302 	bic.w	r3, r3, r2
100081fe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		metal_bitmap_clear_bit(bitmap, addr);
}
10008202:	4770      	bx	lr

10008204 <rpmsg_is_address_set>:
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size)
10008204:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
10008208:	d40b      	bmi.n	10008222 <rpmsg_is_address_set+0x1e>
1000820a:	428a      	cmp	r2, r1
1000820c:	da0b      	bge.n	10008226 <rpmsg_is_address_set+0x22>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
1000820e:	0953      	lsrs	r3, r2, #5
10008210:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
10008214:	f002 021f 	and.w	r2, r2, #31
10008218:	fa20 f202 	lsr.w	r2, r0, r2
1000821c:	f002 0001 	and.w	r0, r2, #1
		return metal_bitmap_is_bit_set(bitmap, addr);
10008220:	4770      	bx	lr
	else
		return RPMSG_ERR_PARAM;
10008222:	4802      	ldr	r0, [pc, #8]	; (1000822c <rpmsg_is_address_set+0x28>)
10008224:	4770      	bx	lr
10008226:	4801      	ldr	r0, [pc, #4]	; (1000822c <rpmsg_is_address_set+0x28>)
}
10008228:	4770      	bx	lr
1000822a:	bf00      	nop
1000822c:	fffff82d 	.word	0xfffff82d

10008230 <rpmsg_set_address>:
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size) {
10008230:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
10008234:	d40e      	bmi.n	10008254 <rpmsg_set_address+0x24>
10008236:	428a      	cmp	r2, r1
10008238:	da0e      	bge.n	10008258 <rpmsg_set_address+0x28>
	bitmap[bit / METAL_BITS_PER_ULONG] |=
1000823a:	0951      	lsrs	r1, r2, #5
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
1000823c:	f002 021f 	and.w	r2, r2, #31
10008240:	2301      	movs	r3, #1
10008242:	fa03 f202 	lsl.w	r2, r3, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
10008246:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1000824a:	4313      	orrs	r3, r2
1000824c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		metal_bitmap_set_bit(bitmap, addr);
		return RPMSG_SUCCESS;
10008250:	2000      	movs	r0, #0
10008252:	4770      	bx	lr
	} else {
		return RPMSG_ERR_PARAM;
10008254:	4801      	ldr	r0, [pc, #4]	; (1000825c <rpmsg_set_address+0x2c>)
10008256:	4770      	bx	lr
10008258:	4800      	ldr	r0, [pc, #0]	; (1000825c <rpmsg_set_address+0x2c>)
	}
}
1000825a:	4770      	bx	lr
1000825c:	fffff82d 	.word	0xfffff82d

10008260 <rpmsg_unregister_endpoint>:
	}
	return NULL;
}

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
10008260:	b538      	push	{r3, r4, r5, lr}
10008262:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
10008264:	6a00      	ldr	r0, [r0, #32]
	}
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
	int unlocked = METAL_MUTEX_UNLOCKED;
10008266:	2300      	movs	r3, #0

	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10008268:	f100 0558 	add.w	r5, r0, #88	; 0x58
1000826c:	2101      	movs	r1, #1
1000826e:	f3bf 8f5b 	dmb	ish
10008272:	e855 2f00 	ldrex	r2, [r5]
10008276:	429a      	cmp	r2, r3
10008278:	d103      	bne.n	10008282 <rpmsg_unregister_endpoint+0x22>
1000827a:	e845 1c00 	strex	ip, r1, [r5]
1000827e:	f1bc 0f00 	cmp.w	ip, #0
10008282:	f3bf 8f5b 	dmb	ish
10008286:	4613      	mov	r3, r2
10008288:	d1ee      	bne.n	10008268 <rpmsg_unregister_endpoint+0x8>

	metal_mutex_acquire(&rdev->lock);
	if (ept->addr != RPMSG_ADDR_ANY)
1000828a:	6a62      	ldr	r2, [r4, #36]	; 0x24
1000828c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
10008290:	d110      	bne.n	100082b4 <rpmsg_unregister_endpoint+0x54>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
				      ept->addr);
	metal_list_del(&ept->node);
10008292:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
10008296:	6b61      	ldr	r1, [r4, #52]	; 0x34
10008298:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1000829a:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
1000829c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000829e:	6011      	str	r1, [r2, #0]
	node->prev = node;
100082a0:	63a3      	str	r3, [r4, #56]	; 0x38
	node->next = node;
100082a2:	6363      	str	r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
100082a4:	2300      	movs	r3, #0
100082a6:	6223      	str	r3, [r4, #32]
	}
}

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
100082a8:	f3bf 8f5b 	dmb	ish
100082ac:	602b      	str	r3, [r5, #0]
100082ae:	f3bf 8f5b 	dmb	ish
	metal_mutex_release(&rdev->lock);
}
100082b2:	bd38      	pop	{r3, r4, r5, pc}
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
100082b4:	2180      	movs	r1, #128	; 0x80
100082b6:	3048      	adds	r0, #72	; 0x48
100082b8:	f7ff ff92 	bl	100081e0 <rpmsg_release_address>
100082bc:	e7e9      	b.n	10008292 <rpmsg_unregister_endpoint+0x32>
	...

100082c0 <rpmsg_send_offchannel_raw>:
	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
100082c0:	b180      	cbz	r0, 100082e4 <rpmsg_send_offchannel_raw+0x24>
{
100082c2:	b530      	push	{r4, r5, lr}
100082c4:	b083      	sub	sp, #12
	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
100082c6:	6a00      	ldr	r0, [r0, #32]
100082c8:	b170      	cbz	r0, 100082e8 <rpmsg_send_offchannel_raw+0x28>
100082ca:	b17b      	cbz	r3, 100082ec <rpmsg_send_offchannel_raw+0x2c>
100082cc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
100082d0:	d00e      	beq.n	100082f0 <rpmsg_send_offchannel_raw+0x30>
	if (rdev->ops.send_offchannel_raw)
100082d2:	6e04      	ldr	r4, [r0, #96]	; 0x60
100082d4:	b174      	cbz	r4, 100082f4 <rpmsg_send_offchannel_raw+0x34>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
100082d6:	9d07      	ldr	r5, [sp, #28]
100082d8:	9501      	str	r5, [sp, #4]
100082da:	9d06      	ldr	r5, [sp, #24]
100082dc:	9500      	str	r5, [sp, #0]
100082de:	47a0      	blx	r4
}
100082e0:	b003      	add	sp, #12
100082e2:	bd30      	pop	{r4, r5, pc}
		return RPMSG_ERR_PARAM;
100082e4:	4804      	ldr	r0, [pc, #16]	; (100082f8 <rpmsg_send_offchannel_raw+0x38>)
}
100082e6:	4770      	bx	lr
		return RPMSG_ERR_PARAM;
100082e8:	4803      	ldr	r0, [pc, #12]	; (100082f8 <rpmsg_send_offchannel_raw+0x38>)
100082ea:	e7f9      	b.n	100082e0 <rpmsg_send_offchannel_raw+0x20>
100082ec:	4802      	ldr	r0, [pc, #8]	; (100082f8 <rpmsg_send_offchannel_raw+0x38>)
100082ee:	e7f7      	b.n	100082e0 <rpmsg_send_offchannel_raw+0x20>
100082f0:	4801      	ldr	r0, [pc, #4]	; (100082f8 <rpmsg_send_offchannel_raw+0x38>)
100082f2:	e7f5      	b.n	100082e0 <rpmsg_send_offchannel_raw+0x20>
	return RPMSG_ERR_PARAM;
100082f4:	4800      	ldr	r0, [pc, #0]	; (100082f8 <rpmsg_send_offchannel_raw+0x38>)
100082f6:	e7f3      	b.n	100082e0 <rpmsg_send_offchannel_raw+0x20>
100082f8:	fffff82d 	.word	0xfffff82d

100082fc <rpmsg_send_ns_message>:
{
100082fc:	b530      	push	{r4, r5, lr}
100082fe:	b08d      	sub	sp, #52	; 0x34
10008300:	4604      	mov	r4, r0
	ns_msg.flags = flags;
10008302:	910b      	str	r1, [sp, #44]	; 0x2c
	ns_msg.addr = ept->addr;
10008304:	6a45      	ldr	r5, [r0, #36]	; 0x24
10008306:	950a      	str	r5, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
10008308:	2220      	movs	r2, #32
1000830a:	4601      	mov	r1, r0
1000830c:	a802      	add	r0, sp, #8
1000830e:	f001 f9ed 	bl	100096ec <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
10008312:	2301      	movs	r3, #1
10008314:	9301      	str	r3, [sp, #4]
10008316:	2328      	movs	r3, #40	; 0x28
10008318:	9300      	str	r3, [sp, #0]
1000831a:	ab02      	add	r3, sp, #8
1000831c:	2235      	movs	r2, #53	; 0x35
1000831e:	4629      	mov	r1, r5
10008320:	4620      	mov	r0, r4
10008322:	f7ff ffcd 	bl	100082c0 <rpmsg_send_offchannel_raw>
	if (ret < 0)
10008326:	2800      	cmp	r0, #0
10008328:	db00      	blt.n	1000832c <rpmsg_send_ns_message+0x30>
		return RPMSG_SUCCESS;
1000832a:	2000      	movs	r0, #0
}
1000832c:	b00d      	add	sp, #52	; 0x34
1000832e:	bd30      	pop	{r4, r5, pc}

10008330 <rpmsg_get_endpoint>:
{
10008330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10008334:	4681      	mov	r9, r0
10008336:	460f      	mov	r7, r1
10008338:	4616      	mov	r6, r2
1000833a:	4698      	mov	r8, r3
	metal_list_for_each(&rdev->endpoints, node) {
1000833c:	6805      	ldr	r5, [r0, #0]
1000833e:	e009      	b.n	10008354 <rpmsg_get_endpoint+0x24>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
10008340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10008342:	4543      	cmp	r3, r8
10008344:	d113      	bne.n	1000836e <rpmsg_get_endpoint+0x3e>
10008346:	e02d      	b.n	100083a4 <rpmsg_get_endpoint+0x74>
		int name_match = 0;
10008348:	2000      	movs	r0, #0
1000834a:	e01a      	b.n	10008382 <rpmsg_get_endpoint+0x52>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
1000834c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
10008350:	d022      	beq.n	10008398 <rpmsg_get_endpoint+0x68>
	metal_list_for_each(&rdev->endpoints, node) {
10008352:	682d      	ldr	r5, [r5, #0]
10008354:	45a9      	cmp	r9, r5
10008356:	d024      	beq.n	100083a2 <rpmsg_get_endpoint+0x72>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
10008358:	f1a5 0434 	sub.w	r4, r5, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
1000835c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
10008360:	d002      	beq.n	10008368 <rpmsg_get_endpoint+0x38>
10008362:	6a63      	ldr	r3, [r4, #36]	; 0x24
10008364:	42b3      	cmp	r3, r6
10008366:	d01d      	beq.n	100083a4 <rpmsg_get_endpoint+0x74>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
10008368:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000836a:	42b3      	cmp	r3, r6
1000836c:	d0e8      	beq.n	10008340 <rpmsg_get_endpoint+0x10>
		if (name)
1000836e:	2f00      	cmp	r7, #0
10008370:	d0ea      	beq.n	10008348 <rpmsg_get_endpoint+0x18>
			name_match = !strncmp(ept->name, name,
10008372:	2220      	movs	r2, #32
10008374:	4639      	mov	r1, r7
10008376:	4620      	mov	r0, r4
10008378:	f001 f9a4 	bl	100096c4 <strncmp>
1000837c:	fab0 f080 	clz	r0, r0
10008380:	0940      	lsrs	r0, r0, #5
		if (!name || !name_match)
10008382:	2f00      	cmp	r7, #0
10008384:	d0e5      	beq.n	10008352 <rpmsg_get_endpoint+0x22>
10008386:	2800      	cmp	r0, #0
10008388:	d0e3      	beq.n	10008352 <rpmsg_get_endpoint+0x22>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
1000838a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
1000838e:	d0dd      	beq.n	1000834c <rpmsg_get_endpoint+0x1c>
10008390:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10008392:	4543      	cmp	r3, r8
10008394:	d1da      	bne.n	1000834c <rpmsg_get_endpoint+0x1c>
10008396:	e005      	b.n	100083a4 <rpmsg_get_endpoint+0x74>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
10008398:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1000839a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1000839e:	d1d8      	bne.n	10008352 <rpmsg_get_endpoint+0x22>
100083a0:	e000      	b.n	100083a4 <rpmsg_get_endpoint+0x74>
	return NULL;
100083a2:	2400      	movs	r4, #0
}
100083a4:	4620      	mov	r0, r4
100083a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

100083aa <rpmsg_register_endpoint>:

void rpmsg_register_endpoint(struct rpmsg_device *rdev,
			     struct rpmsg_endpoint *ept)
{
	ept->rdev = rdev;
100083aa:	6208      	str	r0, [r1, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
100083ac:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->prev = node->prev;
100083b0:	6842      	ldr	r2, [r0, #4]
100083b2:	638a      	str	r2, [r1, #56]	; 0x38
	new_node->next = node;
100083b4:	6348      	str	r0, [r1, #52]	; 0x34
	new_node->next->prev = new_node;
100083b6:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
100083b8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
100083ba:	6013      	str	r3, [r2, #0]
}
100083bc:	4770      	bx	lr
	...

100083c0 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
100083c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
100083c4:	2800      	cmp	r0, #0
100083c6:	d079      	beq.n	100084bc <rpmsg_create_ept+0xfc>
100083c8:	460e      	mov	r6, r1
100083ca:	4617      	mov	r7, r2
100083cc:	461c      	mov	r4, r3
100083ce:	4605      	mov	r5, r0
	int unlocked = METAL_MUTEX_UNLOCKED;
100083d0:	2300      	movs	r3, #0
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
100083d2:	f106 0858 	add.w	r8, r6, #88	; 0x58
100083d6:	2101      	movs	r1, #1
100083d8:	f3bf 8f5b 	dmb	ish
100083dc:	e858 2f00 	ldrex	r2, [r8]
100083e0:	429a      	cmp	r2, r3
100083e2:	d102      	bne.n	100083ea <rpmsg_create_ept+0x2a>
100083e4:	e848 1000 	strex	r0, r1, [r8]
100083e8:	2800      	cmp	r0, #0
100083ea:	f3bf 8f5b 	dmb	ish
100083ee:	4613      	mov	r3, r2
100083f0:	d1ef      	bne.n	100083d2 <rpmsg_create_ept+0x12>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
	if (src == RPMSG_ADDR_ANY) {
100083f2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
100083f6:	d017      	beq.n	10008428 <rpmsg_create_ept+0x68>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
		if (addr == RPMSG_ADDR_ANY) {
			status = RPMSG_ERR_ADDR;
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
100083f8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
100083fc:	d326      	bcc.n	1000844c <rpmsg_create_ept+0x8c>
		status = rpmsg_is_address_set(rdev->bitmap,
100083fe:	f106 0a48 	add.w	sl, r6, #72	; 0x48
10008402:	4622      	mov	r2, r4
10008404:	2180      	movs	r1, #128	; 0x80
10008406:	4650      	mov	r0, sl
10008408:	f7ff fefc 	bl	10008204 <rpmsg_is_address_set>
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
1000840c:	4681      	mov	r9, r0
1000840e:	b1b8      	cbz	r0, 10008440 <rpmsg_create_ept+0x80>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
					  src);
		} else if (status > 0) {
10008410:	2800      	cmp	r0, #0
10008412:	dd01      	ble.n	10008418 <rpmsg_create_ept+0x58>
			status = RPMSG_ERR_ADDR;
10008414:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 100084c8 <rpmsg_create_ept+0x108>
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10008418:	f3bf 8f5b 	dmb	ish
1000841c:	2300      	movs	r3, #0
1000841e:	f8c8 3000 	str.w	r3, [r8]
10008422:	f3bf 8f5b 	dmb	ish
		rpmsg_unregister_endpoint(ept);
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
10008426:	e037      	b.n	10008498 <rpmsg_create_ept+0xd8>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
10008428:	2180      	movs	r1, #128	; 0x80
1000842a:	f106 0048 	add.w	r0, r6, #72	; 0x48
1000842e:	f7ff feb2 	bl	10008196 <rpmsg_get_address>
10008432:	4604      	mov	r4, r0
		if (addr == RPMSG_ADDR_ANY) {
10008434:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
10008438:	d03d      	beq.n	100084b6 <rpmsg_create_ept+0xf6>
	int status = RPMSG_SUCCESS;
1000843a:	f04f 0900 	mov.w	r9, #0
1000843e:	e007      	b.n	10008450 <rpmsg_create_ept+0x90>
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
10008440:	4622      	mov	r2, r4
10008442:	2180      	movs	r1, #128	; 0x80
10008444:	4650      	mov	r0, sl
10008446:	f7ff fef3 	bl	10008230 <rpmsg_set_address>
1000844a:	e001      	b.n	10008450 <rpmsg_create_ept+0x90>
	int status = RPMSG_SUCCESS;
1000844c:	f04f 0900 	mov.w	r9, #0
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10008450:	b32f      	cbz	r7, 1000849e <rpmsg_create_ept+0xde>
10008452:	2220      	movs	r2, #32
10008454:	4639      	mov	r1, r7
10008456:	4628      	mov	r0, r5
10008458:	f001 f948 	bl	100096ec <strncpy>
	ept->addr = src;
1000845c:	626c      	str	r4, [r5, #36]	; 0x24
	ept->dest_addr = dest;
1000845e:	9b08      	ldr	r3, [sp, #32]
10008460:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
10008462:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008464:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
10008466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008468:	632b      	str	r3, [r5, #48]	; 0x30
	rpmsg_register_endpoint(rdev, ept);
1000846a:	4629      	mov	r1, r5
1000846c:	4630      	mov	r0, r6
1000846e:	f7ff ff9c 	bl	100083aa <rpmsg_register_endpoint>
10008472:	f3bf 8f5b 	dmb	ish
10008476:	2300      	movs	r3, #0
10008478:	f8c8 3000 	str.w	r3, [r8]
1000847c:	f3bf 8f5b 	dmb	ish
	if (ept->name[0] && rdev->support_ns &&
10008480:	782b      	ldrb	r3, [r5, #0]
10008482:	b133      	cbz	r3, 10008492 <rpmsg_create_ept+0xd2>
10008484:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
10008488:	b11b      	cbz	r3, 10008492 <rpmsg_create_ept+0xd2>
	    ept->dest_addr == RPMSG_ADDR_ANY)
1000848a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (ept->name[0] && rdev->support_ns &&
1000848c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10008490:	d007      	beq.n	100084a2 <rpmsg_create_ept+0xe2>
	if (status)
10008492:	f1b9 0f00 	cmp.w	r9, #0
10008496:	d10a      	bne.n	100084ae <rpmsg_create_ept+0xee>
}
10008498:	4648      	mov	r0, r9
1000849a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
1000849e:	4f09      	ldr	r7, [pc, #36]	; (100084c4 <rpmsg_create_ept+0x104>)
100084a0:	e7d7      	b.n	10008452 <rpmsg_create_ept+0x92>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
100084a2:	2100      	movs	r1, #0
100084a4:	4628      	mov	r0, r5
100084a6:	f7ff ff29 	bl	100082fc <rpmsg_send_ns_message>
100084aa:	4681      	mov	r9, r0
100084ac:	e7f1      	b.n	10008492 <rpmsg_create_ept+0xd2>
		rpmsg_unregister_endpoint(ept);
100084ae:	4628      	mov	r0, r5
100084b0:	f7ff fed6 	bl	10008260 <rpmsg_unregister_endpoint>
100084b4:	e7f0      	b.n	10008498 <rpmsg_create_ept+0xd8>
			status = RPMSG_ERR_ADDR;
100084b6:	f8df 9010 	ldr.w	r9, [pc, #16]	; 100084c8 <rpmsg_create_ept+0x108>
100084ba:	e7ad      	b.n	10008418 <rpmsg_create_ept+0x58>
		return RPMSG_ERR_PARAM;
100084bc:	f8df 900c 	ldr.w	r9, [pc, #12]	; 100084cc <rpmsg_create_ept+0x10c>
100084c0:	e7ea      	b.n	10008498 <rpmsg_create_ept+0xd8>
100084c2:	bf00      	nop
100084c4:	1000a348 	.word	0x1000a348
100084c8:	fffff829 	.word	0xfffff829
100084cc:	fffff82d 	.word	0xfffff82d

100084d0 <rpmsg_destroy_ept>:
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
	struct rpmsg_device *rdev;

	if (!ept)
100084d0:	b1a0      	cbz	r0, 100084fc <rpmsg_destroy_ept+0x2c>
{
100084d2:	b510      	push	{r4, lr}
100084d4:	4604      	mov	r4, r0
		return;

	rdev = ept->rdev;
100084d6:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
100084d8:	b15b      	cbz	r3, 100084f2 <rpmsg_destroy_ept+0x22>
		return;

	if (ept->name[0] && rdev->support_ns &&
100084da:	7802      	ldrb	r2, [r0, #0]
100084dc:	b132      	cbz	r2, 100084ec <rpmsg_destroy_ept+0x1c>
100084de:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
100084e2:	b11b      	cbz	r3, 100084ec <rpmsg_destroy_ept+0x1c>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
100084e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (ept->name[0] && rdev->support_ns &&
100084e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
100084ea:	d203      	bcs.n	100084f4 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
	rpmsg_unregister_endpoint(ept);
100084ec:	4620      	mov	r0, r4
100084ee:	f7ff feb7 	bl	10008260 <rpmsg_unregister_endpoint>
}
100084f2:	bd10      	pop	{r4, pc}
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
100084f4:	2101      	movs	r1, #1
100084f6:	f7ff ff01 	bl	100082fc <rpmsg_send_ns_message>
100084fa:	e7f7      	b.n	100084ec <rpmsg_destroy_ept+0x1c>
100084fc:	4770      	bx	lr

100084fe <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
100084fe:	b510      	push	{r4, lr}
10008500:	4604      	mov	r4, r0
10008502:	e004      	b.n	1000850e <rpmsg_virtio_wait_remote_ready+0x10>
}

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
	rvdev->vdev->func->set_status(rvdev->vdev, status);
10008504:	6fa0      	ldr	r0, [r4, #120]	; 0x78
10008506:	6a03      	ldr	r3, [r0, #32]
10008508:	685b      	ldr	r3, [r3, #4]
1000850a:	2100      	movs	r1, #0
1000850c:	4798      	blx	r3
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000850e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
10008510:	6a03      	ldr	r3, [r0, #32]
10008512:	681b      	ldr	r3, [r3, #0]
10008514:	4798      	blx	r3
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
10008516:	f010 0f40 	tst.w	r0, #64	; 0x40
1000851a:	d1f3      	bne.n	10008504 <rpmsg_virtio_wait_remote_ready+0x6>
			rpmsg_virtio_set_status(rvdev, 0);
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
1000851c:	f010 0f04 	tst.w	r0, #4
10008520:	d0f5      	beq.n	1000850e <rpmsg_virtio_wait_remote_ready+0x10>
			return true;
		}
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}
}
10008522:	2001      	movs	r0, #1
10008524:	bd10      	pop	{r4, pc}

10008526 <rpmsg_virtio_hold_rx_buffer>:
	(void)rdev;

	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);

	/* Set held status to keep buffer */
	rp_hdr->reserved |= RPMSG_BUF_HELD;
10008526:	f851 3c08 	ldr.w	r3, [r1, #-8]
1000852a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1000852e:	f841 3c08 	str.w	r3, [r1, #-8]
}
10008532:	4770      	bx	lr

10008534 <rpmsg_virtio_tx_callback>:
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
	(void)vq;
}
10008534:	4770      	bx	lr

10008536 <rpmsg_virtio_ns_callback>:
 *
 * @return - rpmag endpoint callback handled
 */
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
10008536:	b5f0      	push	{r4, r5, r6, r7, lr}
10008538:	b089      	sub	sp, #36	; 0x24
	struct rpmsg_device *rdev = ept->rdev;
1000853a:	6a05      	ldr	r5, [r0, #32]
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
	struct metal_io_region *io = rvdev->shbuf_io;
1000853c:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84

	(void)priv;
	(void)src;

	ns_msg = data;
	if (len != sizeof(*ns_msg))
10008540:	2a28      	cmp	r2, #40	; 0x28
10008542:	d140      	bne.n	100085c6 <rpmsg_virtio_ns_callback+0x90>
10008544:	460c      	mov	r4, r1
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10008546:	6801      	ldr	r1, [r0, #0]
10008548:	1a61      	subs	r1, r4, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000854a:	6883      	ldr	r3, [r0, #8]
1000854c:	4299      	cmp	r1, r3
1000854e:	d22f      	bcs.n	100085b0 <rpmsg_virtio_ns_callback+0x7a>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
	metal_io_block_read(io,
10008550:	2320      	movs	r3, #32
10008552:	466a      	mov	r2, sp
10008554:	f7ff fba1 	bl	10007c9a <metal_io_block_read>
			    metal_io_virt_to_offset(io, ns_msg->name),
			    &name, sizeof(name));
	dest = ns_msg->addr;
10008558:	6a27      	ldr	r7, [r4, #32]
	int unlocked = METAL_MUTEX_UNLOCKED;
1000855a:	2300      	movs	r3, #0
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000855c:	f105 0658 	add.w	r6, r5, #88	; 0x58
10008560:	2101      	movs	r1, #1
10008562:	f3bf 8f5b 	dmb	ish
10008566:	e856 2f00 	ldrex	r2, [r6]
1000856a:	429a      	cmp	r2, r3
1000856c:	d102      	bne.n	10008574 <rpmsg_virtio_ns_callback+0x3e>
1000856e:	e846 1000 	strex	r0, r1, [r6]
10008572:	2800      	cmp	r0, #0
10008574:	f3bf 8f5b 	dmb	ish
10008578:	4613      	mov	r3, r2
1000857a:	d1ef      	bne.n	1000855c <rpmsg_virtio_ns_callback+0x26>

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
1000857c:	463b      	mov	r3, r7
1000857e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10008582:	4669      	mov	r1, sp
10008584:	4628      	mov	r0, r5
10008586:	f7ff fed3 	bl	10008330 <rpmsg_get_endpoint>

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
1000858a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1000858c:	f013 0f01 	tst.w	r3, #1
10008590:	d011      	beq.n	100085b6 <rpmsg_virtio_ns_callback+0x80>
		if (_ept)
10008592:	b110      	cbz	r0, 1000859a <rpmsg_virtio_ns_callback+0x64>
			_ept->dest_addr = RPMSG_ADDR_ANY;
10008594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10008598:	6283      	str	r3, [r0, #40]	; 0x28
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000859a:	f3bf 8f5b 	dmb	ish
1000859e:	2300      	movs	r3, #0
100085a0:	6033      	str	r3, [r6, #0]
100085a2:	f3bf 8f5b 	dmb	ish
		metal_mutex_release(&rdev->lock);
		if (_ept && _ept->ns_unbind_cb)
100085a6:	b170      	cbz	r0, 100085c6 <rpmsg_virtio_ns_callback+0x90>
100085a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
100085aa:	b163      	cbz	r3, 100085c6 <rpmsg_virtio_ns_callback+0x90>
			_ept->ns_unbind_cb(_ept);
100085ac:	4798      	blx	r3
100085ae:	e00a      	b.n	100085c6 <rpmsg_virtio_ns_callback+0x90>
100085b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
100085b4:	e7cc      	b.n	10008550 <rpmsg_virtio_ns_callback+0x1a>
	} else {
		if (!_ept) {
100085b6:	b148      	cbz	r0, 100085cc <rpmsg_virtio_ns_callback+0x96>
			 */
			metal_mutex_release(&rdev->lock);
			if (rdev->ns_bind_cb)
				rdev->ns_bind_cb(rdev, name, dest);
		} else {
			_ept->dest_addr = dest;
100085b8:	6287      	str	r7, [r0, #40]	; 0x28
100085ba:	f3bf 8f5b 	dmb	ish
100085be:	2300      	movs	r3, #0
100085c0:	6033      	str	r3, [r6, #0]
100085c2:	f3bf 8f5b 	dmb	ish
			metal_mutex_release(&rdev->lock);
		}
	}

	return RPMSG_SUCCESS;
}
100085c6:	2000      	movs	r0, #0
100085c8:	b009      	add	sp, #36	; 0x24
100085ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100085cc:	f3bf 8f5b 	dmb	ish
100085d0:	2300      	movs	r3, #0
100085d2:	6033      	str	r3, [r6, #0]
100085d4:	f3bf 8f5b 	dmb	ish
			if (rdev->ns_bind_cb)
100085d8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
100085da:	2b00      	cmp	r3, #0
100085dc:	d0f3      	beq.n	100085c6 <rpmsg_virtio_ns_callback+0x90>
				rdev->ns_bind_cb(rdev, name, dest);
100085de:	463a      	mov	r2, r7
100085e0:	4669      	mov	r1, sp
100085e2:	4628      	mov	r0, r5
100085e4:	4798      	blx	r3
100085e6:	e7ee      	b.n	100085c6 <rpmsg_virtio_ns_callback+0x90>

100085e8 <rpmsg_virtio_return_buffer>:
	return rvdev->vdev->role;
100085e8:	6f81      	ldr	r1, [r0, #120]	; 0x78
100085ea:	6989      	ldr	r1, [r1, #24]
	if (role == RPMSG_REMOTE) {
100085ec:	2901      	cmp	r1, #1
100085ee:	d000      	beq.n	100085f2 <rpmsg_virtio_return_buffer+0xa>
100085f0:	4770      	bx	lr
{
100085f2:	b508      	push	{r3, lr}
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
100085f4:	4619      	mov	r1, r3
100085f6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
100085f8:	f000 fb58 	bl	10008cac <virtqueue_add_consumed_buffer>
}
100085fc:	bd08      	pop	{r3, pc}

100085fe <rpmsg_virtio_enqueue_buffer>:
100085fe:	6f81      	ldr	r1, [r0, #120]	; 0x78
10008600:	6989      	ldr	r1, [r1, #24]
	if (role == RPMSG_REMOTE) {
10008602:	2901      	cmp	r1, #1
10008604:	d001      	beq.n	1000860a <rpmsg_virtio_enqueue_buffer+0xc>
	return 0;
10008606:	2000      	movs	r0, #0
}
10008608:	4770      	bx	lr
{
1000860a:	b508      	push	{r3, lr}
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
1000860c:	4619      	mov	r1, r3
1000860e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
10008612:	f000 fb4b 	bl	10008cac <virtqueue_add_consumed_buffer>
}
10008616:	bd08      	pop	{r3, pc}

10008618 <rpmsg_virtio_get_rx_buffer>:
{
10008618:	b508      	push	{r3, lr}
1000861a:	460b      	mov	r3, r1
1000861c:	4611      	mov	r1, r2
1000861e:	6f82      	ldr	r2, [r0, #120]	; 0x78
10008620:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_REMOTE) {
10008622:	2a01      	cmp	r2, #1
10008624:	d001      	beq.n	1000862a <rpmsg_virtio_get_rx_buffer+0x12>
	void *data = NULL;
10008626:	2000      	movs	r0, #0
}
10008628:	bd08      	pop	{r3, pc}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
1000862a:	461a      	mov	r2, r3
1000862c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
1000862e:	f000 facc 	bl	10008bca <virtqueue_get_available_buffer>
10008632:	e7f9      	b.n	10008628 <rpmsg_virtio_get_rx_buffer+0x10>

10008634 <rpmsg_virtio_rx_callback>:
{
10008634:	b5f0      	push	{r4, r5, r6, r7, lr}
10008636:	b085      	sub	sp, #20
	struct virtio_device *vdev = vq->vq_dev;
10008638:	6803      	ldr	r3, [r0, #0]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
1000863a:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	int unlocked = METAL_MUTEX_UNLOCKED;
1000863c:	2300      	movs	r3, #0
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
1000863e:	f106 0558 	add.w	r5, r6, #88	; 0x58
10008642:	2101      	movs	r1, #1
10008644:	f3bf 8f5b 	dmb	ish
10008648:	e855 2f00 	ldrex	r2, [r5]
1000864c:	429a      	cmp	r2, r3
1000864e:	d102      	bne.n	10008656 <rpmsg_virtio_rx_callback+0x22>
10008650:	e845 1000 	strex	r0, r1, [r5]
10008654:	2800      	cmp	r0, #0
10008656:	f3bf 8f5b 	dmb	ish
1000865a:	4613      	mov	r3, r2
1000865c:	d1ef      	bne.n	1000863e <rpmsg_virtio_rx_callback+0xa>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
1000865e:	f10d 020a 	add.w	r2, sp, #10
10008662:	a903      	add	r1, sp, #12
10008664:	4630      	mov	r0, r6
10008666:	f7ff ffd7 	bl	10008618 <rpmsg_virtio_get_rx_buffer>
1000866a:	4604      	mov	r4, r0
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000866c:	f3bf 8f5b 	dmb	ish
10008670:	2300      	movs	r3, #0
10008672:	602b      	str	r3, [r5, #0]
10008674:	f3bf 8f5b 	dmb	ish
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
10008678:	e02d      	b.n	100086d6 <rpmsg_virtio_rx_callback+0xa2>
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
1000867a:	f8dc 702c 	ldr.w	r7, [ip, #44]	; 0x2c
					 rp_hdr->len, rp_hdr->src, ept->priv);
1000867e:	89a2      	ldrh	r2, [r4, #12]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
10008680:	4621      	mov	r1, r4
10008682:	f851 3b10 	ldr.w	r3, [r1], #16
10008686:	f8dc 003c 	ldr.w	r0, [ip, #60]	; 0x3c
1000868a:	9000      	str	r0, [sp, #0]
1000868c:	4660      	mov	r0, ip
1000868e:	47b8      	blx	r7
			RPMSG_ASSERT(status >= 0,
10008690:	2800      	cmp	r0, #0
10008692:	db4b      	blt.n	1000872c <rpmsg_virtio_rx_callback+0xf8>
	int unlocked = METAL_MUTEX_UNLOCKED;
10008694:	2300      	movs	r3, #0
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10008696:	2101      	movs	r1, #1
10008698:	f3bf 8f5b 	dmb	ish
1000869c:	e855 2f00 	ldrex	r2, [r5]
100086a0:	429a      	cmp	r2, r3
100086a2:	d102      	bne.n	100086aa <rpmsg_virtio_rx_callback+0x76>
100086a4:	e845 1000 	strex	r0, r1, [r5]
100086a8:	2800      	cmp	r0, #0
100086aa:	f3bf 8f5b 	dmb	ish
100086ae:	4613      	mov	r3, r2
100086b0:	d1f1      	bne.n	10008696 <rpmsg_virtio_rx_callback+0x62>
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
100086b2:	68a3      	ldr	r3, [r4, #8]
100086b4:	2b00      	cmp	r3, #0
100086b6:	da40      	bge.n	1000873a <rpmsg_virtio_rx_callback+0x106>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
100086b8:	f10d 020a 	add.w	r2, sp, #10
100086bc:	a903      	add	r1, sp, #12
100086be:	4630      	mov	r0, r6
100086c0:	f7ff ffaa 	bl	10008618 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
100086c4:	4604      	mov	r4, r0
100086c6:	2800      	cmp	r0, #0
100086c8:	d03f      	beq.n	1000874a <rpmsg_virtio_rx_callback+0x116>
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
100086ca:	f3bf 8f5b 	dmb	ish
100086ce:	2300      	movs	r3, #0
100086d0:	602b      	str	r3, [r5, #0]
100086d2:	f3bf 8f5b 	dmb	ish
	while (rp_hdr) {
100086d6:	2c00      	cmp	r4, #0
100086d8:	d03b      	beq.n	10008752 <rpmsg_virtio_rx_callback+0x11e>
		rp_hdr->reserved = idx;
100086da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
100086de:	60a3      	str	r3, [r4, #8]
	int unlocked = METAL_MUTEX_UNLOCKED;
100086e0:	2300      	movs	r3, #0
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
100086e2:	2101      	movs	r1, #1
100086e4:	f3bf 8f5b 	dmb	ish
100086e8:	e855 2f00 	ldrex	r2, [r5]
100086ec:	429a      	cmp	r2, r3
100086ee:	d102      	bne.n	100086f6 <rpmsg_virtio_rx_callback+0xc2>
100086f0:	e845 1000 	strex	r0, r1, [r5]
100086f4:	2800      	cmp	r0, #0
100086f6:	f3bf 8f5b 	dmb	ish
100086fa:	4613      	mov	r3, r2
100086fc:	d1f1      	bne.n	100086e2 <rpmsg_virtio_rx_callback+0xae>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
100086fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
10008702:	6862      	ldr	r2, [r4, #4]
10008704:	2100      	movs	r1, #0
10008706:	4630      	mov	r0, r6
10008708:	f7ff fe12 	bl	10008330 <rpmsg_get_endpoint>
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
1000870c:	f3bf 8f5b 	dmb	ish
10008710:	2300      	movs	r3, #0
10008712:	602b      	str	r3, [r5, #0]
10008714:	f3bf 8f5b 	dmb	ish
		if (ept) {
10008718:	4684      	mov	ip, r0
1000871a:	2800      	cmp	r0, #0
1000871c:	d0ba      	beq.n	10008694 <rpmsg_virtio_rx_callback+0x60>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
1000871e:	6a83      	ldr	r3, [r0, #40]	; 0x28
10008720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
10008724:	d1a9      	bne.n	1000867a <rpmsg_virtio_rx_callback+0x46>
				ept->dest_addr = rp_hdr->src;
10008726:	6823      	ldr	r3, [r4, #0]
10008728:	6283      	str	r3, [r0, #40]	; 0x28
1000872a:	e7a6      	b.n	1000867a <rpmsg_virtio_rx_callback+0x46>
			RPMSG_ASSERT(status >= 0,
1000872c:	4b0a      	ldr	r3, [pc, #40]	; (10008758 <rpmsg_virtio_rx_callback+0x124>)
1000872e:	4a0b      	ldr	r2, [pc, #44]	; (1000875c <rpmsg_virtio_rx_callback+0x128>)
10008730:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
10008734:	480a      	ldr	r0, [pc, #40]	; (10008760 <rpmsg_virtio_rx_callback+0x12c>)
10008736:	f000 fb51 	bl	10008ddc <__assert_func>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000873a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
1000873e:	9a03      	ldr	r2, [sp, #12]
10008740:	4621      	mov	r1, r4
10008742:	4630      	mov	r0, r6
10008744:	f7ff ff50 	bl	100085e8 <rpmsg_virtio_return_buffer>
10008748:	e7b6      	b.n	100086b8 <rpmsg_virtio_rx_callback+0x84>
			virtqueue_kick(rvdev->rvq);
1000874a:	6ff0      	ldr	r0, [r6, #124]	; 0x7c
1000874c:	f000 faed 	bl	10008d2a <virtqueue_kick>
10008750:	e7bb      	b.n	100086ca <rpmsg_virtio_rx_callback+0x96>
}
10008752:	b005      	add	sp, #20
10008754:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008756:	bf00      	nop
10008758:	1000aa4c 	.word	0x1000aa4c
1000875c:	1000a1f0 	.word	0x1000a1f0
10008760:	1000aa58 	.word	0x1000aa58

10008764 <rpmsg_virtio_get_tx_buffer>:
{
10008764:	b508      	push	{r3, lr}
10008766:	460b      	mov	r3, r1
10008768:	4611      	mov	r1, r2
1000876a:	6f82      	ldr	r2, [r0, #120]	; 0x78
1000876c:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_REMOTE) {
1000876e:	2a01      	cmp	r2, #1
10008770:	d001      	beq.n	10008776 <rpmsg_virtio_get_tx_buffer+0x12>
	void *data = NULL;
10008772:	2000      	movs	r0, #0
}
10008774:	bd08      	pop	{r3, pc}
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
10008776:	461a      	mov	r2, r3
10008778:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
1000877c:	f000 fa25 	bl	10008bca <virtqueue_get_available_buffer>
10008780:	e7f8      	b.n	10008774 <rpmsg_virtio_get_tx_buffer+0x10>

10008782 <rpmsg_virtio_get_tx_payload_buffer>:
{
10008782:	b5f0      	push	{r4, r5, r6, r7, lr}
10008784:	b083      	sub	sp, #12
10008786:	4606      	mov	r6, r0
10008788:	460f      	mov	r7, r1
1000878a:	4615      	mov	r5, r2
	return rvdev->vdev->func->get_status(rvdev->vdev);
1000878c:	6f80      	ldr	r0, [r0, #120]	; 0x78
1000878e:	6a03      	ldr	r3, [r0, #32]
10008790:	681b      	ldr	r3, [r3, #0]
10008792:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
10008794:	f010 0f04 	tst.w	r0, #4
10008798:	d02f      	beq.n	100087fa <rpmsg_virtio_get_tx_payload_buffer+0x78>
	if (wait)
1000879a:	b10d      	cbz	r5, 100087a0 <rpmsg_virtio_get_tx_payload_buffer+0x1e>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
1000879c:	f643 2598 	movw	r5, #15000	; 0x3a98
	int unlocked = METAL_MUTEX_UNLOCKED;
100087a0:	2300      	movs	r3, #0
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
100087a2:	f106 0458 	add.w	r4, r6, #88	; 0x58
100087a6:	2001      	movs	r0, #1
100087a8:	f3bf 8f5b 	dmb	ish
100087ac:	e854 2f00 	ldrex	r2, [r4]
100087b0:	429a      	cmp	r2, r3
100087b2:	d102      	bne.n	100087ba <rpmsg_virtio_get_tx_payload_buffer+0x38>
100087b4:	e844 0100 	strex	r1, r0, [r4]
100087b8:	2900      	cmp	r1, #0
100087ba:	f3bf 8f5b 	dmb	ish
100087be:	4613      	mov	r3, r2
100087c0:	d1ef      	bne.n	100087a2 <rpmsg_virtio_get_tx_payload_buffer+0x20>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
100087c2:	f10d 0206 	add.w	r2, sp, #6
100087c6:	4639      	mov	r1, r7
100087c8:	4630      	mov	r0, r6
100087ca:	f7ff ffcb 	bl	10008764 <rpmsg_virtio_get_tx_buffer>
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
100087ce:	f3bf 8f5b 	dmb	ish
100087d2:	2300      	movs	r3, #0
100087d4:	6023      	str	r3, [r4, #0]
100087d6:	f3bf 8f5b 	dmb	ish
		if (rp_hdr || !tick_count)
100087da:	4603      	mov	r3, r0
100087dc:	b910      	cbnz	r0, 100087e4 <rpmsg_virtio_get_tx_payload_buffer+0x62>
100087de:	b10d      	cbz	r5, 100087e4 <rpmsg_virtio_get_tx_payload_buffer+0x62>
		tick_count--;
100087e0:	3d01      	subs	r5, #1
		metal_mutex_acquire(&rdev->lock);
100087e2:	e7dd      	b.n	100087a0 <rpmsg_virtio_get_tx_payload_buffer+0x1e>
	if (!rp_hdr)
100087e4:	b133      	cbz	r3, 100087f4 <rpmsg_virtio_get_tx_payload_buffer+0x72>
	rp_hdr->reserved = idx;
100087e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
100087ea:	609a      	str	r2, [r3, #8]
	*len -= sizeof(struct rpmsg_hdr);
100087ec:	683a      	ldr	r2, [r7, #0]
100087ee:	3a10      	subs	r2, #16
100087f0:	603a      	str	r2, [r7, #0]
	return RPMSG_LOCATE_DATA(rp_hdr);
100087f2:	3310      	adds	r3, #16
}
100087f4:	4618      	mov	r0, r3
100087f6:	b003      	add	sp, #12
100087f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
100087fa:	2300      	movs	r3, #0
100087fc:	e7fa      	b.n	100087f4 <rpmsg_virtio_get_tx_payload_buffer+0x72>
	...

10008800 <rpmsg_virtio_send_offchannel_nocopy>:
{
10008800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10008804:	b084      	sub	sp, #16
10008806:	4604      	mov	r4, r0
10008808:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	hdr = RPMSG_LOCATE_HDR(data);
1000880a:	f1a3 0710 	sub.w	r7, r3, #16
	idx = hdr->reserved;
1000880e:	f853 5c08 	ldr.w	r5, [r3, #-8]
10008812:	b2ad      	uxth	r5, r5
	rp_hdr.dst = dst;
10008814:	9201      	str	r2, [sp, #4]
	rp_hdr.src = src;
10008816:	9100      	str	r1, [sp, #0]
	rp_hdr.len = len;
10008818:	f8ad 600c 	strh.w	r6, [sp, #12]
	rp_hdr.reserved = 0;
1000881c:	2300      	movs	r3, #0
1000881e:	9302      	str	r3, [sp, #8]
	rp_hdr.flags = 0;
10008820:	f8ad 300e 	strh.w	r3, [sp, #14]
	io = rvdev->shbuf_io;
10008824:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
10008828:	6801      	ldr	r1, [r0, #0]
1000882a:	1a79      	subs	r1, r7, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
1000882c:	6883      	ldr	r3, [r0, #8]
1000882e:	4299      	cmp	r1, r3
10008830:	d231      	bcs.n	10008896 <rpmsg_virtio_send_offchannel_nocopy+0x96>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
10008832:	2310      	movs	r3, #16
10008834:	466a      	mov	r2, sp
10008836:	f7ff fa72 	bl	10007d1e <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
1000883a:	2810      	cmp	r0, #16
1000883c:	d12e      	bne.n	1000889c <rpmsg_virtio_send_offchannel_nocopy+0x9c>
	int unlocked = METAL_MUTEX_UNLOCKED;
1000883e:	2300      	movs	r3, #0
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10008840:	f104 0858 	add.w	r8, r4, #88	; 0x58
10008844:	2101      	movs	r1, #1
10008846:	f3bf 8f5b 	dmb	ish
1000884a:	e858 2f00 	ldrex	r2, [r8]
1000884e:	429a      	cmp	r2, r3
10008850:	d102      	bne.n	10008858 <rpmsg_virtio_send_offchannel_nocopy+0x58>
10008852:	e848 1000 	strex	r0, r1, [r8]
10008856:	2800      	cmp	r0, #0
10008858:	f3bf 8f5b 	dmb	ish
1000885c:	4613      	mov	r3, r2
1000885e:	d1ef      	bne.n	10008840 <rpmsg_virtio_send_offchannel_nocopy+0x40>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
10008860:	4629      	mov	r1, r5
10008862:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
10008866:	f000 f9ab 	bl	10008bc0 <virtqueue_get_buffer_length>
1000886a:	4602      	mov	r2, r0
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
1000886c:	462b      	mov	r3, r5
1000886e:	4639      	mov	r1, r7
10008870:	4620      	mov	r0, r4
10008872:	f7ff fec4 	bl	100085fe <rpmsg_virtio_enqueue_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
10008876:	b9c0      	cbnz	r0, 100088aa <rpmsg_virtio_send_offchannel_nocopy+0xaa>
	virtqueue_kick(rvdev->svq);
10008878:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
1000887c:	f000 fa55 	bl	10008d2a <virtqueue_kick>
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10008880:	f3bf 8f5b 	dmb	ish
10008884:	2300      	movs	r3, #0
10008886:	f8c8 3000 	str.w	r3, [r8]
1000888a:	f3bf 8f5b 	dmb	ish
}
1000888e:	4630      	mov	r0, r6
10008890:	b004      	add	sp, #16
10008892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10008896:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1000889a:	e7ca      	b.n	10008832 <rpmsg_virtio_send_offchannel_nocopy+0x32>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
1000889c:	4b06      	ldr	r3, [pc, #24]	; (100088b8 <rpmsg_virtio_send_offchannel_nocopy+0xb8>)
1000889e:	4a07      	ldr	r2, [pc, #28]	; (100088bc <rpmsg_virtio_send_offchannel_nocopy+0xbc>)
100088a0:	f240 117d 	movw	r1, #381	; 0x17d
100088a4:	4806      	ldr	r0, [pc, #24]	; (100088c0 <rpmsg_virtio_send_offchannel_nocopy+0xc0>)
100088a6:	f000 fa99 	bl	10008ddc <__assert_func>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
100088aa:	4b06      	ldr	r3, [pc, #24]	; (100088c4 <rpmsg_virtio_send_offchannel_nocopy+0xc4>)
100088ac:	4a03      	ldr	r2, [pc, #12]	; (100088bc <rpmsg_virtio_send_offchannel_nocopy+0xbc>)
100088ae:	f44f 71c5 	mov.w	r1, #394	; 0x18a
100088b2:	4803      	ldr	r0, [pc, #12]	; (100088c0 <rpmsg_virtio_send_offchannel_nocopy+0xc0>)
100088b4:	f000 fa92 	bl	10008ddc <__assert_func>
100088b8:	1000ab00 	.word	0x1000ab00
100088bc:	1000a20c 	.word	0x1000a20c
100088c0:	1000aa58 	.word	0x1000aa58
100088c4:	1000ab1c 	.word	0x1000ab1c

100088c8 <rpmsg_virtio_send_offchannel_raw>:
{
100088c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
100088cc:	b084      	sub	sp, #16
100088ce:	4605      	mov	r5, r0
100088d0:	460e      	mov	r6, r1
100088d2:	4690      	mov	r8, r2
100088d4:	4699      	mov	r9, r3
100088d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
100088d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100088da:	a903      	add	r1, sp, #12
100088dc:	f7ff ff51 	bl	10008782 <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
100088e0:	b330      	cbz	r0, 10008930 <rpmsg_virtio_send_offchannel_raw+0x68>
100088e2:	4682      	mov	sl, r0
	if (len > (int)buff_len)
100088e4:	9c03      	ldr	r4, [sp, #12]
100088e6:	42bc      	cmp	r4, r7
100088e8:	db00      	blt.n	100088ec <rpmsg_virtio_send_offchannel_raw+0x24>
100088ea:	463c      	mov	r4, r7
	io = rvdev->shbuf_io;
100088ec:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
100088f0:	6801      	ldr	r1, [r0, #0]
100088f2:	ebaa 0101 	sub.w	r1, sl, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
100088f6:	6883      	ldr	r3, [r0, #8]
100088f8:	4299      	cmp	r1, r3
100088fa:	d20f      	bcs.n	1000891c <rpmsg_virtio_send_offchannel_raw+0x54>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
100088fc:	4623      	mov	r3, r4
100088fe:	464a      	mov	r2, r9
10008900:	f7ff fa0d 	bl	10007d1e <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
10008904:	4284      	cmp	r4, r0
10008906:	d10c      	bne.n	10008922 <rpmsg_virtio_send_offchannel_raw+0x5a>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
10008908:	9400      	str	r4, [sp, #0]
1000890a:	4653      	mov	r3, sl
1000890c:	4642      	mov	r2, r8
1000890e:	4631      	mov	r1, r6
10008910:	4628      	mov	r0, r5
10008912:	f7ff ff75 	bl	10008800 <rpmsg_virtio_send_offchannel_nocopy>
}
10008916:	b004      	add	sp, #16
10008918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000891c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
10008920:	e7ec      	b.n	100088fc <rpmsg_virtio_send_offchannel_raw+0x34>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
10008922:	4b04      	ldr	r3, [pc, #16]	; (10008934 <rpmsg_virtio_send_offchannel_raw+0x6c>)
10008924:	4a04      	ldr	r2, [pc, #16]	; (10008938 <rpmsg_virtio_send_offchannel_raw+0x70>)
10008926:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
1000892a:	4804      	ldr	r0, [pc, #16]	; (1000893c <rpmsg_virtio_send_offchannel_raw+0x74>)
1000892c:	f000 fa56 	bl	10008ddc <__assert_func>
		return RPMSG_ERR_NO_BUFF;
10008930:	4803      	ldr	r0, [pc, #12]	; (10008940 <rpmsg_virtio_send_offchannel_raw+0x78>)
10008932:	e7f0      	b.n	10008916 <rpmsg_virtio_send_offchannel_raw+0x4e>
10008934:	1000ab28 	.word	0x1000ab28
10008938:	1000a230 	.word	0x1000a230
1000893c:	1000aa58 	.word	0x1000aa58
10008940:	fffff82e 	.word	0xfffff82e

10008944 <rpmsg_virtio_release_rx_buffer>:
{
10008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008946:	4604      	mov	r4, r0
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
10008948:	f1a1 0710 	sub.w	r7, r1, #16
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
1000894c:	f851 5c08 	ldr.w	r5, [r1, #-8]
10008950:	b2ad      	uxth	r5, r5
	int unlocked = METAL_MUTEX_UNLOCKED;
10008952:	2300      	movs	r3, #0
	while (!atomic_compare_exchange_weak(&mutex->v, &unlocked,
10008954:	f104 0658 	add.w	r6, r4, #88	; 0x58
10008958:	2101      	movs	r1, #1
1000895a:	f3bf 8f5b 	dmb	ish
1000895e:	e856 2f00 	ldrex	r2, [r6]
10008962:	429a      	cmp	r2, r3
10008964:	d102      	bne.n	1000896c <rpmsg_virtio_release_rx_buffer+0x28>
10008966:	e846 1000 	strex	r0, r1, [r6]
1000896a:	2800      	cmp	r0, #0
1000896c:	f3bf 8f5b 	dmb	ish
10008970:	4613      	mov	r3, r2
10008972:	d1ef      	bne.n	10008954 <rpmsg_virtio_release_rx_buffer+0x10>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
10008974:	4629      	mov	r1, r5
10008976:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
10008978:	f000 f922 	bl	10008bc0 <virtqueue_get_buffer_length>
1000897c:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
1000897e:	462b      	mov	r3, r5
10008980:	4639      	mov	r1, r7
10008982:	4620      	mov	r0, r4
10008984:	f7ff fe30 	bl	100085e8 <rpmsg_virtio_return_buffer>
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
10008988:	f3bf 8f5b 	dmb	ish
1000898c:	2300      	movs	r3, #0
1000898e:	6033      	str	r3, [r6, #0]
10008990:	f3bf 8f5b 	dmb	ish
}
10008994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10008996 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
10008996:	b110      	cbz	r0, 1000899e <rpmsg_virtio_init_shm_pool+0x8>
	shpool->base = shb;
10008998:	6001      	str	r1, [r0, #0]
	shpool->size = size;
1000899a:	6082      	str	r2, [r0, #8]
	shpool->avail = size;
1000899c:	6042      	str	r2, [r0, #4]
}
1000899e:	4770      	bx	lr

100089a0 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
100089a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100089a2:	b087      	sub	sp, #28
100089a4:	4604      	mov	r4, r0
100089a6:	460d      	mov	r5, r1
100089a8:	4617      	mov	r7, r2
100089aa:	461e      	mov	r6, r3
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
100089ac:	2278      	movs	r2, #120	; 0x78
100089ae:	2100      	movs	r1, #0
100089b0:	f000 fa8a 	bl	10008ec8 <memset>
	atomic_store(&mutex->v, METAL_MUTEX_UNLOCKED);
100089b4:	f3bf 8f5b 	dmb	ish
100089b8:	2300      	movs	r3, #0
100089ba:	65a3      	str	r3, [r4, #88]	; 0x58
100089bc:	f3bf 8f5b 	dmb	ish
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
100089c0:	67a5      	str	r5, [r4, #120]	; 0x78
	rdev->ns_bind_cb = ns_bind_cb;
100089c2:	65e7      	str	r7, [r4, #92]	; 0x5c
	vdev->priv = rvdev;
100089c4:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
100089c6:	4b33      	ldr	r3, [pc, #204]	; (10008a94 <rpmsg_init_vdev+0xf4>)
100089c8:	6623      	str	r3, [r4, #96]	; 0x60
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
100089ca:	4b33      	ldr	r3, [pc, #204]	; (10008a98 <rpmsg_init_vdev+0xf8>)
100089cc:	6663      	str	r3, [r4, #100]	; 0x64
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
100089ce:	4b33      	ldr	r3, [pc, #204]	; (10008a9c <rpmsg_init_vdev+0xfc>)
100089d0:	66a3      	str	r3, [r4, #104]	; 0x68
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
100089d2:	4b33      	ldr	r3, [pc, #204]	; (10008aa0 <rpmsg_init_vdev+0x100>)
100089d4:	66e3      	str	r3, [r4, #108]	; 0x6c
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
100089d6:	4b33      	ldr	r3, [pc, #204]	; (10008aa4 <rpmsg_init_vdev+0x104>)
100089d8:	6723      	str	r3, [r4, #112]	; 0x70
	return rvdev->vdev->role;
100089da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
100089dc:	699f      	ldr	r7, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
100089de:	2f01      	cmp	r7, #1
100089e0:	d01b      	beq.n	10008a1a <rpmsg_init_vdev+0x7a>
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
100089e2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
100089e4:	6a03      	ldr	r3, [r0, #32]
100089e6:	689b      	ldr	r3, [r3, #8]
100089e8:	4798      	blx	r3
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
100089ea:	6128      	str	r0, [r5, #16]
100089ec:	2300      	movs	r3, #0
100089ee:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
100089f0:	f000 0001 	and.w	r0, r0, #1
100089f4:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
100089f8:	2f01      	cmp	r7, #1
100089fa:	d012      	beq.n	10008a22 <rpmsg_init_vdev+0x82>
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
100089fc:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
10008a00:	ab02      	add	r3, sp, #8
10008a02:	9300      	str	r3, [sp, #0]
10008a04:	ab04      	add	r3, sp, #16
10008a06:	2202      	movs	r2, #2
10008a08:	2100      	movs	r1, #0
10008a0a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
10008a0c:	f000 f858 	bl	10008ac0 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
10008a10:	4607      	mov	r7, r0
10008a12:	b1b0      	cbz	r0, 10008a42 <rpmsg_init_vdev+0xa2>
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
10008a14:	4638      	mov	r0, r7
10008a16:	b007      	add	sp, #28
10008a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rpmsg_virtio_wait_remote_ready(rvdev);
10008a1a:	4620      	mov	r0, r4
10008a1c:	f7ff fd6f 	bl	100084fe <rpmsg_virtio_wait_remote_ready>
10008a20:	e7df      	b.n	100089e2 <rpmsg_init_vdev+0x42>
		vq_names[0] = "tx_vq";
10008a22:	4b21      	ldr	r3, [pc, #132]	; (10008aa8 <rpmsg_init_vdev+0x108>)
10008a24:	9304      	str	r3, [sp, #16]
		vq_names[1] = "rx_vq";
10008a26:	4b21      	ldr	r3, [pc, #132]	; (10008aac <rpmsg_init_vdev+0x10c>)
10008a28:	9305      	str	r3, [sp, #20]
		callback[0] = rpmsg_virtio_tx_callback;
10008a2a:	4b21      	ldr	r3, [pc, #132]	; (10008ab0 <rpmsg_init_vdev+0x110>)
10008a2c:	9302      	str	r3, [sp, #8]
		callback[1] = rpmsg_virtio_rx_callback;
10008a2e:	4b21      	ldr	r3, [pc, #132]	; (10008ab4 <rpmsg_init_vdev+0x114>)
10008a30:	9303      	str	r3, [sp, #12]
		rvdev->rvq  = vdev->vrings_info[1].vq;
10008a32:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
10008a34:	699b      	ldr	r3, [r3, #24]
10008a36:	67e3      	str	r3, [r4, #124]	; 0x7c
		rvdev->svq  = vdev->vrings_info[0].vq;
10008a38:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
10008a3a:	681b      	ldr	r3, [r3, #0]
10008a3c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
10008a40:	e7dc      	b.n	100089fc <rpmsg_init_vdev+0x5c>
	virtqueue_disable_cb(rvdev->svq);
10008a42:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
10008a46:	f000 f953 	bl	10008cf0 <virtqueue_disable_cb>
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10008a4a:	2200      	movs	r2, #0
10008a4c:	e006      	b.n	10008a5c <rpmsg_init_vdev+0xbc>
		vq = vdev->vrings_info[i].vq;
10008a4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
10008a50:	eb02 0142 	add.w	r1, r2, r2, lsl #1
10008a54:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
		vq->shm_io = shm_io;
10008a58:	629e      	str	r6, [r3, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
10008a5a:	3201      	adds	r2, #1
10008a5c:	2a01      	cmp	r2, #1
10008a5e:	d9f6      	bls.n	10008a4e <rpmsg_init_vdev+0xae>
	list->prev = list;
10008a60:	6064      	str	r4, [r4, #4]
	list->next = list;
10008a62:	6024      	str	r4, [r4, #0]
	if (rdev->support_ns) {
10008a64:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
10008a68:	2b00      	cmp	r3, #0
10008a6a:	d0d3      	beq.n	10008a14 <rpmsg_init_vdev+0x74>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
10008a6c:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
10008a70:	2220      	movs	r2, #32
10008a72:	4911      	ldr	r1, [pc, #68]	; (10008ab8 <rpmsg_init_vdev+0x118>)
10008a74:	4628      	mov	r0, r5
10008a76:	f000 fe39 	bl	100096ec <strncpy>
	ept->addr = src;
10008a7a:	2335      	movs	r3, #53	; 0x35
10008a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->dest_addr = dest;
10008a7e:	6323      	str	r3, [r4, #48]	; 0x30
	ept->cb = cb;
10008a80:	4b0e      	ldr	r3, [pc, #56]	; (10008abc <rpmsg_init_vdev+0x11c>)
10008a82:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
10008a84:	2300      	movs	r3, #0
10008a86:	63a3      	str	r3, [r4, #56]	; 0x38
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
10008a88:	4629      	mov	r1, r5
10008a8a:	4620      	mov	r0, r4
10008a8c:	f7ff fc8d 	bl	100083aa <rpmsg_register_endpoint>
10008a90:	e7c0      	b.n	10008a14 <rpmsg_init_vdev+0x74>
10008a92:	bf00      	nop
10008a94:	100088c9 	.word	0x100088c9
10008a98:	10008527 	.word	0x10008527
10008a9c:	10008945 	.word	0x10008945
10008aa0:	10008783 	.word	0x10008783
10008aa4:	10008801 	.word	0x10008801
10008aa8:	1000ab38 	.word	0x1000ab38
10008aac:	1000ab40 	.word	0x1000ab40
10008ab0:	10008535 	.word	0x10008535
10008ab4:	10008635 	.word	0x10008635
10008ab8:	1000ab48 	.word	0x1000ab48
10008abc:	10008537 	.word	0x10008537

10008ac0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
10008ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10008ac4:	b084      	sub	sp, #16
10008ac6:	461f      	mov	r7, r3
10008ac8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
10008acc:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (nvqs > num_vrings)
10008ace:	4293      	cmp	r3, r2
10008ad0:	d324      	bcc.n	10008b1c <virtio_create_virtqueues+0x5c>
10008ad2:	4605      	mov	r5, r0
10008ad4:	4616      	mov	r6, r2
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
10008ad6:	2400      	movs	r4, #0
10008ad8:	e000      	b.n	10008adc <virtio_create_virtqueues+0x1c>
10008ada:	3401      	adds	r4, #1
10008adc:	42b4      	cmp	r4, r6
10008ade:	d218      	bcs.n	10008b12 <virtio_create_virtqueues+0x52>
		vring_info = &vdev->vrings_info[i];
10008ae0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
10008ae2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
10008ae6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
				       callbacks[i], vdev->func->notify,
10008aea:	6a2a      	ldr	r2, [r5, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
10008aec:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
10008af0:	9102      	str	r1, [sp, #8]
10008af2:	6a12      	ldr	r2, [r2, #32]
10008af4:	9201      	str	r2, [sp, #4]
10008af6:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
10008afa:	9200      	str	r2, [sp, #0]
10008afc:	3304      	adds	r3, #4
10008afe:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
10008b02:	b2a1      	uxth	r1, r4
10008b04:	4628      	mov	r0, r5
10008b06:	f000 f848 	bl	10008b9a <virtqueue_create>
				       vring_info->vq);
		if (ret)
10008b0a:	4603      	mov	r3, r0
10008b0c:	2800      	cmp	r0, #0
10008b0e:	d0e4      	beq.n	10008ada <virtio_create_virtqueues+0x1a>
10008b10:	e000      	b.n	10008b14 <virtio_create_virtqueues+0x54>
			return ret;
	}
	return 0;
10008b12:	2300      	movs	r3, #0
}
10008b14:	4618      	mov	r0, r3
10008b16:	b004      	add	sp, #16
10008b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERROR_VQUEUE_INVLD_PARAM;
10008b1c:	4b00      	ldr	r3, [pc, #0]	; (10008b20 <virtio_create_virtqueues+0x60>)
10008b1e:	e7f9      	b.n	10008b14 <virtio_create_virtqueues+0x54>
10008b20:	fffff440 	.word	0xfffff440

10008b24 <vq_ring_init>:
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
10008b24:	8943      	ldrh	r3, [r0, #10]
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
10008b26:	6143      	str	r3, [r0, #20]
	vr->desc = (struct vring_desc *)p;
10008b28:	6181      	str	r1, [r0, #24]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
10008b2a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
10008b2e:	61c1      	str	r1, [r0, #28]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
10008b30:	eb01 0143 	add.w	r1, r1, r3, lsl #1
10008b34:	3104      	adds	r1, #4
10008b36:	4411      	add	r1, r2
	      align - 1) & ~(align - 1));
10008b38:	3101      	adds	r1, #1
10008b3a:	4252      	negs	r2, r2
10008b3c:	400a      	ands	r2, r1
	vr->used = (struct vring_used *)
10008b3e:	6202      	str	r2, [r0, #32]
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_SLAVE_ONLY*/
}
10008b40:	4770      	bx	lr

10008b42 <vq_ring_must_notify>:
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10008b42:	6803      	ldr	r3, [r0, #0]
10008b44:	691a      	ldr	r2, [r3, #16]
10008b46:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
10008b4a:	d015      	beq.n	10008b78 <vq_ring_must_notify+0x36>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10008b4c:	699b      	ldr	r3, [r3, #24]
10008b4e:	2b01      	cmp	r3, #1
10008b50:	d001      	beq.n	10008b56 <vq_ring_must_notify+0x14>
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	}

	return 0;
10008b52:	2000      	movs	r0, #0
10008b54:	4770      	bx	lr
			new_idx = vq->vq_ring.used->idx;
10008b56:	6a03      	ldr	r3, [r0, #32]
10008b58:	885a      	ldrh	r2, [r3, #2]
			prev_idx = new_idx - vq->vq_queued_cnt;
10008b5a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
			event_idx = vring_used_event(&vq->vq_ring);
10008b5c:	69c1      	ldr	r1, [r0, #28]
10008b5e:	6940      	ldr	r0, [r0, #20]
10008b60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
10008b64:	8888      	ldrh	r0, [r1, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
10008b66:	1a10      	subs	r0, r2, r0
10008b68:	b280      	uxth	r0, r0
10008b6a:	3801      	subs	r0, #1
10008b6c:	b280      	uxth	r0, r0
10008b6e:	4283      	cmp	r3, r0
10008b70:	bf94      	ite	ls
10008b72:	2000      	movls	r0, #0
10008b74:	2001      	movhi	r0, #1
						prev_idx) != 0;
10008b76:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10008b78:	699b      	ldr	r3, [r3, #24]
10008b7a:	2b01      	cmp	r3, #1
10008b7c:	d001      	beq.n	10008b82 <vq_ring_must_notify+0x40>
	return 0;
10008b7e:	2000      	movs	r0, #0
}
10008b80:	4770      	bx	lr
			return (vq->vq_ring.avail->flags &
10008b82:	69c3      	ldr	r3, [r0, #28]
10008b84:	8818      	ldrh	r0, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
10008b86:	f080 0001 	eor.w	r0, r0, #1
10008b8a:	f000 0001 	and.w	r0, r0, #1
10008b8e:	4770      	bx	lr

10008b90 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
10008b90:	b508      	push	{r3, lr}
	if (vq->notify)
10008b92:	6903      	ldr	r3, [r0, #16]
10008b94:	b103      	cbz	r3, 10008b98 <vq_ring_notify+0x8>
		vq->notify(vq);
10008b96:	4798      	blx	r3
}
10008b98:	bd08      	pop	{r3, pc}

10008b9a <virtqueue_create>:
{
10008b9a:	b510      	push	{r4, lr}
10008b9c:	4604      	mov	r4, r0
10008b9e:	9804      	ldr	r0, [sp, #16]
		vq->vq_dev = virt_dev;
10008ba0:	6004      	str	r4, [r0, #0]
		vq->vq_name = name;
10008ba2:	6042      	str	r2, [r0, #4]
		vq->vq_queue_index = id;
10008ba4:	8101      	strh	r1, [r0, #8]
		vq->vq_nentries = ring->num_descs;
10008ba6:	891a      	ldrh	r2, [r3, #8]
10008ba8:	8142      	strh	r2, [r0, #10]
		vq->vq_free_cnt = vq->vq_nentries;
10008baa:	8482      	strh	r2, [r0, #36]	; 0x24
		vq->callback = callback;
10008bac:	9a02      	ldr	r2, [sp, #8]
10008bae:	60c2      	str	r2, [r0, #12]
		vq->notify = notify;
10008bb0:	9a03      	ldr	r2, [sp, #12]
10008bb2:	6102      	str	r2, [r0, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
10008bb4:	685a      	ldr	r2, [r3, #4]
10008bb6:	6819      	ldr	r1, [r3, #0]
10008bb8:	f7ff ffb4 	bl	10008b24 <vq_ring_init>
}
10008bbc:	2000      	movs	r0, #0
10008bbe:	bd10      	pop	{r4, pc}

10008bc0 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
10008bc0:	6983      	ldr	r3, [r0, #24]
10008bc2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
10008bc6:	6898      	ldr	r0, [r3, #8]
10008bc8:	4770      	bx	lr

10008bca <virtqueue_get_available_buffer>:
{
10008bca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10008bce:	460f      	mov	r7, r1
10008bd0:	4691      	mov	r9, r2
	atomic_thread_fence(memory_order_seq_cst);
10008bd2:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
10008bd6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
10008bd8:	69c1      	ldr	r1, [r0, #28]
10008bda:	884a      	ldrh	r2, [r1, #2]
10008bdc:	4293      	cmp	r3, r2
10008bde:	d063      	beq.n	10008ca8 <virtqueue_get_available_buffer+0xde>
10008be0:	4606      	mov	r6, r0
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
10008be2:	1c5a      	adds	r2, r3, #1
10008be4:	8602      	strh	r2, [r0, #48]	; 0x30
10008be6:	b21b      	sxth	r3, r3
10008be8:	8942      	ldrh	r2, [r0, #10]
10008bea:	3a01      	subs	r2, #1
10008bec:	b212      	sxth	r2, r2
10008bee:	4013      	ands	r3, r2
10008bf0:	b29b      	uxth	r3, r3
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
10008bf2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
10008bf6:	889a      	ldrh	r2, [r3, #4]
10008bf8:	b293      	uxth	r3, r2
10008bfa:	803a      	strh	r2, [r7, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
10008bfc:	6982      	ldr	r2, [r0, #24]
10008bfe:	011b      	lsls	r3, r3, #4
10008c00:	f852 8003 	ldr.w	r8, [r2, r3]
	struct metal_io_region *io = vq->shm_io;
10008c04:	6a84      	ldr	r4, [r0, #40]	; 0x28
	if (!io->ops.phys_to_offset) {
10008c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
10008c08:	b1a3      	cbz	r3, 10008c34 <virtqueue_get_available_buffer+0x6a>
	return (*io->ops.phys_to_offset)(io, phys);
10008c0a:	4641      	mov	r1, r8
10008c0c:	4620      	mov	r0, r4
10008c0e:	4798      	blx	r3
10008c10:	4605      	mov	r5, r0
	return (io->virt != METAL_BAD_VA && offset < io->size
10008c12:	6820      	ldr	r0, [r4, #0]
		: NULL);
10008c14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
10008c18:	d042      	beq.n	10008ca0 <virtqueue_get_available_buffer+0xd6>
	return (io->virt != METAL_BAD_VA && offset < io->size
10008c1a:	68a3      	ldr	r3, [r4, #8]
10008c1c:	42ab      	cmp	r3, r5
10008c1e:	d941      	bls.n	10008ca4 <virtqueue_get_available_buffer+0xda>
		? (void *)((uintptr_t)io->virt + offset)
10008c20:	4428      	add	r0, r5
	*len = vq->vq_ring.desc[*avail_idx].len;
10008c22:	69b3      	ldr	r3, [r6, #24]
10008c24:	883a      	ldrh	r2, [r7, #0]
10008c26:	eb03 1302 	add.w	r3, r3, r2, lsl #4
10008c2a:	689b      	ldr	r3, [r3, #8]
10008c2c:	f8c9 3000 	str.w	r3, [r9]
}
10008c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			(io->page_mask == (metal_phys_addr_t)(-1) ?
10008c34:	6925      	ldr	r5, [r4, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
10008c36:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
10008c3a:	d002      	beq.n	10008c42 <virtqueue_get_available_buffer+0x78>
10008c3c:	ea08 0505 	and.w	r5, r8, r5
10008c40:	e017      	b.n	10008c72 <virtqueue_get_available_buffer+0xa8>
10008c42:	6863      	ldr	r3, [r4, #4]
10008c44:	681d      	ldr	r5, [r3, #0]
10008c46:	eba8 0505 	sub.w	r5, r8, r5
10008c4a:	e012      	b.n	10008c72 <virtqueue_get_available_buffer+0xa8>
				     0 : offset >> io->page_shift);
10008c4c:	2300      	movs	r3, #0
10008c4e:	e018      	b.n	10008c82 <virtqueue_get_available_buffer+0xb8>
			: METAL_BAD_PHYS);
10008c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10008c54:	e005      	b.n	10008c62 <virtqueue_get_available_buffer+0x98>
10008c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10008c5a:	e002      	b.n	10008c62 <virtqueue_get_available_buffer+0x98>
	return io->ops.offset_to_phys(io, offset);
10008c5c:	4629      	mov	r1, r5
10008c5e:	4620      	mov	r0, r4
10008c60:	4798      	blx	r3
			if (metal_io_phys(io, offset) == phys)
10008c62:	4580      	cmp	r8, r0
10008c64:	d0d5      	beq.n	10008c12 <virtqueue_get_available_buffer+0x48>
			offset += io->page_mask + 1;
10008c66:	6920      	ldr	r0, [r4, #16]
10008c68:	4428      	add	r0, r5
10008c6a:	1c45      	adds	r5, r0, #1
		} while (offset < io->size);
10008c6c:	68a3      	ldr	r3, [r4, #8]
10008c6e:	429d      	cmp	r5, r3
10008c70:	d213      	bcs.n	10008c9a <virtqueue_get_available_buffer+0xd0>
	if (!io->ops.offset_to_phys) {
10008c72:	6b23      	ldr	r3, [r4, #48]	; 0x30
10008c74:	2b00      	cmp	r3, #0
10008c76:	d1f1      	bne.n	10008c5c <virtqueue_get_available_buffer+0x92>
		unsigned long page = (io->page_shift >=
10008c78:	68e3      	ldr	r3, [r4, #12]
				     0 : offset >> io->page_shift);
10008c7a:	2b1f      	cmp	r3, #31
10008c7c:	d8e6      	bhi.n	10008c4c <virtqueue_get_available_buffer+0x82>
10008c7e:	fa25 f303 	lsr.w	r3, r5, r3
		return (io->physmap && offset < io->size
10008c82:	6862      	ldr	r2, [r4, #4]
			: METAL_BAD_PHYS);
10008c84:	2a00      	cmp	r2, #0
10008c86:	d0e3      	beq.n	10008c50 <virtqueue_get_available_buffer+0x86>
		return (io->physmap && offset < io->size
10008c88:	68a1      	ldr	r1, [r4, #8]
10008c8a:	428d      	cmp	r5, r1
10008c8c:	d2e3      	bcs.n	10008c56 <virtqueue_get_available_buffer+0x8c>
			? io->physmap[page] + (offset & io->page_mask)
10008c8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
10008c92:	6923      	ldr	r3, [r4, #16]
10008c94:	402b      	ands	r3, r5
			: METAL_BAD_PHYS);
10008c96:	4418      	add	r0, r3
10008c98:	e7e3      	b.n	10008c62 <virtqueue_get_available_buffer+0x98>
		return METAL_BAD_OFFSET;
10008c9a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
10008c9e:	e7b8      	b.n	10008c12 <virtqueue_get_available_buffer+0x48>
		: NULL);
10008ca0:	2000      	movs	r0, #0
10008ca2:	e7be      	b.n	10008c22 <virtqueue_get_available_buffer+0x58>
10008ca4:	2000      	movs	r0, #0
10008ca6:	e7bc      	b.n	10008c22 <virtqueue_get_available_buffer+0x58>
		return NULL;
10008ca8:	2000      	movs	r0, #0
10008caa:	e7c1      	b.n	10008c30 <virtqueue_get_available_buffer+0x66>

10008cac <virtqueue_add_consumed_buffer>:
	if (head_idx > vq->vq_nentries) {
10008cac:	8943      	ldrh	r3, [r0, #10]
10008cae:	428b      	cmp	r3, r1
10008cb0:	d319      	bcc.n	10008ce6 <virtqueue_add_consumed_buffer+0x3a>
{
10008cb2:	b410      	push	{r4}
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
10008cb4:	6a04      	ldr	r4, [r0, #32]
10008cb6:	f9b4 c002 	ldrsh.w	ip, [r4, #2]
10008cba:	3b01      	subs	r3, #1
10008cbc:	b21b      	sxth	r3, r3
10008cbe:	ea0c 0303 	and.w	r3, ip, r3
10008cc2:	b29b      	uxth	r3, r3
	used_desc->id = head_idx;
10008cc4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
10008cc8:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
10008cca:	609a      	str	r2, [r3, #8]
	atomic_thread_fence(memory_order_seq_cst);
10008ccc:	f3bf 8f5b 	dmb	ish
	vq->vq_ring.used->idx++;
10008cd0:	6a02      	ldr	r2, [r0, #32]
10008cd2:	8853      	ldrh	r3, [r2, #2]
10008cd4:	3301      	adds	r3, #1
10008cd6:	8053      	strh	r3, [r2, #2]
	vq->vq_queued_cnt++;
10008cd8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
10008cda:	3301      	adds	r3, #1
10008cdc:	84c3      	strh	r3, [r0, #38]	; 0x26
	return VQUEUE_SUCCESS;
10008cde:	2000      	movs	r0, #0
}
10008ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
10008ce4:	4770      	bx	lr
		return ERROR_VRING_NO_BUFF;
10008ce6:	4801      	ldr	r0, [pc, #4]	; (10008cec <virtqueue_add_consumed_buffer+0x40>)
}
10008ce8:	4770      	bx	lr
10008cea:	bf00      	nop
10008cec:	fffff441 	.word	0xfffff441

10008cf0 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
10008cf0:	6803      	ldr	r3, [r0, #0]
10008cf2:	691a      	ldr	r2, [r3, #16]
10008cf4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
10008cf8:	d00e      	beq.n	10008d18 <virtqueue_disable_cb+0x28>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10008cfa:	699b      	ldr	r3, [r3, #24]
10008cfc:	2b01      	cmp	r3, #1
10008cfe:	d000      	beq.n	10008d02 <virtqueue_disable_cb+0x12>
}
10008d00:	4770      	bx	lr
			    vq->vq_available_idx - vq->vq_nentries - 1;
10008d02:	8e03      	ldrh	r3, [r0, #48]	; 0x30
10008d04:	8942      	ldrh	r2, [r0, #10]
10008d06:	1a9b      	subs	r3, r3, r2
10008d08:	b29b      	uxth	r3, r3
			vring_avail_event(&vq->vq_ring) =
10008d0a:	6a02      	ldr	r2, [r0, #32]
10008d0c:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
10008d0e:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
10008d10:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
10008d14:	8093      	strh	r3, [r2, #4]
10008d16:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
10008d18:	699b      	ldr	r3, [r3, #24]
10008d1a:	2b01      	cmp	r3, #1
10008d1c:	d1f0      	bne.n	10008d00 <virtqueue_disable_cb+0x10>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
10008d1e:	6a02      	ldr	r2, [r0, #32]
10008d20:	8813      	ldrh	r3, [r2, #0]
10008d22:	f043 0301 	orr.w	r3, r3, #1
10008d26:	8013      	strh	r3, [r2, #0]
}
10008d28:	e7ea      	b.n	10008d00 <virtqueue_disable_cb+0x10>

10008d2a <virtqueue_kick>:
{
10008d2a:	b510      	push	{r4, lr}
10008d2c:	4604      	mov	r4, r0
	atomic_thread_fence(memory_order_seq_cst);
10008d2e:	f3bf 8f5b 	dmb	ish
	if (vq_ring_must_notify(vq))
10008d32:	f7ff ff06 	bl	10008b42 <vq_ring_must_notify>
10008d36:	b910      	cbnz	r0, 10008d3e <virtqueue_kick+0x14>
	vq->vq_queued_cnt = 0;
10008d38:	2300      	movs	r3, #0
10008d3a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
10008d3c:	bd10      	pop	{r4, pc}
		vq_ring_notify(vq);
10008d3e:	4620      	mov	r0, r4
10008d40:	f7ff ff26 	bl	10008b90 <vq_ring_notify>
10008d44:	e7f8      	b.n	10008d38 <virtqueue_kick+0xe>

10008d46 <virtqueue_notification>:
{
10008d46:	b508      	push	{r3, lr}
	atomic_thread_fence(memory_order_seq_cst);
10008d48:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
10008d4c:	68c3      	ldr	r3, [r0, #12]
10008d4e:	b103      	cbz	r3, 10008d52 <virtqueue_notification+0xc>
		vq->callback(vq);
10008d50:	4798      	blx	r3
}
10008d52:	bd08      	pop	{r3, pc}

10008d54 <VIRT_UART_read_cb>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

static int VIRT_UART_read_cb(struct rpmsg_endpoint *ept, void *data,
			    size_t len, uint32_t src, void *priv)
{
10008d54:	b508      	push	{r3, lr}
  VIRT_UART_HandleTypeDef *huart = metal_container_of(ept, VIRT_UART_HandleTypeDef, ept);
  (void)src;

  huart->pRxBuffPtr = data;
10008d56:	6441      	str	r1, [r0, #68]	; 0x44
  huart->RxXferSize = len;
10008d58:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  if (huart->RxCpltCallback != NULL) {
10008d5c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
10008d5e:	b103      	cbz	r3, 10008d62 <VIRT_UART_read_cb+0xe>
    huart->RxCpltCallback(huart);
10008d60:	4798      	blx	r3
  }

  return 0;
}
10008d62:	2000      	movs	r0, #0
10008d64:	bd08      	pop	{r3, pc}
	...

10008d68 <VIRT_UART_Init>:

VIRT_UART_StatusTypeDef VIRT_UART_Init(VIRT_UART_HandleTypeDef *huart)
{
10008d68:	b500      	push	{lr}
10008d6a:	b083      	sub	sp, #12

  int status;

  /* Create a endpoint for rmpsg communication */

  status = OPENAMP_create_endpoint(&huart->ept, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
10008d6c:	2300      	movs	r3, #0
10008d6e:	9300      	str	r3, [sp, #0]
10008d70:	4b06      	ldr	r3, [pc, #24]	; (10008d8c <VIRT_UART_Init+0x24>)
10008d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
10008d76:	4906      	ldr	r1, [pc, #24]	; (10008d90 <VIRT_UART_Init+0x28>)
10008d78:	f7f8 f9ee 	bl	10001158 <OPENAMP_create_endpoint>
		  	  	  	  	  	  	   VIRT_UART_read_cb, NULL);

  if(status < 0) {
10008d7c:	2800      	cmp	r0, #0
10008d7e:	db03      	blt.n	10008d88 <VIRT_UART_Init+0x20>
    return VIRT_UART_ERROR;
  }

  return VIRT_UART_OK;
10008d80:	2000      	movs	r0, #0
}
10008d82:	b003      	add	sp, #12
10008d84:	f85d fb04 	ldr.w	pc, [sp], #4
    return VIRT_UART_ERROR;
10008d88:	2001      	movs	r0, #1
10008d8a:	e7fa      	b.n	10008d82 <VIRT_UART_Init+0x1a>
10008d8c:	10008d55 	.word	0x10008d55
10008d90:	1000ab4c 	.word	0x1000ab4c

10008d94 <VIRT_UART_DeInit>:

VIRT_UART_StatusTypeDef VIRT_UART_DeInit (VIRT_UART_HandleTypeDef *huart)
{
10008d94:	b508      	push	{r3, lr}
  OPENAMP_destroy_ept(&huart->ept);
10008d96:	f7ff fb9b 	bl	100084d0 <rpmsg_destroy_ept>

  return VIRT_UART_OK;
}
10008d9a:	2000      	movs	r0, #0
10008d9c:	bd08      	pop	{r3, pc}

10008d9e <VIRT_UART_RegisterCallback>:

VIRT_UART_StatusTypeDef VIRT_UART_RegisterCallback(VIRT_UART_HandleTypeDef *huart,
                                                   VIRT_UART_CallbackIDTypeDef CallbackID,
                                                   void (* pCallback)(VIRT_UART_HandleTypeDef *_huart))
{
10008d9e:	4603      	mov	r3, r0
  VIRT_UART_StatusTypeDef status = VIRT_UART_OK;

  switch (CallbackID)
10008da0:	4608      	mov	r0, r1
10008da2:	b909      	cbnz	r1, 10008da8 <VIRT_UART_RegisterCallback+0xa>
  {
  case VIRT_UART_RXCPLT_CB_ID :
    huart->RxCpltCallback = pCallback;
10008da4:	64da      	str	r2, [r3, #76]	; 0x4c
    break;
10008da6:	4770      	bx	lr

  default :
   /* Return error status */
    status =  VIRT_UART_ERROR;
10008da8:	2001      	movs	r0, #1
    break;
  }
  return status;
}
10008daa:	4770      	bx	lr

10008dac <VIRT_UART_Transmit>:

VIRT_UART_StatusTypeDef VIRT_UART_Transmit(VIRT_UART_HandleTypeDef *huart, const void *pData, uint16_t Size)
{
	int res;

	if (Size > (RPMSG_BUFFER_SIZE-16))
10008dac:	f5b2 7ff8 	cmp.w	r2, #496	; 0x1f0
10008db0:	d901      	bls.n	10008db6 <VIRT_UART_Transmit+0xa>
	  return VIRT_UART_ERROR;
10008db2:	2001      	movs	r0, #1
	if (res <0) {
		return VIRT_UART_ERROR;
	}

	return VIRT_UART_OK;
}
10008db4:	4770      	bx	lr
{
10008db6:	b500      	push	{lr}
10008db8:	b083      	sub	sp, #12
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
10008dba:	2301      	movs	r3, #1
10008dbc:	9301      	str	r3, [sp, #4]
10008dbe:	9200      	str	r2, [sp, #0]
10008dc0:	460b      	mov	r3, r1
10008dc2:	6a82      	ldr	r2, [r0, #40]	; 0x28
10008dc4:	6a41      	ldr	r1, [r0, #36]	; 0x24
10008dc6:	f7ff fa7b 	bl	100082c0 <rpmsg_send_offchannel_raw>
	if (res <0) {
10008dca:	2800      	cmp	r0, #0
10008dcc:	db03      	blt.n	10008dd6 <VIRT_UART_Transmit+0x2a>
	return VIRT_UART_OK;
10008dce:	2000      	movs	r0, #0
}
10008dd0:	b003      	add	sp, #12
10008dd2:	f85d fb04 	ldr.w	pc, [sp], #4
		return VIRT_UART_ERROR;
10008dd6:	2001      	movs	r0, #1
10008dd8:	e7fa      	b.n	10008dd0 <VIRT_UART_Transmit+0x24>
	...

10008ddc <__assert_func>:
10008ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10008dde:	4614      	mov	r4, r2
10008de0:	461a      	mov	r2, r3
10008de2:	4b09      	ldr	r3, [pc, #36]	; (10008e08 <__assert_func+0x2c>)
10008de4:	681b      	ldr	r3, [r3, #0]
10008de6:	4605      	mov	r5, r0
10008de8:	68d8      	ldr	r0, [r3, #12]
10008dea:	b14c      	cbz	r4, 10008e00 <__assert_func+0x24>
10008dec:	4b07      	ldr	r3, [pc, #28]	; (10008e0c <__assert_func+0x30>)
10008dee:	9100      	str	r1, [sp, #0]
10008df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
10008df4:	4906      	ldr	r1, [pc, #24]	; (10008e10 <__assert_func+0x34>)
10008df6:	462b      	mov	r3, r5
10008df8:	f000 f812 	bl	10008e20 <fiprintf>
10008dfc:	f000 fe32 	bl	10009a64 <abort>
10008e00:	4b04      	ldr	r3, [pc, #16]	; (10008e14 <__assert_func+0x38>)
10008e02:	461c      	mov	r4, r3
10008e04:	e7f3      	b.n	10008dee <__assert_func+0x12>
10008e06:	bf00      	nop
10008e08:	10020428 	.word	0x10020428
10008e0c:	1000ab56 	.word	0x1000ab56
10008e10:	1000ab63 	.word	0x1000ab63
10008e14:	1000ab91 	.word	0x1000ab91

10008e18 <atoi>:
10008e18:	220a      	movs	r2, #10
10008e1a:	2100      	movs	r1, #0
10008e1c:	f000 bd58 	b.w	100098d0 <strtol>

10008e20 <fiprintf>:
10008e20:	b40e      	push	{r1, r2, r3}
10008e22:	b503      	push	{r0, r1, lr}
10008e24:	4601      	mov	r1, r0
10008e26:	ab03      	add	r3, sp, #12
10008e28:	4805      	ldr	r0, [pc, #20]	; (10008e40 <fiprintf+0x20>)
10008e2a:	f853 2b04 	ldr.w	r2, [r3], #4
10008e2e:	6800      	ldr	r0, [r0, #0]
10008e30:	9301      	str	r3, [sp, #4]
10008e32:	f000 f95b 	bl	100090ec <_vfiprintf_r>
10008e36:	b002      	add	sp, #8
10008e38:	f85d eb04 	ldr.w	lr, [sp], #4
10008e3c:	b003      	add	sp, #12
10008e3e:	4770      	bx	lr
10008e40:	10020428 	.word	0x10020428

10008e44 <__libc_init_array>:
10008e44:	b570      	push	{r4, r5, r6, lr}
10008e46:	4d0d      	ldr	r5, [pc, #52]	; (10008e7c <__libc_init_array+0x38>)
10008e48:	4c0d      	ldr	r4, [pc, #52]	; (10008e80 <__libc_init_array+0x3c>)
10008e4a:	1b64      	subs	r4, r4, r5
10008e4c:	10a4      	asrs	r4, r4, #2
10008e4e:	2600      	movs	r6, #0
10008e50:	42a6      	cmp	r6, r4
10008e52:	d109      	bne.n	10008e68 <__libc_init_array+0x24>
10008e54:	4d0b      	ldr	r5, [pc, #44]	; (10008e84 <__libc_init_array+0x40>)
10008e56:	4c0c      	ldr	r4, [pc, #48]	; (10008e88 <__libc_init_array+0x44>)
10008e58:	f001 f92e 	bl	1000a0b8 <_init>
10008e5c:	1b64      	subs	r4, r4, r5
10008e5e:	10a4      	asrs	r4, r4, #2
10008e60:	2600      	movs	r6, #0
10008e62:	42a6      	cmp	r6, r4
10008e64:	d105      	bne.n	10008e72 <__libc_init_array+0x2e>
10008e66:	bd70      	pop	{r4, r5, r6, pc}
10008e68:	f855 3b04 	ldr.w	r3, [r5], #4
10008e6c:	4798      	blx	r3
10008e6e:	3601      	adds	r6, #1
10008e70:	e7ee      	b.n	10008e50 <__libc_init_array+0xc>
10008e72:	f855 3b04 	ldr.w	r3, [r5], #4
10008e76:	4798      	blx	r3
10008e78:	3601      	adds	r6, #1
10008e7a:	e7f2      	b.n	10008e62 <__libc_init_array+0x1e>
10008e7c:	1000ada0 	.word	0x1000ada0
10008e80:	1000ada0 	.word	0x1000ada0
10008e84:	1000ada0 	.word	0x1000ada0
10008e88:	1000ada4 	.word	0x1000ada4

10008e8c <malloc>:
10008e8c:	4b02      	ldr	r3, [pc, #8]	; (10008e98 <malloc+0xc>)
10008e8e:	4601      	mov	r1, r0
10008e90:	6818      	ldr	r0, [r3, #0]
10008e92:	f000 b88d 	b.w	10008fb0 <_malloc_r>
10008e96:	bf00      	nop
10008e98:	10020428 	.word	0x10020428

10008e9c <free>:
10008e9c:	4b02      	ldr	r3, [pc, #8]	; (10008ea8 <free+0xc>)
10008e9e:	4601      	mov	r1, r0
10008ea0:	6818      	ldr	r0, [r3, #0]
10008ea2:	f000 b819 	b.w	10008ed8 <_free_r>
10008ea6:	bf00      	nop
10008ea8:	10020428 	.word	0x10020428

10008eac <memcpy>:
10008eac:	440a      	add	r2, r1
10008eae:	4291      	cmp	r1, r2
10008eb0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
10008eb4:	d100      	bne.n	10008eb8 <memcpy+0xc>
10008eb6:	4770      	bx	lr
10008eb8:	b510      	push	{r4, lr}
10008eba:	f811 4b01 	ldrb.w	r4, [r1], #1
10008ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
10008ec2:	4291      	cmp	r1, r2
10008ec4:	d1f9      	bne.n	10008eba <memcpy+0xe>
10008ec6:	bd10      	pop	{r4, pc}

10008ec8 <memset>:
10008ec8:	4402      	add	r2, r0
10008eca:	4603      	mov	r3, r0
10008ecc:	4293      	cmp	r3, r2
10008ece:	d100      	bne.n	10008ed2 <memset+0xa>
10008ed0:	4770      	bx	lr
10008ed2:	f803 1b01 	strb.w	r1, [r3], #1
10008ed6:	e7f9      	b.n	10008ecc <memset+0x4>

10008ed8 <_free_r>:
10008ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
10008eda:	2900      	cmp	r1, #0
10008edc:	d044      	beq.n	10008f68 <_free_r+0x90>
10008ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
10008ee2:	9001      	str	r0, [sp, #4]
10008ee4:	2b00      	cmp	r3, #0
10008ee6:	f1a1 0404 	sub.w	r4, r1, #4
10008eea:	bfb8      	it	lt
10008eec:	18e4      	addlt	r4, r4, r3
10008eee:	f000 ffe7 	bl	10009ec0 <__malloc_lock>
10008ef2:	4a1e      	ldr	r2, [pc, #120]	; (10008f6c <_free_r+0x94>)
10008ef4:	9801      	ldr	r0, [sp, #4]
10008ef6:	6813      	ldr	r3, [r2, #0]
10008ef8:	b933      	cbnz	r3, 10008f08 <_free_r+0x30>
10008efa:	6063      	str	r3, [r4, #4]
10008efc:	6014      	str	r4, [r2, #0]
10008efe:	b003      	add	sp, #12
10008f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
10008f04:	f000 bfe2 	b.w	10009ecc <__malloc_unlock>
10008f08:	42a3      	cmp	r3, r4
10008f0a:	d908      	bls.n	10008f1e <_free_r+0x46>
10008f0c:	6825      	ldr	r5, [r4, #0]
10008f0e:	1961      	adds	r1, r4, r5
10008f10:	428b      	cmp	r3, r1
10008f12:	bf01      	itttt	eq
10008f14:	6819      	ldreq	r1, [r3, #0]
10008f16:	685b      	ldreq	r3, [r3, #4]
10008f18:	1949      	addeq	r1, r1, r5
10008f1a:	6021      	streq	r1, [r4, #0]
10008f1c:	e7ed      	b.n	10008efa <_free_r+0x22>
10008f1e:	461a      	mov	r2, r3
10008f20:	685b      	ldr	r3, [r3, #4]
10008f22:	b10b      	cbz	r3, 10008f28 <_free_r+0x50>
10008f24:	42a3      	cmp	r3, r4
10008f26:	d9fa      	bls.n	10008f1e <_free_r+0x46>
10008f28:	6811      	ldr	r1, [r2, #0]
10008f2a:	1855      	adds	r5, r2, r1
10008f2c:	42a5      	cmp	r5, r4
10008f2e:	d10b      	bne.n	10008f48 <_free_r+0x70>
10008f30:	6824      	ldr	r4, [r4, #0]
10008f32:	4421      	add	r1, r4
10008f34:	1854      	adds	r4, r2, r1
10008f36:	42a3      	cmp	r3, r4
10008f38:	6011      	str	r1, [r2, #0]
10008f3a:	d1e0      	bne.n	10008efe <_free_r+0x26>
10008f3c:	681c      	ldr	r4, [r3, #0]
10008f3e:	685b      	ldr	r3, [r3, #4]
10008f40:	6053      	str	r3, [r2, #4]
10008f42:	4421      	add	r1, r4
10008f44:	6011      	str	r1, [r2, #0]
10008f46:	e7da      	b.n	10008efe <_free_r+0x26>
10008f48:	d902      	bls.n	10008f50 <_free_r+0x78>
10008f4a:	230c      	movs	r3, #12
10008f4c:	6003      	str	r3, [r0, #0]
10008f4e:	e7d6      	b.n	10008efe <_free_r+0x26>
10008f50:	6825      	ldr	r5, [r4, #0]
10008f52:	1961      	adds	r1, r4, r5
10008f54:	428b      	cmp	r3, r1
10008f56:	bf04      	itt	eq
10008f58:	6819      	ldreq	r1, [r3, #0]
10008f5a:	685b      	ldreq	r3, [r3, #4]
10008f5c:	6063      	str	r3, [r4, #4]
10008f5e:	bf04      	itt	eq
10008f60:	1949      	addeq	r1, r1, r5
10008f62:	6021      	streq	r1, [r4, #0]
10008f64:	6054      	str	r4, [r2, #4]
10008f66:	e7ca      	b.n	10008efe <_free_r+0x26>
10008f68:	b003      	add	sp, #12
10008f6a:	bd30      	pop	{r4, r5, pc}
10008f6c:	10021374 	.word	0x10021374

10008f70 <sbrk_aligned>:
10008f70:	b570      	push	{r4, r5, r6, lr}
10008f72:	4e0e      	ldr	r6, [pc, #56]	; (10008fac <sbrk_aligned+0x3c>)
10008f74:	460c      	mov	r4, r1
10008f76:	6831      	ldr	r1, [r6, #0]
10008f78:	4605      	mov	r5, r0
10008f7a:	b911      	cbnz	r1, 10008f82 <sbrk_aligned+0x12>
10008f7c:	f000 fb92 	bl	100096a4 <_sbrk_r>
10008f80:	6030      	str	r0, [r6, #0]
10008f82:	4621      	mov	r1, r4
10008f84:	4628      	mov	r0, r5
10008f86:	f000 fb8d 	bl	100096a4 <_sbrk_r>
10008f8a:	1c43      	adds	r3, r0, #1
10008f8c:	d00a      	beq.n	10008fa4 <sbrk_aligned+0x34>
10008f8e:	1cc4      	adds	r4, r0, #3
10008f90:	f024 0403 	bic.w	r4, r4, #3
10008f94:	42a0      	cmp	r0, r4
10008f96:	d007      	beq.n	10008fa8 <sbrk_aligned+0x38>
10008f98:	1a21      	subs	r1, r4, r0
10008f9a:	4628      	mov	r0, r5
10008f9c:	f000 fb82 	bl	100096a4 <_sbrk_r>
10008fa0:	3001      	adds	r0, #1
10008fa2:	d101      	bne.n	10008fa8 <sbrk_aligned+0x38>
10008fa4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
10008fa8:	4620      	mov	r0, r4
10008faa:	bd70      	pop	{r4, r5, r6, pc}
10008fac:	10021378 	.word	0x10021378

10008fb0 <_malloc_r>:
10008fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10008fb4:	1ccd      	adds	r5, r1, #3
10008fb6:	f025 0503 	bic.w	r5, r5, #3
10008fba:	3508      	adds	r5, #8
10008fbc:	2d0c      	cmp	r5, #12
10008fbe:	bf38      	it	cc
10008fc0:	250c      	movcc	r5, #12
10008fc2:	2d00      	cmp	r5, #0
10008fc4:	4607      	mov	r7, r0
10008fc6:	db01      	blt.n	10008fcc <_malloc_r+0x1c>
10008fc8:	42a9      	cmp	r1, r5
10008fca:	d905      	bls.n	10008fd8 <_malloc_r+0x28>
10008fcc:	230c      	movs	r3, #12
10008fce:	603b      	str	r3, [r7, #0]
10008fd0:	2600      	movs	r6, #0
10008fd2:	4630      	mov	r0, r6
10008fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10008fd8:	4e2e      	ldr	r6, [pc, #184]	; (10009094 <_malloc_r+0xe4>)
10008fda:	f000 ff71 	bl	10009ec0 <__malloc_lock>
10008fde:	6833      	ldr	r3, [r6, #0]
10008fe0:	461c      	mov	r4, r3
10008fe2:	bb34      	cbnz	r4, 10009032 <_malloc_r+0x82>
10008fe4:	4629      	mov	r1, r5
10008fe6:	4638      	mov	r0, r7
10008fe8:	f7ff ffc2 	bl	10008f70 <sbrk_aligned>
10008fec:	1c43      	adds	r3, r0, #1
10008fee:	4604      	mov	r4, r0
10008ff0:	d14d      	bne.n	1000908e <_malloc_r+0xde>
10008ff2:	6834      	ldr	r4, [r6, #0]
10008ff4:	4626      	mov	r6, r4
10008ff6:	2e00      	cmp	r6, #0
10008ff8:	d140      	bne.n	1000907c <_malloc_r+0xcc>
10008ffa:	6823      	ldr	r3, [r4, #0]
10008ffc:	4631      	mov	r1, r6
10008ffe:	4638      	mov	r0, r7
10009000:	eb04 0803 	add.w	r8, r4, r3
10009004:	f000 fb4e 	bl	100096a4 <_sbrk_r>
10009008:	4580      	cmp	r8, r0
1000900a:	d13a      	bne.n	10009082 <_malloc_r+0xd2>
1000900c:	6821      	ldr	r1, [r4, #0]
1000900e:	3503      	adds	r5, #3
10009010:	1a6d      	subs	r5, r5, r1
10009012:	f025 0503 	bic.w	r5, r5, #3
10009016:	3508      	adds	r5, #8
10009018:	2d0c      	cmp	r5, #12
1000901a:	bf38      	it	cc
1000901c:	250c      	movcc	r5, #12
1000901e:	4629      	mov	r1, r5
10009020:	4638      	mov	r0, r7
10009022:	f7ff ffa5 	bl	10008f70 <sbrk_aligned>
10009026:	3001      	adds	r0, #1
10009028:	d02b      	beq.n	10009082 <_malloc_r+0xd2>
1000902a:	6823      	ldr	r3, [r4, #0]
1000902c:	442b      	add	r3, r5
1000902e:	6023      	str	r3, [r4, #0]
10009030:	e00e      	b.n	10009050 <_malloc_r+0xa0>
10009032:	6822      	ldr	r2, [r4, #0]
10009034:	1b52      	subs	r2, r2, r5
10009036:	d41e      	bmi.n	10009076 <_malloc_r+0xc6>
10009038:	2a0b      	cmp	r2, #11
1000903a:	d916      	bls.n	1000906a <_malloc_r+0xba>
1000903c:	1961      	adds	r1, r4, r5
1000903e:	42a3      	cmp	r3, r4
10009040:	6025      	str	r5, [r4, #0]
10009042:	bf18      	it	ne
10009044:	6059      	strne	r1, [r3, #4]
10009046:	6863      	ldr	r3, [r4, #4]
10009048:	bf08      	it	eq
1000904a:	6031      	streq	r1, [r6, #0]
1000904c:	5162      	str	r2, [r4, r5]
1000904e:	604b      	str	r3, [r1, #4]
10009050:	4638      	mov	r0, r7
10009052:	f104 060b 	add.w	r6, r4, #11
10009056:	f000 ff39 	bl	10009ecc <__malloc_unlock>
1000905a:	f026 0607 	bic.w	r6, r6, #7
1000905e:	1d23      	adds	r3, r4, #4
10009060:	1af2      	subs	r2, r6, r3
10009062:	d0b6      	beq.n	10008fd2 <_malloc_r+0x22>
10009064:	1b9b      	subs	r3, r3, r6
10009066:	50a3      	str	r3, [r4, r2]
10009068:	e7b3      	b.n	10008fd2 <_malloc_r+0x22>
1000906a:	6862      	ldr	r2, [r4, #4]
1000906c:	42a3      	cmp	r3, r4
1000906e:	bf0c      	ite	eq
10009070:	6032      	streq	r2, [r6, #0]
10009072:	605a      	strne	r2, [r3, #4]
10009074:	e7ec      	b.n	10009050 <_malloc_r+0xa0>
10009076:	4623      	mov	r3, r4
10009078:	6864      	ldr	r4, [r4, #4]
1000907a:	e7b2      	b.n	10008fe2 <_malloc_r+0x32>
1000907c:	4634      	mov	r4, r6
1000907e:	6876      	ldr	r6, [r6, #4]
10009080:	e7b9      	b.n	10008ff6 <_malloc_r+0x46>
10009082:	230c      	movs	r3, #12
10009084:	603b      	str	r3, [r7, #0]
10009086:	4638      	mov	r0, r7
10009088:	f000 ff20 	bl	10009ecc <__malloc_unlock>
1000908c:	e7a1      	b.n	10008fd2 <_malloc_r+0x22>
1000908e:	6025      	str	r5, [r4, #0]
10009090:	e7de      	b.n	10009050 <_malloc_r+0xa0>
10009092:	bf00      	nop
10009094:	10021374 	.word	0x10021374

10009098 <__sfputc_r>:
10009098:	6893      	ldr	r3, [r2, #8]
1000909a:	3b01      	subs	r3, #1
1000909c:	2b00      	cmp	r3, #0
1000909e:	b410      	push	{r4}
100090a0:	6093      	str	r3, [r2, #8]
100090a2:	da08      	bge.n	100090b6 <__sfputc_r+0x1e>
100090a4:	6994      	ldr	r4, [r2, #24]
100090a6:	42a3      	cmp	r3, r4
100090a8:	db01      	blt.n	100090ae <__sfputc_r+0x16>
100090aa:	290a      	cmp	r1, #10
100090ac:	d103      	bne.n	100090b6 <__sfputc_r+0x1e>
100090ae:	f85d 4b04 	ldr.w	r4, [sp], #4
100090b2:	f000 bc17 	b.w	100098e4 <__swbuf_r>
100090b6:	6813      	ldr	r3, [r2, #0]
100090b8:	1c58      	adds	r0, r3, #1
100090ba:	6010      	str	r0, [r2, #0]
100090bc:	7019      	strb	r1, [r3, #0]
100090be:	4608      	mov	r0, r1
100090c0:	f85d 4b04 	ldr.w	r4, [sp], #4
100090c4:	4770      	bx	lr

100090c6 <__sfputs_r>:
100090c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100090c8:	4606      	mov	r6, r0
100090ca:	460f      	mov	r7, r1
100090cc:	4614      	mov	r4, r2
100090ce:	18d5      	adds	r5, r2, r3
100090d0:	42ac      	cmp	r4, r5
100090d2:	d101      	bne.n	100090d8 <__sfputs_r+0x12>
100090d4:	2000      	movs	r0, #0
100090d6:	e007      	b.n	100090e8 <__sfputs_r+0x22>
100090d8:	f814 1b01 	ldrb.w	r1, [r4], #1
100090dc:	463a      	mov	r2, r7
100090de:	4630      	mov	r0, r6
100090e0:	f7ff ffda 	bl	10009098 <__sfputc_r>
100090e4:	1c43      	adds	r3, r0, #1
100090e6:	d1f3      	bne.n	100090d0 <__sfputs_r+0xa>
100090e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100090ec <_vfiprintf_r>:
100090ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100090f0:	460d      	mov	r5, r1
100090f2:	b09d      	sub	sp, #116	; 0x74
100090f4:	4614      	mov	r4, r2
100090f6:	4698      	mov	r8, r3
100090f8:	4606      	mov	r6, r0
100090fa:	b118      	cbz	r0, 10009104 <_vfiprintf_r+0x18>
100090fc:	6983      	ldr	r3, [r0, #24]
100090fe:	b90b      	cbnz	r3, 10009104 <_vfiprintf_r+0x18>
10009100:	f000 fdd8 	bl	10009cb4 <__sinit>
10009104:	4b89      	ldr	r3, [pc, #548]	; (1000932c <_vfiprintf_r+0x240>)
10009106:	429d      	cmp	r5, r3
10009108:	d11b      	bne.n	10009142 <_vfiprintf_r+0x56>
1000910a:	6875      	ldr	r5, [r6, #4]
1000910c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000910e:	07d9      	lsls	r1, r3, #31
10009110:	d405      	bmi.n	1000911e <_vfiprintf_r+0x32>
10009112:	89ab      	ldrh	r3, [r5, #12]
10009114:	059a      	lsls	r2, r3, #22
10009116:	d402      	bmi.n	1000911e <_vfiprintf_r+0x32>
10009118:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000911a:	f000 fe69 	bl	10009df0 <__retarget_lock_acquire_recursive>
1000911e:	89ab      	ldrh	r3, [r5, #12]
10009120:	071b      	lsls	r3, r3, #28
10009122:	d501      	bpl.n	10009128 <_vfiprintf_r+0x3c>
10009124:	692b      	ldr	r3, [r5, #16]
10009126:	b9eb      	cbnz	r3, 10009164 <_vfiprintf_r+0x78>
10009128:	4629      	mov	r1, r5
1000912a:	4630      	mov	r0, r6
1000912c:	f000 fc2c 	bl	10009988 <__swsetup_r>
10009130:	b1c0      	cbz	r0, 10009164 <_vfiprintf_r+0x78>
10009132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
10009134:	07dc      	lsls	r4, r3, #31
10009136:	d50e      	bpl.n	10009156 <_vfiprintf_r+0x6a>
10009138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1000913c:	b01d      	add	sp, #116	; 0x74
1000913e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009142:	4b7b      	ldr	r3, [pc, #492]	; (10009330 <_vfiprintf_r+0x244>)
10009144:	429d      	cmp	r5, r3
10009146:	d101      	bne.n	1000914c <_vfiprintf_r+0x60>
10009148:	68b5      	ldr	r5, [r6, #8]
1000914a:	e7df      	b.n	1000910c <_vfiprintf_r+0x20>
1000914c:	4b79      	ldr	r3, [pc, #484]	; (10009334 <_vfiprintf_r+0x248>)
1000914e:	429d      	cmp	r5, r3
10009150:	bf08      	it	eq
10009152:	68f5      	ldreq	r5, [r6, #12]
10009154:	e7da      	b.n	1000910c <_vfiprintf_r+0x20>
10009156:	89ab      	ldrh	r3, [r5, #12]
10009158:	0598      	lsls	r0, r3, #22
1000915a:	d4ed      	bmi.n	10009138 <_vfiprintf_r+0x4c>
1000915c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000915e:	f000 fe48 	bl	10009df2 <__retarget_lock_release_recursive>
10009162:	e7e9      	b.n	10009138 <_vfiprintf_r+0x4c>
10009164:	2300      	movs	r3, #0
10009166:	9309      	str	r3, [sp, #36]	; 0x24
10009168:	2320      	movs	r3, #32
1000916a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1000916e:	f8cd 800c 	str.w	r8, [sp, #12]
10009172:	2330      	movs	r3, #48	; 0x30
10009174:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 10009338 <_vfiprintf_r+0x24c>
10009178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1000917c:	f04f 0901 	mov.w	r9, #1
10009180:	4623      	mov	r3, r4
10009182:	469a      	mov	sl, r3
10009184:	f813 2b01 	ldrb.w	r2, [r3], #1
10009188:	b10a      	cbz	r2, 1000918e <_vfiprintf_r+0xa2>
1000918a:	2a25      	cmp	r2, #37	; 0x25
1000918c:	d1f9      	bne.n	10009182 <_vfiprintf_r+0x96>
1000918e:	ebba 0b04 	subs.w	fp, sl, r4
10009192:	d00b      	beq.n	100091ac <_vfiprintf_r+0xc0>
10009194:	465b      	mov	r3, fp
10009196:	4622      	mov	r2, r4
10009198:	4629      	mov	r1, r5
1000919a:	4630      	mov	r0, r6
1000919c:	f7ff ff93 	bl	100090c6 <__sfputs_r>
100091a0:	3001      	adds	r0, #1
100091a2:	f000 80aa 	beq.w	100092fa <_vfiprintf_r+0x20e>
100091a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
100091a8:	445a      	add	r2, fp
100091aa:	9209      	str	r2, [sp, #36]	; 0x24
100091ac:	f89a 3000 	ldrb.w	r3, [sl]
100091b0:	2b00      	cmp	r3, #0
100091b2:	f000 80a2 	beq.w	100092fa <_vfiprintf_r+0x20e>
100091b6:	2300      	movs	r3, #0
100091b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
100091bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
100091c0:	f10a 0a01 	add.w	sl, sl, #1
100091c4:	9304      	str	r3, [sp, #16]
100091c6:	9307      	str	r3, [sp, #28]
100091c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
100091cc:	931a      	str	r3, [sp, #104]	; 0x68
100091ce:	4654      	mov	r4, sl
100091d0:	2205      	movs	r2, #5
100091d2:	f814 1b01 	ldrb.w	r1, [r4], #1
100091d6:	4858      	ldr	r0, [pc, #352]	; (10009338 <_vfiprintf_r+0x24c>)
100091d8:	f7f6 ff4a 	bl	10000070 <memchr>
100091dc:	9a04      	ldr	r2, [sp, #16]
100091de:	b9d8      	cbnz	r0, 10009218 <_vfiprintf_r+0x12c>
100091e0:	06d1      	lsls	r1, r2, #27
100091e2:	bf44      	itt	mi
100091e4:	2320      	movmi	r3, #32
100091e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
100091ea:	0713      	lsls	r3, r2, #28
100091ec:	bf44      	itt	mi
100091ee:	232b      	movmi	r3, #43	; 0x2b
100091f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
100091f4:	f89a 3000 	ldrb.w	r3, [sl]
100091f8:	2b2a      	cmp	r3, #42	; 0x2a
100091fa:	d015      	beq.n	10009228 <_vfiprintf_r+0x13c>
100091fc:	9a07      	ldr	r2, [sp, #28]
100091fe:	4654      	mov	r4, sl
10009200:	2000      	movs	r0, #0
10009202:	f04f 0c0a 	mov.w	ip, #10
10009206:	4621      	mov	r1, r4
10009208:	f811 3b01 	ldrb.w	r3, [r1], #1
1000920c:	3b30      	subs	r3, #48	; 0x30
1000920e:	2b09      	cmp	r3, #9
10009210:	d94e      	bls.n	100092b0 <_vfiprintf_r+0x1c4>
10009212:	b1b0      	cbz	r0, 10009242 <_vfiprintf_r+0x156>
10009214:	9207      	str	r2, [sp, #28]
10009216:	e014      	b.n	10009242 <_vfiprintf_r+0x156>
10009218:	eba0 0308 	sub.w	r3, r0, r8
1000921c:	fa09 f303 	lsl.w	r3, r9, r3
10009220:	4313      	orrs	r3, r2
10009222:	9304      	str	r3, [sp, #16]
10009224:	46a2      	mov	sl, r4
10009226:	e7d2      	b.n	100091ce <_vfiprintf_r+0xe2>
10009228:	9b03      	ldr	r3, [sp, #12]
1000922a:	1d19      	adds	r1, r3, #4
1000922c:	681b      	ldr	r3, [r3, #0]
1000922e:	9103      	str	r1, [sp, #12]
10009230:	2b00      	cmp	r3, #0
10009232:	bfbb      	ittet	lt
10009234:	425b      	neglt	r3, r3
10009236:	f042 0202 	orrlt.w	r2, r2, #2
1000923a:	9307      	strge	r3, [sp, #28]
1000923c:	9307      	strlt	r3, [sp, #28]
1000923e:	bfb8      	it	lt
10009240:	9204      	strlt	r2, [sp, #16]
10009242:	7823      	ldrb	r3, [r4, #0]
10009244:	2b2e      	cmp	r3, #46	; 0x2e
10009246:	d10c      	bne.n	10009262 <_vfiprintf_r+0x176>
10009248:	7863      	ldrb	r3, [r4, #1]
1000924a:	2b2a      	cmp	r3, #42	; 0x2a
1000924c:	d135      	bne.n	100092ba <_vfiprintf_r+0x1ce>
1000924e:	9b03      	ldr	r3, [sp, #12]
10009250:	1d1a      	adds	r2, r3, #4
10009252:	681b      	ldr	r3, [r3, #0]
10009254:	9203      	str	r2, [sp, #12]
10009256:	2b00      	cmp	r3, #0
10009258:	bfb8      	it	lt
1000925a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1000925e:	3402      	adds	r4, #2
10009260:	9305      	str	r3, [sp, #20]
10009262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 10009348 <_vfiprintf_r+0x25c>
10009266:	7821      	ldrb	r1, [r4, #0]
10009268:	2203      	movs	r2, #3
1000926a:	4650      	mov	r0, sl
1000926c:	f7f6 ff00 	bl	10000070 <memchr>
10009270:	b140      	cbz	r0, 10009284 <_vfiprintf_r+0x198>
10009272:	2340      	movs	r3, #64	; 0x40
10009274:	eba0 000a 	sub.w	r0, r0, sl
10009278:	fa03 f000 	lsl.w	r0, r3, r0
1000927c:	9b04      	ldr	r3, [sp, #16]
1000927e:	4303      	orrs	r3, r0
10009280:	3401      	adds	r4, #1
10009282:	9304      	str	r3, [sp, #16]
10009284:	f814 1b01 	ldrb.w	r1, [r4], #1
10009288:	482c      	ldr	r0, [pc, #176]	; (1000933c <_vfiprintf_r+0x250>)
1000928a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1000928e:	2206      	movs	r2, #6
10009290:	f7f6 feee 	bl	10000070 <memchr>
10009294:	2800      	cmp	r0, #0
10009296:	d03f      	beq.n	10009318 <_vfiprintf_r+0x22c>
10009298:	4b29      	ldr	r3, [pc, #164]	; (10009340 <_vfiprintf_r+0x254>)
1000929a:	bb1b      	cbnz	r3, 100092e4 <_vfiprintf_r+0x1f8>
1000929c:	9b03      	ldr	r3, [sp, #12]
1000929e:	3307      	adds	r3, #7
100092a0:	f023 0307 	bic.w	r3, r3, #7
100092a4:	3308      	adds	r3, #8
100092a6:	9303      	str	r3, [sp, #12]
100092a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100092aa:	443b      	add	r3, r7
100092ac:	9309      	str	r3, [sp, #36]	; 0x24
100092ae:	e767      	b.n	10009180 <_vfiprintf_r+0x94>
100092b0:	fb0c 3202 	mla	r2, ip, r2, r3
100092b4:	460c      	mov	r4, r1
100092b6:	2001      	movs	r0, #1
100092b8:	e7a5      	b.n	10009206 <_vfiprintf_r+0x11a>
100092ba:	2300      	movs	r3, #0
100092bc:	3401      	adds	r4, #1
100092be:	9305      	str	r3, [sp, #20]
100092c0:	4619      	mov	r1, r3
100092c2:	f04f 0c0a 	mov.w	ip, #10
100092c6:	4620      	mov	r0, r4
100092c8:	f810 2b01 	ldrb.w	r2, [r0], #1
100092cc:	3a30      	subs	r2, #48	; 0x30
100092ce:	2a09      	cmp	r2, #9
100092d0:	d903      	bls.n	100092da <_vfiprintf_r+0x1ee>
100092d2:	2b00      	cmp	r3, #0
100092d4:	d0c5      	beq.n	10009262 <_vfiprintf_r+0x176>
100092d6:	9105      	str	r1, [sp, #20]
100092d8:	e7c3      	b.n	10009262 <_vfiprintf_r+0x176>
100092da:	fb0c 2101 	mla	r1, ip, r1, r2
100092de:	4604      	mov	r4, r0
100092e0:	2301      	movs	r3, #1
100092e2:	e7f0      	b.n	100092c6 <_vfiprintf_r+0x1da>
100092e4:	ab03      	add	r3, sp, #12
100092e6:	9300      	str	r3, [sp, #0]
100092e8:	462a      	mov	r2, r5
100092ea:	4b16      	ldr	r3, [pc, #88]	; (10009344 <_vfiprintf_r+0x258>)
100092ec:	a904      	add	r1, sp, #16
100092ee:	4630      	mov	r0, r6
100092f0:	f3af 8000 	nop.w
100092f4:	4607      	mov	r7, r0
100092f6:	1c78      	adds	r0, r7, #1
100092f8:	d1d6      	bne.n	100092a8 <_vfiprintf_r+0x1bc>
100092fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
100092fc:	07d9      	lsls	r1, r3, #31
100092fe:	d405      	bmi.n	1000930c <_vfiprintf_r+0x220>
10009300:	89ab      	ldrh	r3, [r5, #12]
10009302:	059a      	lsls	r2, r3, #22
10009304:	d402      	bmi.n	1000930c <_vfiprintf_r+0x220>
10009306:	6da8      	ldr	r0, [r5, #88]	; 0x58
10009308:	f000 fd73 	bl	10009df2 <__retarget_lock_release_recursive>
1000930c:	89ab      	ldrh	r3, [r5, #12]
1000930e:	065b      	lsls	r3, r3, #25
10009310:	f53f af12 	bmi.w	10009138 <_vfiprintf_r+0x4c>
10009314:	9809      	ldr	r0, [sp, #36]	; 0x24
10009316:	e711      	b.n	1000913c <_vfiprintf_r+0x50>
10009318:	ab03      	add	r3, sp, #12
1000931a:	9300      	str	r3, [sp, #0]
1000931c:	462a      	mov	r2, r5
1000931e:	4b09      	ldr	r3, [pc, #36]	; (10009344 <_vfiprintf_r+0x258>)
10009320:	a904      	add	r1, sp, #16
10009322:	4630      	mov	r0, r6
10009324:	f000 f880 	bl	10009428 <_printf_i>
10009328:	e7e4      	b.n	100092f4 <_vfiprintf_r+0x208>
1000932a:	bf00      	nop
1000932c:	1000ad60 	.word	0x1000ad60
10009330:	1000ad80 	.word	0x1000ad80
10009334:	1000ad40 	.word	0x1000ad40
10009338:	1000ab98 	.word	0x1000ab98
1000933c:	1000aba2 	.word	0x1000aba2
10009340:	00000000 	.word	0x00000000
10009344:	100090c7 	.word	0x100090c7
10009348:	1000ab9e 	.word	0x1000ab9e

1000934c <_printf_common>:
1000934c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10009350:	4616      	mov	r6, r2
10009352:	4699      	mov	r9, r3
10009354:	688a      	ldr	r2, [r1, #8]
10009356:	690b      	ldr	r3, [r1, #16]
10009358:	f8dd 8020 	ldr.w	r8, [sp, #32]
1000935c:	4293      	cmp	r3, r2
1000935e:	bfb8      	it	lt
10009360:	4613      	movlt	r3, r2
10009362:	6033      	str	r3, [r6, #0]
10009364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
10009368:	4607      	mov	r7, r0
1000936a:	460c      	mov	r4, r1
1000936c:	b10a      	cbz	r2, 10009372 <_printf_common+0x26>
1000936e:	3301      	adds	r3, #1
10009370:	6033      	str	r3, [r6, #0]
10009372:	6823      	ldr	r3, [r4, #0]
10009374:	0699      	lsls	r1, r3, #26
10009376:	bf42      	ittt	mi
10009378:	6833      	ldrmi	r3, [r6, #0]
1000937a:	3302      	addmi	r3, #2
1000937c:	6033      	strmi	r3, [r6, #0]
1000937e:	6825      	ldr	r5, [r4, #0]
10009380:	f015 0506 	ands.w	r5, r5, #6
10009384:	d106      	bne.n	10009394 <_printf_common+0x48>
10009386:	f104 0a19 	add.w	sl, r4, #25
1000938a:	68e3      	ldr	r3, [r4, #12]
1000938c:	6832      	ldr	r2, [r6, #0]
1000938e:	1a9b      	subs	r3, r3, r2
10009390:	42ab      	cmp	r3, r5
10009392:	dc26      	bgt.n	100093e2 <_printf_common+0x96>
10009394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
10009398:	1e13      	subs	r3, r2, #0
1000939a:	6822      	ldr	r2, [r4, #0]
1000939c:	bf18      	it	ne
1000939e:	2301      	movne	r3, #1
100093a0:	0692      	lsls	r2, r2, #26
100093a2:	d42b      	bmi.n	100093fc <_printf_common+0xb0>
100093a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
100093a8:	4649      	mov	r1, r9
100093aa:	4638      	mov	r0, r7
100093ac:	47c0      	blx	r8
100093ae:	3001      	adds	r0, #1
100093b0:	d01e      	beq.n	100093f0 <_printf_common+0xa4>
100093b2:	6823      	ldr	r3, [r4, #0]
100093b4:	68e5      	ldr	r5, [r4, #12]
100093b6:	6832      	ldr	r2, [r6, #0]
100093b8:	f003 0306 	and.w	r3, r3, #6
100093bc:	2b04      	cmp	r3, #4
100093be:	bf08      	it	eq
100093c0:	1aad      	subeq	r5, r5, r2
100093c2:	68a3      	ldr	r3, [r4, #8]
100093c4:	6922      	ldr	r2, [r4, #16]
100093c6:	bf0c      	ite	eq
100093c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
100093cc:	2500      	movne	r5, #0
100093ce:	4293      	cmp	r3, r2
100093d0:	bfc4      	itt	gt
100093d2:	1a9b      	subgt	r3, r3, r2
100093d4:	18ed      	addgt	r5, r5, r3
100093d6:	2600      	movs	r6, #0
100093d8:	341a      	adds	r4, #26
100093da:	42b5      	cmp	r5, r6
100093dc:	d11a      	bne.n	10009414 <_printf_common+0xc8>
100093de:	2000      	movs	r0, #0
100093e0:	e008      	b.n	100093f4 <_printf_common+0xa8>
100093e2:	2301      	movs	r3, #1
100093e4:	4652      	mov	r2, sl
100093e6:	4649      	mov	r1, r9
100093e8:	4638      	mov	r0, r7
100093ea:	47c0      	blx	r8
100093ec:	3001      	adds	r0, #1
100093ee:	d103      	bne.n	100093f8 <_printf_common+0xac>
100093f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100093f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100093f8:	3501      	adds	r5, #1
100093fa:	e7c6      	b.n	1000938a <_printf_common+0x3e>
100093fc:	18e1      	adds	r1, r4, r3
100093fe:	1c5a      	adds	r2, r3, #1
10009400:	2030      	movs	r0, #48	; 0x30
10009402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
10009406:	4422      	add	r2, r4
10009408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1000940c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
10009410:	3302      	adds	r3, #2
10009412:	e7c7      	b.n	100093a4 <_printf_common+0x58>
10009414:	2301      	movs	r3, #1
10009416:	4622      	mov	r2, r4
10009418:	4649      	mov	r1, r9
1000941a:	4638      	mov	r0, r7
1000941c:	47c0      	blx	r8
1000941e:	3001      	adds	r0, #1
10009420:	d0e6      	beq.n	100093f0 <_printf_common+0xa4>
10009422:	3601      	adds	r6, #1
10009424:	e7d9      	b.n	100093da <_printf_common+0x8e>
	...

10009428 <_printf_i>:
10009428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000942c:	7e0f      	ldrb	r7, [r1, #24]
1000942e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
10009430:	2f78      	cmp	r7, #120	; 0x78
10009432:	4691      	mov	r9, r2
10009434:	4680      	mov	r8, r0
10009436:	460c      	mov	r4, r1
10009438:	469a      	mov	sl, r3
1000943a:	f101 0243 	add.w	r2, r1, #67	; 0x43
1000943e:	d807      	bhi.n	10009450 <_printf_i+0x28>
10009440:	2f62      	cmp	r7, #98	; 0x62
10009442:	d80a      	bhi.n	1000945a <_printf_i+0x32>
10009444:	2f00      	cmp	r7, #0
10009446:	f000 80d8 	beq.w	100095fa <_printf_i+0x1d2>
1000944a:	2f58      	cmp	r7, #88	; 0x58
1000944c:	f000 80a3 	beq.w	10009596 <_printf_i+0x16e>
10009450:	f104 0542 	add.w	r5, r4, #66	; 0x42
10009454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
10009458:	e03a      	b.n	100094d0 <_printf_i+0xa8>
1000945a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
1000945e:	2b15      	cmp	r3, #21
10009460:	d8f6      	bhi.n	10009450 <_printf_i+0x28>
10009462:	a101      	add	r1, pc, #4	; (adr r1, 10009468 <_printf_i+0x40>)
10009464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
10009468:	100094c1 	.word	0x100094c1
1000946c:	100094d5 	.word	0x100094d5
10009470:	10009451 	.word	0x10009451
10009474:	10009451 	.word	0x10009451
10009478:	10009451 	.word	0x10009451
1000947c:	10009451 	.word	0x10009451
10009480:	100094d5 	.word	0x100094d5
10009484:	10009451 	.word	0x10009451
10009488:	10009451 	.word	0x10009451
1000948c:	10009451 	.word	0x10009451
10009490:	10009451 	.word	0x10009451
10009494:	100095e1 	.word	0x100095e1
10009498:	10009505 	.word	0x10009505
1000949c:	100095c3 	.word	0x100095c3
100094a0:	10009451 	.word	0x10009451
100094a4:	10009451 	.word	0x10009451
100094a8:	10009603 	.word	0x10009603
100094ac:	10009451 	.word	0x10009451
100094b0:	10009505 	.word	0x10009505
100094b4:	10009451 	.word	0x10009451
100094b8:	10009451 	.word	0x10009451
100094bc:	100095cb 	.word	0x100095cb
100094c0:	682b      	ldr	r3, [r5, #0]
100094c2:	1d1a      	adds	r2, r3, #4
100094c4:	681b      	ldr	r3, [r3, #0]
100094c6:	602a      	str	r2, [r5, #0]
100094c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
100094cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
100094d0:	2301      	movs	r3, #1
100094d2:	e0a3      	b.n	1000961c <_printf_i+0x1f4>
100094d4:	6820      	ldr	r0, [r4, #0]
100094d6:	6829      	ldr	r1, [r5, #0]
100094d8:	0606      	lsls	r6, r0, #24
100094da:	f101 0304 	add.w	r3, r1, #4
100094de:	d50a      	bpl.n	100094f6 <_printf_i+0xce>
100094e0:	680e      	ldr	r6, [r1, #0]
100094e2:	602b      	str	r3, [r5, #0]
100094e4:	2e00      	cmp	r6, #0
100094e6:	da03      	bge.n	100094f0 <_printf_i+0xc8>
100094e8:	232d      	movs	r3, #45	; 0x2d
100094ea:	4276      	negs	r6, r6
100094ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
100094f0:	485e      	ldr	r0, [pc, #376]	; (1000966c <_printf_i+0x244>)
100094f2:	230a      	movs	r3, #10
100094f4:	e019      	b.n	1000952a <_printf_i+0x102>
100094f6:	680e      	ldr	r6, [r1, #0]
100094f8:	602b      	str	r3, [r5, #0]
100094fa:	f010 0f40 	tst.w	r0, #64	; 0x40
100094fe:	bf18      	it	ne
10009500:	b236      	sxthne	r6, r6
10009502:	e7ef      	b.n	100094e4 <_printf_i+0xbc>
10009504:	682b      	ldr	r3, [r5, #0]
10009506:	6820      	ldr	r0, [r4, #0]
10009508:	1d19      	adds	r1, r3, #4
1000950a:	6029      	str	r1, [r5, #0]
1000950c:	0601      	lsls	r1, r0, #24
1000950e:	d501      	bpl.n	10009514 <_printf_i+0xec>
10009510:	681e      	ldr	r6, [r3, #0]
10009512:	e002      	b.n	1000951a <_printf_i+0xf2>
10009514:	0646      	lsls	r6, r0, #25
10009516:	d5fb      	bpl.n	10009510 <_printf_i+0xe8>
10009518:	881e      	ldrh	r6, [r3, #0]
1000951a:	4854      	ldr	r0, [pc, #336]	; (1000966c <_printf_i+0x244>)
1000951c:	2f6f      	cmp	r7, #111	; 0x6f
1000951e:	bf0c      	ite	eq
10009520:	2308      	moveq	r3, #8
10009522:	230a      	movne	r3, #10
10009524:	2100      	movs	r1, #0
10009526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1000952a:	6865      	ldr	r5, [r4, #4]
1000952c:	60a5      	str	r5, [r4, #8]
1000952e:	2d00      	cmp	r5, #0
10009530:	bfa2      	ittt	ge
10009532:	6821      	ldrge	r1, [r4, #0]
10009534:	f021 0104 	bicge.w	r1, r1, #4
10009538:	6021      	strge	r1, [r4, #0]
1000953a:	b90e      	cbnz	r6, 10009540 <_printf_i+0x118>
1000953c:	2d00      	cmp	r5, #0
1000953e:	d04d      	beq.n	100095dc <_printf_i+0x1b4>
10009540:	4615      	mov	r5, r2
10009542:	fbb6 f1f3 	udiv	r1, r6, r3
10009546:	fb03 6711 	mls	r7, r3, r1, r6
1000954a:	5dc7      	ldrb	r7, [r0, r7]
1000954c:	f805 7d01 	strb.w	r7, [r5, #-1]!
10009550:	4637      	mov	r7, r6
10009552:	42bb      	cmp	r3, r7
10009554:	460e      	mov	r6, r1
10009556:	d9f4      	bls.n	10009542 <_printf_i+0x11a>
10009558:	2b08      	cmp	r3, #8
1000955a:	d10b      	bne.n	10009574 <_printf_i+0x14c>
1000955c:	6823      	ldr	r3, [r4, #0]
1000955e:	07de      	lsls	r6, r3, #31
10009560:	d508      	bpl.n	10009574 <_printf_i+0x14c>
10009562:	6923      	ldr	r3, [r4, #16]
10009564:	6861      	ldr	r1, [r4, #4]
10009566:	4299      	cmp	r1, r3
10009568:	bfde      	ittt	le
1000956a:	2330      	movle	r3, #48	; 0x30
1000956c:	f805 3c01 	strble.w	r3, [r5, #-1]
10009570:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
10009574:	1b52      	subs	r2, r2, r5
10009576:	6122      	str	r2, [r4, #16]
10009578:	f8cd a000 	str.w	sl, [sp]
1000957c:	464b      	mov	r3, r9
1000957e:	aa03      	add	r2, sp, #12
10009580:	4621      	mov	r1, r4
10009582:	4640      	mov	r0, r8
10009584:	f7ff fee2 	bl	1000934c <_printf_common>
10009588:	3001      	adds	r0, #1
1000958a:	d14c      	bne.n	10009626 <_printf_i+0x1fe>
1000958c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10009590:	b004      	add	sp, #16
10009592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10009596:	4835      	ldr	r0, [pc, #212]	; (1000966c <_printf_i+0x244>)
10009598:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
1000959c:	6829      	ldr	r1, [r5, #0]
1000959e:	6823      	ldr	r3, [r4, #0]
100095a0:	f851 6b04 	ldr.w	r6, [r1], #4
100095a4:	6029      	str	r1, [r5, #0]
100095a6:	061d      	lsls	r5, r3, #24
100095a8:	d514      	bpl.n	100095d4 <_printf_i+0x1ac>
100095aa:	07df      	lsls	r7, r3, #31
100095ac:	bf44      	itt	mi
100095ae:	f043 0320 	orrmi.w	r3, r3, #32
100095b2:	6023      	strmi	r3, [r4, #0]
100095b4:	b91e      	cbnz	r6, 100095be <_printf_i+0x196>
100095b6:	6823      	ldr	r3, [r4, #0]
100095b8:	f023 0320 	bic.w	r3, r3, #32
100095bc:	6023      	str	r3, [r4, #0]
100095be:	2310      	movs	r3, #16
100095c0:	e7b0      	b.n	10009524 <_printf_i+0xfc>
100095c2:	6823      	ldr	r3, [r4, #0]
100095c4:	f043 0320 	orr.w	r3, r3, #32
100095c8:	6023      	str	r3, [r4, #0]
100095ca:	2378      	movs	r3, #120	; 0x78
100095cc:	4828      	ldr	r0, [pc, #160]	; (10009670 <_printf_i+0x248>)
100095ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
100095d2:	e7e3      	b.n	1000959c <_printf_i+0x174>
100095d4:	0659      	lsls	r1, r3, #25
100095d6:	bf48      	it	mi
100095d8:	b2b6      	uxthmi	r6, r6
100095da:	e7e6      	b.n	100095aa <_printf_i+0x182>
100095dc:	4615      	mov	r5, r2
100095de:	e7bb      	b.n	10009558 <_printf_i+0x130>
100095e0:	682b      	ldr	r3, [r5, #0]
100095e2:	6826      	ldr	r6, [r4, #0]
100095e4:	6961      	ldr	r1, [r4, #20]
100095e6:	1d18      	adds	r0, r3, #4
100095e8:	6028      	str	r0, [r5, #0]
100095ea:	0635      	lsls	r5, r6, #24
100095ec:	681b      	ldr	r3, [r3, #0]
100095ee:	d501      	bpl.n	100095f4 <_printf_i+0x1cc>
100095f0:	6019      	str	r1, [r3, #0]
100095f2:	e002      	b.n	100095fa <_printf_i+0x1d2>
100095f4:	0670      	lsls	r0, r6, #25
100095f6:	d5fb      	bpl.n	100095f0 <_printf_i+0x1c8>
100095f8:	8019      	strh	r1, [r3, #0]
100095fa:	2300      	movs	r3, #0
100095fc:	6123      	str	r3, [r4, #16]
100095fe:	4615      	mov	r5, r2
10009600:	e7ba      	b.n	10009578 <_printf_i+0x150>
10009602:	682b      	ldr	r3, [r5, #0]
10009604:	1d1a      	adds	r2, r3, #4
10009606:	602a      	str	r2, [r5, #0]
10009608:	681d      	ldr	r5, [r3, #0]
1000960a:	6862      	ldr	r2, [r4, #4]
1000960c:	2100      	movs	r1, #0
1000960e:	4628      	mov	r0, r5
10009610:	f7f6 fd2e 	bl	10000070 <memchr>
10009614:	b108      	cbz	r0, 1000961a <_printf_i+0x1f2>
10009616:	1b40      	subs	r0, r0, r5
10009618:	6060      	str	r0, [r4, #4]
1000961a:	6863      	ldr	r3, [r4, #4]
1000961c:	6123      	str	r3, [r4, #16]
1000961e:	2300      	movs	r3, #0
10009620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
10009624:	e7a8      	b.n	10009578 <_printf_i+0x150>
10009626:	6923      	ldr	r3, [r4, #16]
10009628:	462a      	mov	r2, r5
1000962a:	4649      	mov	r1, r9
1000962c:	4640      	mov	r0, r8
1000962e:	47d0      	blx	sl
10009630:	3001      	adds	r0, #1
10009632:	d0ab      	beq.n	1000958c <_printf_i+0x164>
10009634:	6823      	ldr	r3, [r4, #0]
10009636:	079b      	lsls	r3, r3, #30
10009638:	d413      	bmi.n	10009662 <_printf_i+0x23a>
1000963a:	68e0      	ldr	r0, [r4, #12]
1000963c:	9b03      	ldr	r3, [sp, #12]
1000963e:	4298      	cmp	r0, r3
10009640:	bfb8      	it	lt
10009642:	4618      	movlt	r0, r3
10009644:	e7a4      	b.n	10009590 <_printf_i+0x168>
10009646:	2301      	movs	r3, #1
10009648:	4632      	mov	r2, r6
1000964a:	4649      	mov	r1, r9
1000964c:	4640      	mov	r0, r8
1000964e:	47d0      	blx	sl
10009650:	3001      	adds	r0, #1
10009652:	d09b      	beq.n	1000958c <_printf_i+0x164>
10009654:	3501      	adds	r5, #1
10009656:	68e3      	ldr	r3, [r4, #12]
10009658:	9903      	ldr	r1, [sp, #12]
1000965a:	1a5b      	subs	r3, r3, r1
1000965c:	42ab      	cmp	r3, r5
1000965e:	dcf2      	bgt.n	10009646 <_printf_i+0x21e>
10009660:	e7eb      	b.n	1000963a <_printf_i+0x212>
10009662:	2500      	movs	r5, #0
10009664:	f104 0619 	add.w	r6, r4, #25
10009668:	e7f5      	b.n	10009656 <_printf_i+0x22e>
1000966a:	bf00      	nop
1000966c:	1000aba9 	.word	0x1000aba9
10009670:	1000abba 	.word	0x1000abba

10009674 <iprintf>:
10009674:	b40f      	push	{r0, r1, r2, r3}
10009676:	4b0a      	ldr	r3, [pc, #40]	; (100096a0 <iprintf+0x2c>)
10009678:	b513      	push	{r0, r1, r4, lr}
1000967a:	681c      	ldr	r4, [r3, #0]
1000967c:	b124      	cbz	r4, 10009688 <iprintf+0x14>
1000967e:	69a3      	ldr	r3, [r4, #24]
10009680:	b913      	cbnz	r3, 10009688 <iprintf+0x14>
10009682:	4620      	mov	r0, r4
10009684:	f000 fb16 	bl	10009cb4 <__sinit>
10009688:	ab05      	add	r3, sp, #20
1000968a:	9a04      	ldr	r2, [sp, #16]
1000968c:	68a1      	ldr	r1, [r4, #8]
1000968e:	9301      	str	r3, [sp, #4]
10009690:	4620      	mov	r0, r4
10009692:	f7ff fd2b 	bl	100090ec <_vfiprintf_r>
10009696:	b002      	add	sp, #8
10009698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000969c:	b004      	add	sp, #16
1000969e:	4770      	bx	lr
100096a0:	10020428 	.word	0x10020428

100096a4 <_sbrk_r>:
100096a4:	b538      	push	{r3, r4, r5, lr}
100096a6:	4d06      	ldr	r5, [pc, #24]	; (100096c0 <_sbrk_r+0x1c>)
100096a8:	2300      	movs	r3, #0
100096aa:	4604      	mov	r4, r0
100096ac:	4608      	mov	r0, r1
100096ae:	602b      	str	r3, [r5, #0]
100096b0:	f7f6 fd30 	bl	10000114 <_sbrk>
100096b4:	1c43      	adds	r3, r0, #1
100096b6:	d102      	bne.n	100096be <_sbrk_r+0x1a>
100096b8:	682b      	ldr	r3, [r5, #0]
100096ba:	b103      	cbz	r3, 100096be <_sbrk_r+0x1a>
100096bc:	6023      	str	r3, [r4, #0]
100096be:	bd38      	pop	{r3, r4, r5, pc}
100096c0:	1002137c 	.word	0x1002137c

100096c4 <strncmp>:
100096c4:	b510      	push	{r4, lr}
100096c6:	b17a      	cbz	r2, 100096e8 <strncmp+0x24>
100096c8:	4603      	mov	r3, r0
100096ca:	3901      	subs	r1, #1
100096cc:	1884      	adds	r4, r0, r2
100096ce:	f813 0b01 	ldrb.w	r0, [r3], #1
100096d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
100096d6:	4290      	cmp	r0, r2
100096d8:	d101      	bne.n	100096de <strncmp+0x1a>
100096da:	42a3      	cmp	r3, r4
100096dc:	d101      	bne.n	100096e2 <strncmp+0x1e>
100096de:	1a80      	subs	r0, r0, r2
100096e0:	bd10      	pop	{r4, pc}
100096e2:	2800      	cmp	r0, #0
100096e4:	d1f3      	bne.n	100096ce <strncmp+0xa>
100096e6:	e7fa      	b.n	100096de <strncmp+0x1a>
100096e8:	4610      	mov	r0, r2
100096ea:	e7f9      	b.n	100096e0 <strncmp+0x1c>

100096ec <strncpy>:
100096ec:	b510      	push	{r4, lr}
100096ee:	3901      	subs	r1, #1
100096f0:	4603      	mov	r3, r0
100096f2:	b132      	cbz	r2, 10009702 <strncpy+0x16>
100096f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
100096f8:	f803 4b01 	strb.w	r4, [r3], #1
100096fc:	3a01      	subs	r2, #1
100096fe:	2c00      	cmp	r4, #0
10009700:	d1f7      	bne.n	100096f2 <strncpy+0x6>
10009702:	441a      	add	r2, r3
10009704:	2100      	movs	r1, #0
10009706:	4293      	cmp	r3, r2
10009708:	d100      	bne.n	1000970c <strncpy+0x20>
1000970a:	bd10      	pop	{r4, pc}
1000970c:	f803 1b01 	strb.w	r1, [r3], #1
10009710:	e7f9      	b.n	10009706 <strncpy+0x1a>
	...

10009714 <strtok>:
10009714:	4b16      	ldr	r3, [pc, #88]	; (10009770 <strtok+0x5c>)
10009716:	b573      	push	{r0, r1, r4, r5, r6, lr}
10009718:	681e      	ldr	r6, [r3, #0]
1000971a:	6db4      	ldr	r4, [r6, #88]	; 0x58
1000971c:	4605      	mov	r5, r0
1000971e:	b9fc      	cbnz	r4, 10009760 <strtok+0x4c>
10009720:	2050      	movs	r0, #80	; 0x50
10009722:	9101      	str	r1, [sp, #4]
10009724:	f7ff fbb2 	bl	10008e8c <malloc>
10009728:	9901      	ldr	r1, [sp, #4]
1000972a:	65b0      	str	r0, [r6, #88]	; 0x58
1000972c:	4602      	mov	r2, r0
1000972e:	b920      	cbnz	r0, 1000973a <strtok+0x26>
10009730:	4b10      	ldr	r3, [pc, #64]	; (10009774 <strtok+0x60>)
10009732:	4811      	ldr	r0, [pc, #68]	; (10009778 <strtok+0x64>)
10009734:	2157      	movs	r1, #87	; 0x57
10009736:	f7ff fb51 	bl	10008ddc <__assert_func>
1000973a:	e9c0 4400 	strd	r4, r4, [r0]
1000973e:	e9c0 4402 	strd	r4, r4, [r0, #8]
10009742:	e9c0 4404 	strd	r4, r4, [r0, #16]
10009746:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
1000974a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
1000974e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
10009752:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
10009756:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
1000975a:	6184      	str	r4, [r0, #24]
1000975c:	7704      	strb	r4, [r0, #28]
1000975e:	6244      	str	r4, [r0, #36]	; 0x24
10009760:	6db2      	ldr	r2, [r6, #88]	; 0x58
10009762:	2301      	movs	r3, #1
10009764:	4628      	mov	r0, r5
10009766:	b002      	add	sp, #8
10009768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
1000976c:	f000 b806 	b.w	1000977c <__strtok_r>
10009770:	10020428 	.word	0x10020428
10009774:	1000abcb 	.word	0x1000abcb
10009778:	1000abe2 	.word	0x1000abe2

1000977c <__strtok_r>:
1000977c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000977e:	b908      	cbnz	r0, 10009784 <__strtok_r+0x8>
10009780:	6810      	ldr	r0, [r2, #0]
10009782:	b188      	cbz	r0, 100097a8 <__strtok_r+0x2c>
10009784:	4604      	mov	r4, r0
10009786:	4620      	mov	r0, r4
10009788:	f814 5b01 	ldrb.w	r5, [r4], #1
1000978c:	460f      	mov	r7, r1
1000978e:	f817 6b01 	ldrb.w	r6, [r7], #1
10009792:	b91e      	cbnz	r6, 1000979c <__strtok_r+0x20>
10009794:	b965      	cbnz	r5, 100097b0 <__strtok_r+0x34>
10009796:	6015      	str	r5, [r2, #0]
10009798:	4628      	mov	r0, r5
1000979a:	e005      	b.n	100097a8 <__strtok_r+0x2c>
1000979c:	42b5      	cmp	r5, r6
1000979e:	d1f6      	bne.n	1000978e <__strtok_r+0x12>
100097a0:	2b00      	cmp	r3, #0
100097a2:	d1f0      	bne.n	10009786 <__strtok_r+0xa>
100097a4:	6014      	str	r4, [r2, #0]
100097a6:	7003      	strb	r3, [r0, #0]
100097a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100097aa:	461c      	mov	r4, r3
100097ac:	e00c      	b.n	100097c8 <__strtok_r+0x4c>
100097ae:	b915      	cbnz	r5, 100097b6 <__strtok_r+0x3a>
100097b0:	f814 3b01 	ldrb.w	r3, [r4], #1
100097b4:	460e      	mov	r6, r1
100097b6:	f816 5b01 	ldrb.w	r5, [r6], #1
100097ba:	42ab      	cmp	r3, r5
100097bc:	d1f7      	bne.n	100097ae <__strtok_r+0x32>
100097be:	2b00      	cmp	r3, #0
100097c0:	d0f3      	beq.n	100097aa <__strtok_r+0x2e>
100097c2:	2300      	movs	r3, #0
100097c4:	f804 3c01 	strb.w	r3, [r4, #-1]
100097c8:	6014      	str	r4, [r2, #0]
100097ca:	e7ed      	b.n	100097a8 <__strtok_r+0x2c>

100097cc <_strtol_l.constprop.0>:
100097cc:	2b01      	cmp	r3, #1
100097ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
100097d2:	d001      	beq.n	100097d8 <_strtol_l.constprop.0+0xc>
100097d4:	2b24      	cmp	r3, #36	; 0x24
100097d6:	d906      	bls.n	100097e6 <_strtol_l.constprop.0+0x1a>
100097d8:	f000 f94c 	bl	10009a74 <__errno>
100097dc:	2316      	movs	r3, #22
100097de:	6003      	str	r3, [r0, #0]
100097e0:	2000      	movs	r0, #0
100097e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100097e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 100098cc <_strtol_l.constprop.0+0x100>
100097ea:	460d      	mov	r5, r1
100097ec:	462e      	mov	r6, r5
100097ee:	f815 4b01 	ldrb.w	r4, [r5], #1
100097f2:	f814 700c 	ldrb.w	r7, [r4, ip]
100097f6:	f017 0708 	ands.w	r7, r7, #8
100097fa:	d1f7      	bne.n	100097ec <_strtol_l.constprop.0+0x20>
100097fc:	2c2d      	cmp	r4, #45	; 0x2d
100097fe:	d132      	bne.n	10009866 <_strtol_l.constprop.0+0x9a>
10009800:	782c      	ldrb	r4, [r5, #0]
10009802:	2701      	movs	r7, #1
10009804:	1cb5      	adds	r5, r6, #2
10009806:	2b00      	cmp	r3, #0
10009808:	d05b      	beq.n	100098c2 <_strtol_l.constprop.0+0xf6>
1000980a:	2b10      	cmp	r3, #16
1000980c:	d109      	bne.n	10009822 <_strtol_l.constprop.0+0x56>
1000980e:	2c30      	cmp	r4, #48	; 0x30
10009810:	d107      	bne.n	10009822 <_strtol_l.constprop.0+0x56>
10009812:	782c      	ldrb	r4, [r5, #0]
10009814:	f004 04df 	and.w	r4, r4, #223	; 0xdf
10009818:	2c58      	cmp	r4, #88	; 0x58
1000981a:	d14d      	bne.n	100098b8 <_strtol_l.constprop.0+0xec>
1000981c:	786c      	ldrb	r4, [r5, #1]
1000981e:	2310      	movs	r3, #16
10009820:	3502      	adds	r5, #2
10009822:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
10009826:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1000982a:	f04f 0c00 	mov.w	ip, #0
1000982e:	fbb8 f9f3 	udiv	r9, r8, r3
10009832:	4666      	mov	r6, ip
10009834:	fb03 8a19 	mls	sl, r3, r9, r8
10009838:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
1000983c:	f1be 0f09 	cmp.w	lr, #9
10009840:	d816      	bhi.n	10009870 <_strtol_l.constprop.0+0xa4>
10009842:	4674      	mov	r4, lr
10009844:	42a3      	cmp	r3, r4
10009846:	dd24      	ble.n	10009892 <_strtol_l.constprop.0+0xc6>
10009848:	f1bc 0f00 	cmp.w	ip, #0
1000984c:	db1e      	blt.n	1000988c <_strtol_l.constprop.0+0xc0>
1000984e:	45b1      	cmp	r9, r6
10009850:	d31c      	bcc.n	1000988c <_strtol_l.constprop.0+0xc0>
10009852:	d101      	bne.n	10009858 <_strtol_l.constprop.0+0x8c>
10009854:	45a2      	cmp	sl, r4
10009856:	db19      	blt.n	1000988c <_strtol_l.constprop.0+0xc0>
10009858:	fb06 4603 	mla	r6, r6, r3, r4
1000985c:	f04f 0c01 	mov.w	ip, #1
10009860:	f815 4b01 	ldrb.w	r4, [r5], #1
10009864:	e7e8      	b.n	10009838 <_strtol_l.constprop.0+0x6c>
10009866:	2c2b      	cmp	r4, #43	; 0x2b
10009868:	bf04      	itt	eq
1000986a:	782c      	ldrbeq	r4, [r5, #0]
1000986c:	1cb5      	addeq	r5, r6, #2
1000986e:	e7ca      	b.n	10009806 <_strtol_l.constprop.0+0x3a>
10009870:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
10009874:	f1be 0f19 	cmp.w	lr, #25
10009878:	d801      	bhi.n	1000987e <_strtol_l.constprop.0+0xb2>
1000987a:	3c37      	subs	r4, #55	; 0x37
1000987c:	e7e2      	b.n	10009844 <_strtol_l.constprop.0+0x78>
1000987e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
10009882:	f1be 0f19 	cmp.w	lr, #25
10009886:	d804      	bhi.n	10009892 <_strtol_l.constprop.0+0xc6>
10009888:	3c57      	subs	r4, #87	; 0x57
1000988a:	e7db      	b.n	10009844 <_strtol_l.constprop.0+0x78>
1000988c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
10009890:	e7e6      	b.n	10009860 <_strtol_l.constprop.0+0x94>
10009892:	f1bc 0f00 	cmp.w	ip, #0
10009896:	da05      	bge.n	100098a4 <_strtol_l.constprop.0+0xd8>
10009898:	2322      	movs	r3, #34	; 0x22
1000989a:	6003      	str	r3, [r0, #0]
1000989c:	4646      	mov	r6, r8
1000989e:	b942      	cbnz	r2, 100098b2 <_strtol_l.constprop.0+0xe6>
100098a0:	4630      	mov	r0, r6
100098a2:	e79e      	b.n	100097e2 <_strtol_l.constprop.0+0x16>
100098a4:	b107      	cbz	r7, 100098a8 <_strtol_l.constprop.0+0xdc>
100098a6:	4276      	negs	r6, r6
100098a8:	2a00      	cmp	r2, #0
100098aa:	d0f9      	beq.n	100098a0 <_strtol_l.constprop.0+0xd4>
100098ac:	f1bc 0f00 	cmp.w	ip, #0
100098b0:	d000      	beq.n	100098b4 <_strtol_l.constprop.0+0xe8>
100098b2:	1e69      	subs	r1, r5, #1
100098b4:	6011      	str	r1, [r2, #0]
100098b6:	e7f3      	b.n	100098a0 <_strtol_l.constprop.0+0xd4>
100098b8:	2430      	movs	r4, #48	; 0x30
100098ba:	2b00      	cmp	r3, #0
100098bc:	d1b1      	bne.n	10009822 <_strtol_l.constprop.0+0x56>
100098be:	2308      	movs	r3, #8
100098c0:	e7af      	b.n	10009822 <_strtol_l.constprop.0+0x56>
100098c2:	2c30      	cmp	r4, #48	; 0x30
100098c4:	d0a5      	beq.n	10009812 <_strtol_l.constprop.0+0x46>
100098c6:	230a      	movs	r3, #10
100098c8:	e7ab      	b.n	10009822 <_strtol_l.constprop.0+0x56>
100098ca:	bf00      	nop
100098cc:	1000ac40 	.word	0x1000ac40

100098d0 <strtol>:
100098d0:	4613      	mov	r3, r2
100098d2:	460a      	mov	r2, r1
100098d4:	4601      	mov	r1, r0
100098d6:	4802      	ldr	r0, [pc, #8]	; (100098e0 <strtol+0x10>)
100098d8:	6800      	ldr	r0, [r0, #0]
100098da:	f7ff bf77 	b.w	100097cc <_strtol_l.constprop.0>
100098de:	bf00      	nop
100098e0:	10020428 	.word	0x10020428

100098e4 <__swbuf_r>:
100098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100098e6:	460e      	mov	r6, r1
100098e8:	4614      	mov	r4, r2
100098ea:	4605      	mov	r5, r0
100098ec:	b118      	cbz	r0, 100098f6 <__swbuf_r+0x12>
100098ee:	6983      	ldr	r3, [r0, #24]
100098f0:	b90b      	cbnz	r3, 100098f6 <__swbuf_r+0x12>
100098f2:	f000 f9df 	bl	10009cb4 <__sinit>
100098f6:	4b21      	ldr	r3, [pc, #132]	; (1000997c <__swbuf_r+0x98>)
100098f8:	429c      	cmp	r4, r3
100098fa:	d12b      	bne.n	10009954 <__swbuf_r+0x70>
100098fc:	686c      	ldr	r4, [r5, #4]
100098fe:	69a3      	ldr	r3, [r4, #24]
10009900:	60a3      	str	r3, [r4, #8]
10009902:	89a3      	ldrh	r3, [r4, #12]
10009904:	071a      	lsls	r2, r3, #28
10009906:	d52f      	bpl.n	10009968 <__swbuf_r+0x84>
10009908:	6923      	ldr	r3, [r4, #16]
1000990a:	b36b      	cbz	r3, 10009968 <__swbuf_r+0x84>
1000990c:	6923      	ldr	r3, [r4, #16]
1000990e:	6820      	ldr	r0, [r4, #0]
10009910:	1ac0      	subs	r0, r0, r3
10009912:	6963      	ldr	r3, [r4, #20]
10009914:	b2f6      	uxtb	r6, r6
10009916:	4283      	cmp	r3, r0
10009918:	4637      	mov	r7, r6
1000991a:	dc04      	bgt.n	10009926 <__swbuf_r+0x42>
1000991c:	4621      	mov	r1, r4
1000991e:	4628      	mov	r0, r5
10009920:	f000 f934 	bl	10009b8c <_fflush_r>
10009924:	bb30      	cbnz	r0, 10009974 <__swbuf_r+0x90>
10009926:	68a3      	ldr	r3, [r4, #8]
10009928:	3b01      	subs	r3, #1
1000992a:	60a3      	str	r3, [r4, #8]
1000992c:	6823      	ldr	r3, [r4, #0]
1000992e:	1c5a      	adds	r2, r3, #1
10009930:	6022      	str	r2, [r4, #0]
10009932:	701e      	strb	r6, [r3, #0]
10009934:	6963      	ldr	r3, [r4, #20]
10009936:	3001      	adds	r0, #1
10009938:	4283      	cmp	r3, r0
1000993a:	d004      	beq.n	10009946 <__swbuf_r+0x62>
1000993c:	89a3      	ldrh	r3, [r4, #12]
1000993e:	07db      	lsls	r3, r3, #31
10009940:	d506      	bpl.n	10009950 <__swbuf_r+0x6c>
10009942:	2e0a      	cmp	r6, #10
10009944:	d104      	bne.n	10009950 <__swbuf_r+0x6c>
10009946:	4621      	mov	r1, r4
10009948:	4628      	mov	r0, r5
1000994a:	f000 f91f 	bl	10009b8c <_fflush_r>
1000994e:	b988      	cbnz	r0, 10009974 <__swbuf_r+0x90>
10009950:	4638      	mov	r0, r7
10009952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009954:	4b0a      	ldr	r3, [pc, #40]	; (10009980 <__swbuf_r+0x9c>)
10009956:	429c      	cmp	r4, r3
10009958:	d101      	bne.n	1000995e <__swbuf_r+0x7a>
1000995a:	68ac      	ldr	r4, [r5, #8]
1000995c:	e7cf      	b.n	100098fe <__swbuf_r+0x1a>
1000995e:	4b09      	ldr	r3, [pc, #36]	; (10009984 <__swbuf_r+0xa0>)
10009960:	429c      	cmp	r4, r3
10009962:	bf08      	it	eq
10009964:	68ec      	ldreq	r4, [r5, #12]
10009966:	e7ca      	b.n	100098fe <__swbuf_r+0x1a>
10009968:	4621      	mov	r1, r4
1000996a:	4628      	mov	r0, r5
1000996c:	f000 f80c 	bl	10009988 <__swsetup_r>
10009970:	2800      	cmp	r0, #0
10009972:	d0cb      	beq.n	1000990c <__swbuf_r+0x28>
10009974:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
10009978:	e7ea      	b.n	10009950 <__swbuf_r+0x6c>
1000997a:	bf00      	nop
1000997c:	1000ad60 	.word	0x1000ad60
10009980:	1000ad80 	.word	0x1000ad80
10009984:	1000ad40 	.word	0x1000ad40

10009988 <__swsetup_r>:
10009988:	4b32      	ldr	r3, [pc, #200]	; (10009a54 <__swsetup_r+0xcc>)
1000998a:	b570      	push	{r4, r5, r6, lr}
1000998c:	681d      	ldr	r5, [r3, #0]
1000998e:	4606      	mov	r6, r0
10009990:	460c      	mov	r4, r1
10009992:	b125      	cbz	r5, 1000999e <__swsetup_r+0x16>
10009994:	69ab      	ldr	r3, [r5, #24]
10009996:	b913      	cbnz	r3, 1000999e <__swsetup_r+0x16>
10009998:	4628      	mov	r0, r5
1000999a:	f000 f98b 	bl	10009cb4 <__sinit>
1000999e:	4b2e      	ldr	r3, [pc, #184]	; (10009a58 <__swsetup_r+0xd0>)
100099a0:	429c      	cmp	r4, r3
100099a2:	d10f      	bne.n	100099c4 <__swsetup_r+0x3c>
100099a4:	686c      	ldr	r4, [r5, #4]
100099a6:	89a3      	ldrh	r3, [r4, #12]
100099a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
100099ac:	0719      	lsls	r1, r3, #28
100099ae:	d42c      	bmi.n	10009a0a <__swsetup_r+0x82>
100099b0:	06dd      	lsls	r5, r3, #27
100099b2:	d411      	bmi.n	100099d8 <__swsetup_r+0x50>
100099b4:	2309      	movs	r3, #9
100099b6:	6033      	str	r3, [r6, #0]
100099b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
100099bc:	81a3      	strh	r3, [r4, #12]
100099be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
100099c2:	e03e      	b.n	10009a42 <__swsetup_r+0xba>
100099c4:	4b25      	ldr	r3, [pc, #148]	; (10009a5c <__swsetup_r+0xd4>)
100099c6:	429c      	cmp	r4, r3
100099c8:	d101      	bne.n	100099ce <__swsetup_r+0x46>
100099ca:	68ac      	ldr	r4, [r5, #8]
100099cc:	e7eb      	b.n	100099a6 <__swsetup_r+0x1e>
100099ce:	4b24      	ldr	r3, [pc, #144]	; (10009a60 <__swsetup_r+0xd8>)
100099d0:	429c      	cmp	r4, r3
100099d2:	bf08      	it	eq
100099d4:	68ec      	ldreq	r4, [r5, #12]
100099d6:	e7e6      	b.n	100099a6 <__swsetup_r+0x1e>
100099d8:	0758      	lsls	r0, r3, #29
100099da:	d512      	bpl.n	10009a02 <__swsetup_r+0x7a>
100099dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
100099de:	b141      	cbz	r1, 100099f2 <__swsetup_r+0x6a>
100099e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
100099e4:	4299      	cmp	r1, r3
100099e6:	d002      	beq.n	100099ee <__swsetup_r+0x66>
100099e8:	4630      	mov	r0, r6
100099ea:	f7ff fa75 	bl	10008ed8 <_free_r>
100099ee:	2300      	movs	r3, #0
100099f0:	6363      	str	r3, [r4, #52]	; 0x34
100099f2:	89a3      	ldrh	r3, [r4, #12]
100099f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
100099f8:	81a3      	strh	r3, [r4, #12]
100099fa:	2300      	movs	r3, #0
100099fc:	6063      	str	r3, [r4, #4]
100099fe:	6923      	ldr	r3, [r4, #16]
10009a00:	6023      	str	r3, [r4, #0]
10009a02:	89a3      	ldrh	r3, [r4, #12]
10009a04:	f043 0308 	orr.w	r3, r3, #8
10009a08:	81a3      	strh	r3, [r4, #12]
10009a0a:	6923      	ldr	r3, [r4, #16]
10009a0c:	b94b      	cbnz	r3, 10009a22 <__swsetup_r+0x9a>
10009a0e:	89a3      	ldrh	r3, [r4, #12]
10009a10:	f403 7320 	and.w	r3, r3, #640	; 0x280
10009a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
10009a18:	d003      	beq.n	10009a22 <__swsetup_r+0x9a>
10009a1a:	4621      	mov	r1, r4
10009a1c:	4630      	mov	r0, r6
10009a1e:	f000 fa0f 	bl	10009e40 <__smakebuf_r>
10009a22:	89a0      	ldrh	r0, [r4, #12]
10009a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
10009a28:	f010 0301 	ands.w	r3, r0, #1
10009a2c:	d00a      	beq.n	10009a44 <__swsetup_r+0xbc>
10009a2e:	2300      	movs	r3, #0
10009a30:	60a3      	str	r3, [r4, #8]
10009a32:	6963      	ldr	r3, [r4, #20]
10009a34:	425b      	negs	r3, r3
10009a36:	61a3      	str	r3, [r4, #24]
10009a38:	6923      	ldr	r3, [r4, #16]
10009a3a:	b943      	cbnz	r3, 10009a4e <__swsetup_r+0xc6>
10009a3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
10009a40:	d1ba      	bne.n	100099b8 <__swsetup_r+0x30>
10009a42:	bd70      	pop	{r4, r5, r6, pc}
10009a44:	0781      	lsls	r1, r0, #30
10009a46:	bf58      	it	pl
10009a48:	6963      	ldrpl	r3, [r4, #20]
10009a4a:	60a3      	str	r3, [r4, #8]
10009a4c:	e7f4      	b.n	10009a38 <__swsetup_r+0xb0>
10009a4e:	2000      	movs	r0, #0
10009a50:	e7f7      	b.n	10009a42 <__swsetup_r+0xba>
10009a52:	bf00      	nop
10009a54:	10020428 	.word	0x10020428
10009a58:	1000ad60 	.word	0x1000ad60
10009a5c:	1000ad80 	.word	0x1000ad80
10009a60:	1000ad40 	.word	0x1000ad40

10009a64 <abort>:
10009a64:	b508      	push	{r3, lr}
10009a66:	2006      	movs	r0, #6
10009a68:	f000 fa5e 	bl	10009f28 <raise>
10009a6c:	2001      	movs	r0, #1
10009a6e:	f7f6 fb79 	bl	10000164 <_exit>
	...

10009a74 <__errno>:
10009a74:	4b01      	ldr	r3, [pc, #4]	; (10009a7c <__errno+0x8>)
10009a76:	6818      	ldr	r0, [r3, #0]
10009a78:	4770      	bx	lr
10009a7a:	bf00      	nop
10009a7c:	10020428 	.word	0x10020428

10009a80 <__sflush_r>:
10009a80:	898a      	ldrh	r2, [r1, #12]
10009a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10009a86:	4605      	mov	r5, r0
10009a88:	0710      	lsls	r0, r2, #28
10009a8a:	460c      	mov	r4, r1
10009a8c:	d458      	bmi.n	10009b40 <__sflush_r+0xc0>
10009a8e:	684b      	ldr	r3, [r1, #4]
10009a90:	2b00      	cmp	r3, #0
10009a92:	dc05      	bgt.n	10009aa0 <__sflush_r+0x20>
10009a94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10009a96:	2b00      	cmp	r3, #0
10009a98:	dc02      	bgt.n	10009aa0 <__sflush_r+0x20>
10009a9a:	2000      	movs	r0, #0
10009a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10009aa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10009aa2:	2e00      	cmp	r6, #0
10009aa4:	d0f9      	beq.n	10009a9a <__sflush_r+0x1a>
10009aa6:	2300      	movs	r3, #0
10009aa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
10009aac:	682f      	ldr	r7, [r5, #0]
10009aae:	602b      	str	r3, [r5, #0]
10009ab0:	d032      	beq.n	10009b18 <__sflush_r+0x98>
10009ab2:	6d60      	ldr	r0, [r4, #84]	; 0x54
10009ab4:	89a3      	ldrh	r3, [r4, #12]
10009ab6:	075a      	lsls	r2, r3, #29
10009ab8:	d505      	bpl.n	10009ac6 <__sflush_r+0x46>
10009aba:	6863      	ldr	r3, [r4, #4]
10009abc:	1ac0      	subs	r0, r0, r3
10009abe:	6b63      	ldr	r3, [r4, #52]	; 0x34
10009ac0:	b10b      	cbz	r3, 10009ac6 <__sflush_r+0x46>
10009ac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
10009ac4:	1ac0      	subs	r0, r0, r3
10009ac6:	2300      	movs	r3, #0
10009ac8:	4602      	mov	r2, r0
10009aca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10009acc:	6a21      	ldr	r1, [r4, #32]
10009ace:	4628      	mov	r0, r5
10009ad0:	47b0      	blx	r6
10009ad2:	1c43      	adds	r3, r0, #1
10009ad4:	89a3      	ldrh	r3, [r4, #12]
10009ad6:	d106      	bne.n	10009ae6 <__sflush_r+0x66>
10009ad8:	6829      	ldr	r1, [r5, #0]
10009ada:	291d      	cmp	r1, #29
10009adc:	d82c      	bhi.n	10009b38 <__sflush_r+0xb8>
10009ade:	4a2a      	ldr	r2, [pc, #168]	; (10009b88 <__sflush_r+0x108>)
10009ae0:	40ca      	lsrs	r2, r1
10009ae2:	07d6      	lsls	r6, r2, #31
10009ae4:	d528      	bpl.n	10009b38 <__sflush_r+0xb8>
10009ae6:	2200      	movs	r2, #0
10009ae8:	6062      	str	r2, [r4, #4]
10009aea:	04d9      	lsls	r1, r3, #19
10009aec:	6922      	ldr	r2, [r4, #16]
10009aee:	6022      	str	r2, [r4, #0]
10009af0:	d504      	bpl.n	10009afc <__sflush_r+0x7c>
10009af2:	1c42      	adds	r2, r0, #1
10009af4:	d101      	bne.n	10009afa <__sflush_r+0x7a>
10009af6:	682b      	ldr	r3, [r5, #0]
10009af8:	b903      	cbnz	r3, 10009afc <__sflush_r+0x7c>
10009afa:	6560      	str	r0, [r4, #84]	; 0x54
10009afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
10009afe:	602f      	str	r7, [r5, #0]
10009b00:	2900      	cmp	r1, #0
10009b02:	d0ca      	beq.n	10009a9a <__sflush_r+0x1a>
10009b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
10009b08:	4299      	cmp	r1, r3
10009b0a:	d002      	beq.n	10009b12 <__sflush_r+0x92>
10009b0c:	4628      	mov	r0, r5
10009b0e:	f7ff f9e3 	bl	10008ed8 <_free_r>
10009b12:	2000      	movs	r0, #0
10009b14:	6360      	str	r0, [r4, #52]	; 0x34
10009b16:	e7c1      	b.n	10009a9c <__sflush_r+0x1c>
10009b18:	6a21      	ldr	r1, [r4, #32]
10009b1a:	2301      	movs	r3, #1
10009b1c:	4628      	mov	r0, r5
10009b1e:	47b0      	blx	r6
10009b20:	1c41      	adds	r1, r0, #1
10009b22:	d1c7      	bne.n	10009ab4 <__sflush_r+0x34>
10009b24:	682b      	ldr	r3, [r5, #0]
10009b26:	2b00      	cmp	r3, #0
10009b28:	d0c4      	beq.n	10009ab4 <__sflush_r+0x34>
10009b2a:	2b1d      	cmp	r3, #29
10009b2c:	d001      	beq.n	10009b32 <__sflush_r+0xb2>
10009b2e:	2b16      	cmp	r3, #22
10009b30:	d101      	bne.n	10009b36 <__sflush_r+0xb6>
10009b32:	602f      	str	r7, [r5, #0]
10009b34:	e7b1      	b.n	10009a9a <__sflush_r+0x1a>
10009b36:	89a3      	ldrh	r3, [r4, #12]
10009b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10009b3c:	81a3      	strh	r3, [r4, #12]
10009b3e:	e7ad      	b.n	10009a9c <__sflush_r+0x1c>
10009b40:	690f      	ldr	r7, [r1, #16]
10009b42:	2f00      	cmp	r7, #0
10009b44:	d0a9      	beq.n	10009a9a <__sflush_r+0x1a>
10009b46:	0793      	lsls	r3, r2, #30
10009b48:	680e      	ldr	r6, [r1, #0]
10009b4a:	bf08      	it	eq
10009b4c:	694b      	ldreq	r3, [r1, #20]
10009b4e:	600f      	str	r7, [r1, #0]
10009b50:	bf18      	it	ne
10009b52:	2300      	movne	r3, #0
10009b54:	eba6 0807 	sub.w	r8, r6, r7
10009b58:	608b      	str	r3, [r1, #8]
10009b5a:	f1b8 0f00 	cmp.w	r8, #0
10009b5e:	dd9c      	ble.n	10009a9a <__sflush_r+0x1a>
10009b60:	6a21      	ldr	r1, [r4, #32]
10009b62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10009b64:	4643      	mov	r3, r8
10009b66:	463a      	mov	r2, r7
10009b68:	4628      	mov	r0, r5
10009b6a:	47b0      	blx	r6
10009b6c:	2800      	cmp	r0, #0
10009b6e:	dc06      	bgt.n	10009b7e <__sflush_r+0xfe>
10009b70:	89a3      	ldrh	r3, [r4, #12]
10009b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10009b76:	81a3      	strh	r3, [r4, #12]
10009b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10009b7c:	e78e      	b.n	10009a9c <__sflush_r+0x1c>
10009b7e:	4407      	add	r7, r0
10009b80:	eba8 0800 	sub.w	r8, r8, r0
10009b84:	e7e9      	b.n	10009b5a <__sflush_r+0xda>
10009b86:	bf00      	nop
10009b88:	20400001 	.word	0x20400001

10009b8c <_fflush_r>:
10009b8c:	b538      	push	{r3, r4, r5, lr}
10009b8e:	690b      	ldr	r3, [r1, #16]
10009b90:	4605      	mov	r5, r0
10009b92:	460c      	mov	r4, r1
10009b94:	b913      	cbnz	r3, 10009b9c <_fflush_r+0x10>
10009b96:	2500      	movs	r5, #0
10009b98:	4628      	mov	r0, r5
10009b9a:	bd38      	pop	{r3, r4, r5, pc}
10009b9c:	b118      	cbz	r0, 10009ba6 <_fflush_r+0x1a>
10009b9e:	6983      	ldr	r3, [r0, #24]
10009ba0:	b90b      	cbnz	r3, 10009ba6 <_fflush_r+0x1a>
10009ba2:	f000 f887 	bl	10009cb4 <__sinit>
10009ba6:	4b14      	ldr	r3, [pc, #80]	; (10009bf8 <_fflush_r+0x6c>)
10009ba8:	429c      	cmp	r4, r3
10009baa:	d11b      	bne.n	10009be4 <_fflush_r+0x58>
10009bac:	686c      	ldr	r4, [r5, #4]
10009bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10009bb2:	2b00      	cmp	r3, #0
10009bb4:	d0ef      	beq.n	10009b96 <_fflush_r+0xa>
10009bb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
10009bb8:	07d0      	lsls	r0, r2, #31
10009bba:	d404      	bmi.n	10009bc6 <_fflush_r+0x3a>
10009bbc:	0599      	lsls	r1, r3, #22
10009bbe:	d402      	bmi.n	10009bc6 <_fflush_r+0x3a>
10009bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
10009bc2:	f000 f915 	bl	10009df0 <__retarget_lock_acquire_recursive>
10009bc6:	4628      	mov	r0, r5
10009bc8:	4621      	mov	r1, r4
10009bca:	f7ff ff59 	bl	10009a80 <__sflush_r>
10009bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
10009bd0:	07da      	lsls	r2, r3, #31
10009bd2:	4605      	mov	r5, r0
10009bd4:	d4e0      	bmi.n	10009b98 <_fflush_r+0xc>
10009bd6:	89a3      	ldrh	r3, [r4, #12]
10009bd8:	059b      	lsls	r3, r3, #22
10009bda:	d4dd      	bmi.n	10009b98 <_fflush_r+0xc>
10009bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
10009bde:	f000 f908 	bl	10009df2 <__retarget_lock_release_recursive>
10009be2:	e7d9      	b.n	10009b98 <_fflush_r+0xc>
10009be4:	4b05      	ldr	r3, [pc, #20]	; (10009bfc <_fflush_r+0x70>)
10009be6:	429c      	cmp	r4, r3
10009be8:	d101      	bne.n	10009bee <_fflush_r+0x62>
10009bea:	68ac      	ldr	r4, [r5, #8]
10009bec:	e7df      	b.n	10009bae <_fflush_r+0x22>
10009bee:	4b04      	ldr	r3, [pc, #16]	; (10009c00 <_fflush_r+0x74>)
10009bf0:	429c      	cmp	r4, r3
10009bf2:	bf08      	it	eq
10009bf4:	68ec      	ldreq	r4, [r5, #12]
10009bf6:	e7da      	b.n	10009bae <_fflush_r+0x22>
10009bf8:	1000ad60 	.word	0x1000ad60
10009bfc:	1000ad80 	.word	0x1000ad80
10009c00:	1000ad40 	.word	0x1000ad40

10009c04 <std>:
10009c04:	2300      	movs	r3, #0
10009c06:	b510      	push	{r4, lr}
10009c08:	4604      	mov	r4, r0
10009c0a:	e9c0 3300 	strd	r3, r3, [r0]
10009c0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
10009c12:	6083      	str	r3, [r0, #8]
10009c14:	8181      	strh	r1, [r0, #12]
10009c16:	6643      	str	r3, [r0, #100]	; 0x64
10009c18:	81c2      	strh	r2, [r0, #14]
10009c1a:	6183      	str	r3, [r0, #24]
10009c1c:	4619      	mov	r1, r3
10009c1e:	2208      	movs	r2, #8
10009c20:	305c      	adds	r0, #92	; 0x5c
10009c22:	f7ff f951 	bl	10008ec8 <memset>
10009c26:	4b05      	ldr	r3, [pc, #20]	; (10009c3c <std+0x38>)
10009c28:	6263      	str	r3, [r4, #36]	; 0x24
10009c2a:	4b05      	ldr	r3, [pc, #20]	; (10009c40 <std+0x3c>)
10009c2c:	62a3      	str	r3, [r4, #40]	; 0x28
10009c2e:	4b05      	ldr	r3, [pc, #20]	; (10009c44 <std+0x40>)
10009c30:	62e3      	str	r3, [r4, #44]	; 0x2c
10009c32:	4b05      	ldr	r3, [pc, #20]	; (10009c48 <std+0x44>)
10009c34:	6224      	str	r4, [r4, #32]
10009c36:	6323      	str	r3, [r4, #48]	; 0x30
10009c38:	bd10      	pop	{r4, pc}
10009c3a:	bf00      	nop
10009c3c:	10009f61 	.word	0x10009f61
10009c40:	10009f83 	.word	0x10009f83
10009c44:	10009fbb 	.word	0x10009fbb
10009c48:	10009fdf 	.word	0x10009fdf

10009c4c <_cleanup_r>:
10009c4c:	4901      	ldr	r1, [pc, #4]	; (10009c54 <_cleanup_r+0x8>)
10009c4e:	f000 b8af 	b.w	10009db0 <_fwalk_reent>
10009c52:	bf00      	nop
10009c54:	10009b8d 	.word	0x10009b8d

10009c58 <__sfmoreglue>:
10009c58:	b570      	push	{r4, r5, r6, lr}
10009c5a:	2268      	movs	r2, #104	; 0x68
10009c5c:	1e4d      	subs	r5, r1, #1
10009c5e:	4355      	muls	r5, r2
10009c60:	460e      	mov	r6, r1
10009c62:	f105 0174 	add.w	r1, r5, #116	; 0x74
10009c66:	f7ff f9a3 	bl	10008fb0 <_malloc_r>
10009c6a:	4604      	mov	r4, r0
10009c6c:	b140      	cbz	r0, 10009c80 <__sfmoreglue+0x28>
10009c6e:	2100      	movs	r1, #0
10009c70:	e9c0 1600 	strd	r1, r6, [r0]
10009c74:	300c      	adds	r0, #12
10009c76:	60a0      	str	r0, [r4, #8]
10009c78:	f105 0268 	add.w	r2, r5, #104	; 0x68
10009c7c:	f7ff f924 	bl	10008ec8 <memset>
10009c80:	4620      	mov	r0, r4
10009c82:	bd70      	pop	{r4, r5, r6, pc}

10009c84 <__sfp_lock_acquire>:
10009c84:	4801      	ldr	r0, [pc, #4]	; (10009c8c <__sfp_lock_acquire+0x8>)
10009c86:	f000 b8b3 	b.w	10009df0 <__retarget_lock_acquire_recursive>
10009c8a:	bf00      	nop
10009c8c:	10021381 	.word	0x10021381

10009c90 <__sfp_lock_release>:
10009c90:	4801      	ldr	r0, [pc, #4]	; (10009c98 <__sfp_lock_release+0x8>)
10009c92:	f000 b8ae 	b.w	10009df2 <__retarget_lock_release_recursive>
10009c96:	bf00      	nop
10009c98:	10021381 	.word	0x10021381

10009c9c <__sinit_lock_acquire>:
10009c9c:	4801      	ldr	r0, [pc, #4]	; (10009ca4 <__sinit_lock_acquire+0x8>)
10009c9e:	f000 b8a7 	b.w	10009df0 <__retarget_lock_acquire_recursive>
10009ca2:	bf00      	nop
10009ca4:	10021382 	.word	0x10021382

10009ca8 <__sinit_lock_release>:
10009ca8:	4801      	ldr	r0, [pc, #4]	; (10009cb0 <__sinit_lock_release+0x8>)
10009caa:	f000 b8a2 	b.w	10009df2 <__retarget_lock_release_recursive>
10009cae:	bf00      	nop
10009cb0:	10021382 	.word	0x10021382

10009cb4 <__sinit>:
10009cb4:	b510      	push	{r4, lr}
10009cb6:	4604      	mov	r4, r0
10009cb8:	f7ff fff0 	bl	10009c9c <__sinit_lock_acquire>
10009cbc:	69a3      	ldr	r3, [r4, #24]
10009cbe:	b11b      	cbz	r3, 10009cc8 <__sinit+0x14>
10009cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10009cc4:	f7ff bff0 	b.w	10009ca8 <__sinit_lock_release>
10009cc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
10009ccc:	6523      	str	r3, [r4, #80]	; 0x50
10009cce:	4b13      	ldr	r3, [pc, #76]	; (10009d1c <__sinit+0x68>)
10009cd0:	4a13      	ldr	r2, [pc, #76]	; (10009d20 <__sinit+0x6c>)
10009cd2:	681b      	ldr	r3, [r3, #0]
10009cd4:	62a2      	str	r2, [r4, #40]	; 0x28
10009cd6:	42a3      	cmp	r3, r4
10009cd8:	bf04      	itt	eq
10009cda:	2301      	moveq	r3, #1
10009cdc:	61a3      	streq	r3, [r4, #24]
10009cde:	4620      	mov	r0, r4
10009ce0:	f000 f820 	bl	10009d24 <__sfp>
10009ce4:	6060      	str	r0, [r4, #4]
10009ce6:	4620      	mov	r0, r4
10009ce8:	f000 f81c 	bl	10009d24 <__sfp>
10009cec:	60a0      	str	r0, [r4, #8]
10009cee:	4620      	mov	r0, r4
10009cf0:	f000 f818 	bl	10009d24 <__sfp>
10009cf4:	2200      	movs	r2, #0
10009cf6:	60e0      	str	r0, [r4, #12]
10009cf8:	2104      	movs	r1, #4
10009cfa:	6860      	ldr	r0, [r4, #4]
10009cfc:	f7ff ff82 	bl	10009c04 <std>
10009d00:	68a0      	ldr	r0, [r4, #8]
10009d02:	2201      	movs	r2, #1
10009d04:	2109      	movs	r1, #9
10009d06:	f7ff ff7d 	bl	10009c04 <std>
10009d0a:	68e0      	ldr	r0, [r4, #12]
10009d0c:	2202      	movs	r2, #2
10009d0e:	2112      	movs	r1, #18
10009d10:	f7ff ff78 	bl	10009c04 <std>
10009d14:	2301      	movs	r3, #1
10009d16:	61a3      	str	r3, [r4, #24]
10009d18:	e7d2      	b.n	10009cc0 <__sinit+0xc>
10009d1a:	bf00      	nop
10009d1c:	1000ab94 	.word	0x1000ab94
10009d20:	10009c4d 	.word	0x10009c4d

10009d24 <__sfp>:
10009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009d26:	4607      	mov	r7, r0
10009d28:	f7ff ffac 	bl	10009c84 <__sfp_lock_acquire>
10009d2c:	4b1e      	ldr	r3, [pc, #120]	; (10009da8 <__sfp+0x84>)
10009d2e:	681e      	ldr	r6, [r3, #0]
10009d30:	69b3      	ldr	r3, [r6, #24]
10009d32:	b913      	cbnz	r3, 10009d3a <__sfp+0x16>
10009d34:	4630      	mov	r0, r6
10009d36:	f7ff ffbd 	bl	10009cb4 <__sinit>
10009d3a:	3648      	adds	r6, #72	; 0x48
10009d3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
10009d40:	3b01      	subs	r3, #1
10009d42:	d503      	bpl.n	10009d4c <__sfp+0x28>
10009d44:	6833      	ldr	r3, [r6, #0]
10009d46:	b30b      	cbz	r3, 10009d8c <__sfp+0x68>
10009d48:	6836      	ldr	r6, [r6, #0]
10009d4a:	e7f7      	b.n	10009d3c <__sfp+0x18>
10009d4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
10009d50:	b9d5      	cbnz	r5, 10009d88 <__sfp+0x64>
10009d52:	4b16      	ldr	r3, [pc, #88]	; (10009dac <__sfp+0x88>)
10009d54:	60e3      	str	r3, [r4, #12]
10009d56:	f104 0058 	add.w	r0, r4, #88	; 0x58
10009d5a:	6665      	str	r5, [r4, #100]	; 0x64
10009d5c:	f000 f847 	bl	10009dee <__retarget_lock_init_recursive>
10009d60:	f7ff ff96 	bl	10009c90 <__sfp_lock_release>
10009d64:	e9c4 5501 	strd	r5, r5, [r4, #4]
10009d68:	e9c4 5504 	strd	r5, r5, [r4, #16]
10009d6c:	6025      	str	r5, [r4, #0]
10009d6e:	61a5      	str	r5, [r4, #24]
10009d70:	2208      	movs	r2, #8
10009d72:	4629      	mov	r1, r5
10009d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
10009d78:	f7ff f8a6 	bl	10008ec8 <memset>
10009d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
10009d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
10009d84:	4620      	mov	r0, r4
10009d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009d88:	3468      	adds	r4, #104	; 0x68
10009d8a:	e7d9      	b.n	10009d40 <__sfp+0x1c>
10009d8c:	2104      	movs	r1, #4
10009d8e:	4638      	mov	r0, r7
10009d90:	f7ff ff62 	bl	10009c58 <__sfmoreglue>
10009d94:	4604      	mov	r4, r0
10009d96:	6030      	str	r0, [r6, #0]
10009d98:	2800      	cmp	r0, #0
10009d9a:	d1d5      	bne.n	10009d48 <__sfp+0x24>
10009d9c:	f7ff ff78 	bl	10009c90 <__sfp_lock_release>
10009da0:	230c      	movs	r3, #12
10009da2:	603b      	str	r3, [r7, #0]
10009da4:	e7ee      	b.n	10009d84 <__sfp+0x60>
10009da6:	bf00      	nop
10009da8:	1000ab94 	.word	0x1000ab94
10009dac:	ffff0001 	.word	0xffff0001

10009db0 <_fwalk_reent>:
10009db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10009db4:	4606      	mov	r6, r0
10009db6:	4688      	mov	r8, r1
10009db8:	f100 0448 	add.w	r4, r0, #72	; 0x48
10009dbc:	2700      	movs	r7, #0
10009dbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
10009dc2:	f1b9 0901 	subs.w	r9, r9, #1
10009dc6:	d505      	bpl.n	10009dd4 <_fwalk_reent+0x24>
10009dc8:	6824      	ldr	r4, [r4, #0]
10009dca:	2c00      	cmp	r4, #0
10009dcc:	d1f7      	bne.n	10009dbe <_fwalk_reent+0xe>
10009dce:	4638      	mov	r0, r7
10009dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10009dd4:	89ab      	ldrh	r3, [r5, #12]
10009dd6:	2b01      	cmp	r3, #1
10009dd8:	d907      	bls.n	10009dea <_fwalk_reent+0x3a>
10009dda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10009dde:	3301      	adds	r3, #1
10009de0:	d003      	beq.n	10009dea <_fwalk_reent+0x3a>
10009de2:	4629      	mov	r1, r5
10009de4:	4630      	mov	r0, r6
10009de6:	47c0      	blx	r8
10009de8:	4307      	orrs	r7, r0
10009dea:	3568      	adds	r5, #104	; 0x68
10009dec:	e7e9      	b.n	10009dc2 <_fwalk_reent+0x12>

10009dee <__retarget_lock_init_recursive>:
10009dee:	4770      	bx	lr

10009df0 <__retarget_lock_acquire_recursive>:
10009df0:	4770      	bx	lr

10009df2 <__retarget_lock_release_recursive>:
10009df2:	4770      	bx	lr

10009df4 <__swhatbuf_r>:
10009df4:	b570      	push	{r4, r5, r6, lr}
10009df6:	460e      	mov	r6, r1
10009df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009dfc:	2900      	cmp	r1, #0
10009dfe:	b096      	sub	sp, #88	; 0x58
10009e00:	4614      	mov	r4, r2
10009e02:	461d      	mov	r5, r3
10009e04:	da08      	bge.n	10009e18 <__swhatbuf_r+0x24>
10009e06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
10009e0a:	2200      	movs	r2, #0
10009e0c:	602a      	str	r2, [r5, #0]
10009e0e:	061a      	lsls	r2, r3, #24
10009e10:	d410      	bmi.n	10009e34 <__swhatbuf_r+0x40>
10009e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
10009e16:	e00e      	b.n	10009e36 <__swhatbuf_r+0x42>
10009e18:	466a      	mov	r2, sp
10009e1a:	f000 f907 	bl	1000a02c <_fstat_r>
10009e1e:	2800      	cmp	r0, #0
10009e20:	dbf1      	blt.n	10009e06 <__swhatbuf_r+0x12>
10009e22:	9a01      	ldr	r2, [sp, #4]
10009e24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
10009e28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
10009e2c:	425a      	negs	r2, r3
10009e2e:	415a      	adcs	r2, r3
10009e30:	602a      	str	r2, [r5, #0]
10009e32:	e7ee      	b.n	10009e12 <__swhatbuf_r+0x1e>
10009e34:	2340      	movs	r3, #64	; 0x40
10009e36:	2000      	movs	r0, #0
10009e38:	6023      	str	r3, [r4, #0]
10009e3a:	b016      	add	sp, #88	; 0x58
10009e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

10009e40 <__smakebuf_r>:
10009e40:	898b      	ldrh	r3, [r1, #12]
10009e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
10009e44:	079d      	lsls	r5, r3, #30
10009e46:	4606      	mov	r6, r0
10009e48:	460c      	mov	r4, r1
10009e4a:	d507      	bpl.n	10009e5c <__smakebuf_r+0x1c>
10009e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
10009e50:	6023      	str	r3, [r4, #0]
10009e52:	6123      	str	r3, [r4, #16]
10009e54:	2301      	movs	r3, #1
10009e56:	6163      	str	r3, [r4, #20]
10009e58:	b002      	add	sp, #8
10009e5a:	bd70      	pop	{r4, r5, r6, pc}
10009e5c:	ab01      	add	r3, sp, #4
10009e5e:	466a      	mov	r2, sp
10009e60:	f7ff ffc8 	bl	10009df4 <__swhatbuf_r>
10009e64:	9900      	ldr	r1, [sp, #0]
10009e66:	4605      	mov	r5, r0
10009e68:	4630      	mov	r0, r6
10009e6a:	f7ff f8a1 	bl	10008fb0 <_malloc_r>
10009e6e:	b948      	cbnz	r0, 10009e84 <__smakebuf_r+0x44>
10009e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10009e74:	059a      	lsls	r2, r3, #22
10009e76:	d4ef      	bmi.n	10009e58 <__smakebuf_r+0x18>
10009e78:	f023 0303 	bic.w	r3, r3, #3
10009e7c:	f043 0302 	orr.w	r3, r3, #2
10009e80:	81a3      	strh	r3, [r4, #12]
10009e82:	e7e3      	b.n	10009e4c <__smakebuf_r+0xc>
10009e84:	4b0d      	ldr	r3, [pc, #52]	; (10009ebc <__smakebuf_r+0x7c>)
10009e86:	62b3      	str	r3, [r6, #40]	; 0x28
10009e88:	89a3      	ldrh	r3, [r4, #12]
10009e8a:	6020      	str	r0, [r4, #0]
10009e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10009e90:	81a3      	strh	r3, [r4, #12]
10009e92:	9b00      	ldr	r3, [sp, #0]
10009e94:	6163      	str	r3, [r4, #20]
10009e96:	9b01      	ldr	r3, [sp, #4]
10009e98:	6120      	str	r0, [r4, #16]
10009e9a:	b15b      	cbz	r3, 10009eb4 <__smakebuf_r+0x74>
10009e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10009ea0:	4630      	mov	r0, r6
10009ea2:	f000 f8d5 	bl	1000a050 <_isatty_r>
10009ea6:	b128      	cbz	r0, 10009eb4 <__smakebuf_r+0x74>
10009ea8:	89a3      	ldrh	r3, [r4, #12]
10009eaa:	f023 0303 	bic.w	r3, r3, #3
10009eae:	f043 0301 	orr.w	r3, r3, #1
10009eb2:	81a3      	strh	r3, [r4, #12]
10009eb4:	89a0      	ldrh	r0, [r4, #12]
10009eb6:	4305      	orrs	r5, r0
10009eb8:	81a5      	strh	r5, [r4, #12]
10009eba:	e7cd      	b.n	10009e58 <__smakebuf_r+0x18>
10009ebc:	10009c4d 	.word	0x10009c4d

10009ec0 <__malloc_lock>:
10009ec0:	4801      	ldr	r0, [pc, #4]	; (10009ec8 <__malloc_lock+0x8>)
10009ec2:	f7ff bf95 	b.w	10009df0 <__retarget_lock_acquire_recursive>
10009ec6:	bf00      	nop
10009ec8:	10021380 	.word	0x10021380

10009ecc <__malloc_unlock>:
10009ecc:	4801      	ldr	r0, [pc, #4]	; (10009ed4 <__malloc_unlock+0x8>)
10009ece:	f7ff bf90 	b.w	10009df2 <__retarget_lock_release_recursive>
10009ed2:	bf00      	nop
10009ed4:	10021380 	.word	0x10021380

10009ed8 <_raise_r>:
10009ed8:	291f      	cmp	r1, #31
10009eda:	b538      	push	{r3, r4, r5, lr}
10009edc:	4604      	mov	r4, r0
10009ede:	460d      	mov	r5, r1
10009ee0:	d904      	bls.n	10009eec <_raise_r+0x14>
10009ee2:	2316      	movs	r3, #22
10009ee4:	6003      	str	r3, [r0, #0]
10009ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
10009eea:	bd38      	pop	{r3, r4, r5, pc}
10009eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
10009eee:	b112      	cbz	r2, 10009ef6 <_raise_r+0x1e>
10009ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
10009ef4:	b94b      	cbnz	r3, 10009f0a <_raise_r+0x32>
10009ef6:	4620      	mov	r0, r4
10009ef8:	f000 f830 	bl	10009f5c <_getpid_r>
10009efc:	462a      	mov	r2, r5
10009efe:	4601      	mov	r1, r0
10009f00:	4620      	mov	r0, r4
10009f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10009f06:	f000 b817 	b.w	10009f38 <_kill_r>
10009f0a:	2b01      	cmp	r3, #1
10009f0c:	d00a      	beq.n	10009f24 <_raise_r+0x4c>
10009f0e:	1c59      	adds	r1, r3, #1
10009f10:	d103      	bne.n	10009f1a <_raise_r+0x42>
10009f12:	2316      	movs	r3, #22
10009f14:	6003      	str	r3, [r0, #0]
10009f16:	2001      	movs	r0, #1
10009f18:	e7e7      	b.n	10009eea <_raise_r+0x12>
10009f1a:	2400      	movs	r4, #0
10009f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
10009f20:	4628      	mov	r0, r5
10009f22:	4798      	blx	r3
10009f24:	2000      	movs	r0, #0
10009f26:	e7e0      	b.n	10009eea <_raise_r+0x12>

10009f28 <raise>:
10009f28:	4b02      	ldr	r3, [pc, #8]	; (10009f34 <raise+0xc>)
10009f2a:	4601      	mov	r1, r0
10009f2c:	6818      	ldr	r0, [r3, #0]
10009f2e:	f7ff bfd3 	b.w	10009ed8 <_raise_r>
10009f32:	bf00      	nop
10009f34:	10020428 	.word	0x10020428

10009f38 <_kill_r>:
10009f38:	b538      	push	{r3, r4, r5, lr}
10009f3a:	4d07      	ldr	r5, [pc, #28]	; (10009f58 <_kill_r+0x20>)
10009f3c:	2300      	movs	r3, #0
10009f3e:	4604      	mov	r4, r0
10009f40:	4608      	mov	r0, r1
10009f42:	4611      	mov	r1, r2
10009f44:	602b      	str	r3, [r5, #0]
10009f46:	f7f6 f905 	bl	10000154 <_kill>
10009f4a:	1c43      	adds	r3, r0, #1
10009f4c:	d102      	bne.n	10009f54 <_kill_r+0x1c>
10009f4e:	682b      	ldr	r3, [r5, #0]
10009f50:	b103      	cbz	r3, 10009f54 <_kill_r+0x1c>
10009f52:	6023      	str	r3, [r4, #0]
10009f54:	bd38      	pop	{r3, r4, r5, pc}
10009f56:	bf00      	nop
10009f58:	1002137c 	.word	0x1002137c

10009f5c <_getpid_r>:
10009f5c:	f7f6 b8f8 	b.w	10000150 <_getpid>

10009f60 <__sread>:
10009f60:	b510      	push	{r4, lr}
10009f62:	460c      	mov	r4, r1
10009f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009f68:	f000 f894 	bl	1000a094 <_read_r>
10009f6c:	2800      	cmp	r0, #0
10009f6e:	bfab      	itete	ge
10009f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
10009f72:	89a3      	ldrhlt	r3, [r4, #12]
10009f74:	181b      	addge	r3, r3, r0
10009f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
10009f7a:	bfac      	ite	ge
10009f7c:	6563      	strge	r3, [r4, #84]	; 0x54
10009f7e:	81a3      	strhlt	r3, [r4, #12]
10009f80:	bd10      	pop	{r4, pc}

10009f82 <__swrite>:
10009f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10009f86:	461f      	mov	r7, r3
10009f88:	898b      	ldrh	r3, [r1, #12]
10009f8a:	05db      	lsls	r3, r3, #23
10009f8c:	4605      	mov	r5, r0
10009f8e:	460c      	mov	r4, r1
10009f90:	4616      	mov	r6, r2
10009f92:	d505      	bpl.n	10009fa0 <__swrite+0x1e>
10009f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009f98:	2302      	movs	r3, #2
10009f9a:	2200      	movs	r2, #0
10009f9c:	f000 f868 	bl	1000a070 <_lseek_r>
10009fa0:	89a3      	ldrh	r3, [r4, #12]
10009fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10009fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
10009faa:	81a3      	strh	r3, [r4, #12]
10009fac:	4632      	mov	r2, r6
10009fae:	463b      	mov	r3, r7
10009fb0:	4628      	mov	r0, r5
10009fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10009fb6:	f000 b817 	b.w	10009fe8 <_write_r>

10009fba <__sseek>:
10009fba:	b510      	push	{r4, lr}
10009fbc:	460c      	mov	r4, r1
10009fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009fc2:	f000 f855 	bl	1000a070 <_lseek_r>
10009fc6:	1c43      	adds	r3, r0, #1
10009fc8:	89a3      	ldrh	r3, [r4, #12]
10009fca:	bf15      	itete	ne
10009fcc:	6560      	strne	r0, [r4, #84]	; 0x54
10009fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
10009fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
10009fd6:	81a3      	strheq	r3, [r4, #12]
10009fd8:	bf18      	it	ne
10009fda:	81a3      	strhne	r3, [r4, #12]
10009fdc:	bd10      	pop	{r4, pc}

10009fde <__sclose>:
10009fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009fe2:	f000 b813 	b.w	1000a00c <_close_r>
	...

10009fe8 <_write_r>:
10009fe8:	b538      	push	{r3, r4, r5, lr}
10009fea:	4d07      	ldr	r5, [pc, #28]	; (1000a008 <_write_r+0x20>)
10009fec:	4604      	mov	r4, r0
10009fee:	4608      	mov	r0, r1
10009ff0:	4611      	mov	r1, r2
10009ff2:	2200      	movs	r2, #0
10009ff4:	602a      	str	r2, [r5, #0]
10009ff6:	461a      	mov	r2, r3
10009ff8:	f7f6 f8ba 	bl	10000170 <_write>
10009ffc:	1c43      	adds	r3, r0, #1
10009ffe:	d102      	bne.n	1000a006 <_write_r+0x1e>
1000a000:	682b      	ldr	r3, [r5, #0]
1000a002:	b103      	cbz	r3, 1000a006 <_write_r+0x1e>
1000a004:	6023      	str	r3, [r4, #0]
1000a006:	bd38      	pop	{r3, r4, r5, pc}
1000a008:	1002137c 	.word	0x1002137c

1000a00c <_close_r>:
1000a00c:	b538      	push	{r3, r4, r5, lr}
1000a00e:	4d06      	ldr	r5, [pc, #24]	; (1000a028 <_close_r+0x1c>)
1000a010:	2300      	movs	r3, #0
1000a012:	4604      	mov	r4, r0
1000a014:	4608      	mov	r0, r1
1000a016:	602b      	str	r3, [r5, #0]
1000a018:	f7f6 f8b8 	bl	1000018c <_close>
1000a01c:	1c43      	adds	r3, r0, #1
1000a01e:	d102      	bne.n	1000a026 <_close_r+0x1a>
1000a020:	682b      	ldr	r3, [r5, #0]
1000a022:	b103      	cbz	r3, 1000a026 <_close_r+0x1a>
1000a024:	6023      	str	r3, [r4, #0]
1000a026:	bd38      	pop	{r3, r4, r5, pc}
1000a028:	1002137c 	.word	0x1002137c

1000a02c <_fstat_r>:
1000a02c:	b538      	push	{r3, r4, r5, lr}
1000a02e:	4d07      	ldr	r5, [pc, #28]	; (1000a04c <_fstat_r+0x20>)
1000a030:	2300      	movs	r3, #0
1000a032:	4604      	mov	r4, r0
1000a034:	4608      	mov	r0, r1
1000a036:	4611      	mov	r1, r2
1000a038:	602b      	str	r3, [r5, #0]
1000a03a:	f7f6 f8aa 	bl	10000192 <_fstat>
1000a03e:	1c43      	adds	r3, r0, #1
1000a040:	d102      	bne.n	1000a048 <_fstat_r+0x1c>
1000a042:	682b      	ldr	r3, [r5, #0]
1000a044:	b103      	cbz	r3, 1000a048 <_fstat_r+0x1c>
1000a046:	6023      	str	r3, [r4, #0]
1000a048:	bd38      	pop	{r3, r4, r5, pc}
1000a04a:	bf00      	nop
1000a04c:	1002137c 	.word	0x1002137c

1000a050 <_isatty_r>:
1000a050:	b538      	push	{r3, r4, r5, lr}
1000a052:	4d06      	ldr	r5, [pc, #24]	; (1000a06c <_isatty_r+0x1c>)
1000a054:	2300      	movs	r3, #0
1000a056:	4604      	mov	r4, r0
1000a058:	4608      	mov	r0, r1
1000a05a:	602b      	str	r3, [r5, #0]
1000a05c:	f7f6 f89e 	bl	1000019c <_isatty>
1000a060:	1c43      	adds	r3, r0, #1
1000a062:	d102      	bne.n	1000a06a <_isatty_r+0x1a>
1000a064:	682b      	ldr	r3, [r5, #0]
1000a066:	b103      	cbz	r3, 1000a06a <_isatty_r+0x1a>
1000a068:	6023      	str	r3, [r4, #0]
1000a06a:	bd38      	pop	{r3, r4, r5, pc}
1000a06c:	1002137c 	.word	0x1002137c

1000a070 <_lseek_r>:
1000a070:	b538      	push	{r3, r4, r5, lr}
1000a072:	4d07      	ldr	r5, [pc, #28]	; (1000a090 <_lseek_r+0x20>)
1000a074:	4604      	mov	r4, r0
1000a076:	4608      	mov	r0, r1
1000a078:	4611      	mov	r1, r2
1000a07a:	2200      	movs	r2, #0
1000a07c:	602a      	str	r2, [r5, #0]
1000a07e:	461a      	mov	r2, r3
1000a080:	f7f6 f88e 	bl	100001a0 <_lseek>
1000a084:	1c43      	adds	r3, r0, #1
1000a086:	d102      	bne.n	1000a08e <_lseek_r+0x1e>
1000a088:	682b      	ldr	r3, [r5, #0]
1000a08a:	b103      	cbz	r3, 1000a08e <_lseek_r+0x1e>
1000a08c:	6023      	str	r3, [r4, #0]
1000a08e:	bd38      	pop	{r3, r4, r5, pc}
1000a090:	1002137c 	.word	0x1002137c

1000a094 <_read_r>:
1000a094:	b538      	push	{r3, r4, r5, lr}
1000a096:	4d07      	ldr	r5, [pc, #28]	; (1000a0b4 <_read_r+0x20>)
1000a098:	4604      	mov	r4, r0
1000a09a:	4608      	mov	r0, r1
1000a09c:	4611      	mov	r1, r2
1000a09e:	2200      	movs	r2, #0
1000a0a0:	602a      	str	r2, [r5, #0]
1000a0a2:	461a      	mov	r2, r3
1000a0a4:	f7f6 f87e 	bl	100001a4 <_read>
1000a0a8:	1c43      	adds	r3, r0, #1
1000a0aa:	d102      	bne.n	1000a0b2 <_read_r+0x1e>
1000a0ac:	682b      	ldr	r3, [r5, #0]
1000a0ae:	b103      	cbz	r3, 1000a0b2 <_read_r+0x1e>
1000a0b0:	6023      	str	r3, [r4, #0]
1000a0b2:	bd38      	pop	{r3, r4, r5, pc}
1000a0b4:	1002137c 	.word	0x1002137c

1000a0b8 <_init>:
1000a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a0ba:	bf00      	nop
1000a0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a0be:	bc08      	pop	{r3}
1000a0c0:	469e      	mov	lr, r3
1000a0c2:	4770      	bx	lr

1000a0c4 <_fini>:
1000a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a0c6:	bf00      	nop
1000a0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000a0ca:	bc08      	pop	{r3}
1000a0cc:	469e      	mov	lr, r3
1000a0ce:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000a0d0 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000a0d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 1000a108 <LoopForever+0x2>
  movs  r1, #0
1000a0d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000a0d6:	e003      	b.n	1000a0e0 <LoopCopyDataInit>

1000a0d8 <CopyDataInit>:
  ldr  r3, =_sidata
1000a0d8:	4b0c      	ldr	r3, [pc, #48]	; (1000a10c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000a0da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000a0dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000a0de:	3104      	adds	r1, #4

1000a0e0 <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000a0e0:	480b      	ldr	r0, [pc, #44]	; (1000a110 <LoopForever+0xa>)
  ldr  r3, =_edata
1000a0e2:	4b0c      	ldr	r3, [pc, #48]	; (1000a114 <LoopForever+0xe>)
  adds  r2, r0, r1
1000a0e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000a0e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000a0e8:	d3f6      	bcc.n	1000a0d8 <CopyDataInit>
  ldr  r2, =_sbss
1000a0ea:	4a0b      	ldr	r2, [pc, #44]	; (1000a118 <LoopForever+0x12>)
  b  LoopFillZerobss
1000a0ec:	e002      	b.n	1000a0f4 <LoopFillZerobss>

1000a0ee <FillZerobss>:
  movs  r3, #0
1000a0ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000a0f0:	f842 3b04 	str.w	r3, [r2], #4

1000a0f4 <LoopFillZerobss>:
  ldr  r3, = _ebss
1000a0f4:	4b09      	ldr	r3, [pc, #36]	; (1000a11c <LoopForever+0x16>)
  cmp  r2, r3
1000a0f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000a0f8:	d3f9      	bcc.n	1000a0ee <FillZerobss>
  bl  SystemInit
1000a0fa:	f7f7 fc3b 	bl	10001974 <SystemInit>
 bl __libc_init_array
1000a0fe:	f7fe fea1 	bl	10008e44 <__libc_init_array>
  bl main
1000a102:	f7f6 fb61 	bl	100007c8 <main>

1000a106 <LoopForever>:
    b LoopForever
1000a106:	e7fe      	b.n	1000a106 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000a108:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000a10c:	1000ada8 	.word	0x1000ada8
  ldr  r0, =_sdata
1000a110:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000a114:	1002048c 	.word	0x1002048c
  ldr  r2, =_sbss
1000a118:	10020518 	.word	0x10020518
  ldr  r3, = _ebss
1000a11c:	10021384 	.word	0x10021384
